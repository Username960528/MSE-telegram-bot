const config = require('../config/hurlburt');
const aiValidator = require('../services/ai-validator-service');

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö follow-up –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –º–µ—Ç–æ–¥—É –•–µ—Ä–ª–±–µ—Ä—Ç–∞
 * 
 * –¶–µ–ª—å: —Ä–∞–∑—Ä—É—à–∏—Ç—å –∏–ª–ª—é–∑–∏–∏ –∏ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø—ã—Ç–∞
 */
class FollowUpStrategy {
  constructor() {
    this.config = config;
    this.phenomena = config.phenomena;
    
    // –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π follow-up –≤–æ–ø—Ä–æ—Å–æ–≤
    this.followUpDatabase = {
      // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–µ—á—å
      innerSpeech: [
        {
          trigger: /–≥–æ–≤–æ—Ä|—Å–∫–∞–∑–∞–ª|–ø–æ–¥—É–º–∞–ª|–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å|–ø—Ä–æ–≥–æ–≤–∞—Ä/i,
          questions: [
            {
              text: 'üéß –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ "—Å–ª—ã—à–∞–ª–∏" —ç—Ç–∏ —Å–ª–æ–≤–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞–ª–∏ –∏—Ö —Å–º—ã—Å–ª?',
              clarifies: 'inner_speech_illusion',
              priority: 'high'
            },
            {
              text: 'üó£ –ï—Å–ª–∏ –±—ã–ª –≥–æ–ª–æ—Å - –æ–ø–∏—à–∏—Ç–µ –µ–≥–æ. –ú—É–∂—Å–∫–æ–π? –ñ–µ–Ω—Å–∫–∏–π? –í–∞—à? –ß–µ–π-—Ç–æ –¥—Ä—É–≥–æ–π?',
              clarifies: 'voice_characteristics',
              priority: 'medium'
            },
            {
              text: 'üìç –ì–¥–µ –∏–º–µ–Ω–Ω–æ –≤—ã "—Å–ª—ã—à–∞–ª–∏" —ç—Ç–æ—Ç –≥–æ–ª–æ—Å? –í –≥–æ–ª–æ–≤–µ? –í —É—à–∞—Ö? –í –≥—Ä—É–¥–∏?',
              clarifies: 'voice_location',
              priority: 'low'
            }
          ]
        },
        {
          trigger: /–¥—É–º–∞—é|—Ä–∞–∑–º—ã—à–ª—è|–æ–±–¥—É–º—ã–≤–∞|—Å–æ–æ–±—Ä–∞–∂/i,
          questions: [
            {
              text: 'üí≠ –≠—Ç–æ –±—ã–ª–∞ –º—ã—Å–ª—å –≤ —Å–ª–æ–≤–∞—Ö –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ/–∑–Ω–∞–Ω–∏–µ –±–µ–∑ —Å–ª–æ–≤?',
              clarifies: 'unsymbolized_thinking',
              priority: 'high'
            }
          ]
        }
      ],
      
      // –≠–º–æ—Ü–∏–∏
      emotion: [
        {
          trigger: /—Ä–∞–¥–æ—Å—Ç|—Å—á–∞—Å—Ç|–≤–µ—Å–µ–ª|–¥–æ–≤–æ–ª/i,
          questions: [
            {
              text: 'üòä –≠—Ç–∞ —Ä–∞–¥–æ—Å—Ç—å - —ç—Ç–æ –º—ã—Å–ª—å "—è —Ä–∞–¥" –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –æ—â—É—â–µ–Ω–∏–µ? –ï—Å–ª–∏ –æ—â—É—â–µ–Ω–∏–µ - –≥–¥–µ –≤ —Ç–µ–ª–µ?',
              clarifies: 'emotion_vs_thought',
              priority: 'high'
            },
            {
              text: '‚ú® –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏? –¢–µ–ø–ª–æ? –õ—ë–≥–∫–æ—Å—Ç—å? –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ –≥—Ä—É–¥–∏?',
              clarifies: 'emotion_sensory',
              priority: 'medium'
            }
          ]
        },
        {
          trigger: /–≥—Ä—É—Å—Ç|–ø–µ—á–∞–ª|—Ç–æ—Å–∫|–ø–æ–¥–∞–≤–ª–µ–Ω/i,
          questions: [
            {
              text: 'üò¢ –ì—Ä—É—Å—Ç—å –±—ã–ª–∞ –º—ã—Å–ª—å—é –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –æ—â—É—â–µ–Ω–∏–µ–º? –û–ø–∏—à–∏—Ç–µ —Ç–æ—á–Ω–µ–µ',
              clarifies: 'emotion_vs_thought',
              priority: 'high'
            },
            {
              text: 'üíî –ï—Å–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ - –≥–¥–µ –∏–º–µ–Ω–Ω–æ? –¢—è–∂–µ—Å—Ç—å –≤ –≥—Ä—É–¥–∏? –ö–æ–º –≤ –≥–æ—Ä–ª–µ? –ß—Ç–æ-—Ç–æ –µ—â—ë?',
              clarifies: 'emotion_location',
              priority: 'medium'
            }
          ]
        },
        {
          trigger: /–∑–ª–æ—Å—Ç|—Ä–∞–∑–¥—Ä–∞–∂|–±–µ—Å|–≥–Ω–µ–≤/i,
          questions: [
            {
              text: 'üò† –ó–ª–æ—Å—Ç—å - —ç—Ç–æ –±—ã–ª–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ –∏–ª–∏ –º—ã—Å–ª–∏ –æ —Ç–æ–º, —á—Ç–æ –∑–ª–∏—Ç–µ—Å—å?',
              clarifies: 'anger_physical',
              priority: 'high'
            }
          ]
        },
        {
          trigger: /—Ç—Ä–µ–≤–æ–≥|–±–µ—Å–ø–æ–∫–æ–π|–≤–æ–ª–Ω—É|—Å—Ç—Ä–∞—Ö/i,
          questions: [
            {
              text: 'üò∞ –¢—Ä–µ–≤–æ–≥–∞ - –≥–¥–µ –æ–Ω–∞ –±—ã–ª–∞? –í –∂–∏–≤–æ—Ç–µ? –í –≥—Ä—É–¥–∏? –ò–ª–∏ —ç—Ç–æ –±—ã–ª–∏ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –º—ã—Å–ª–∏?',
              clarifies: 'anxiety_location',
              priority: 'high'
            }
          ]
        }
      ],
      
      // –ß—Ç–µ–Ω–∏–µ
      reading: [
        {
          trigger: /—á–∏—Ç–∞/i,
          questions: [
            {
              text: 'üìñ –ö–æ–≥–¥–∞ —á–∏—Ç–∞–ª–∏, –≤—ã "—Å–ª—ã—à–∞–ª–∏" —Å–ª–æ–≤–∞, –≤–∏–¥–µ–ª–∏ –æ–±—Ä–∞–∑—ã –∏–ª–∏ —Å—Ä–∞–∑—É –ø–æ–Ω–∏–º–∞–ª–∏ —Å–º—ã—Å–ª?',
              clarifies: 'reading_modality',
              priority: 'high'
            },
            {
              text: 'üëÅ –ù–∞ –∫–∞–∫–æ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ —Å–º–æ—Ç—Ä–µ–ª–∏ –≤ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–∞?',
              clarifies: 'reading_precision',
              priority: 'medium'
            }
          ]
        }
      ],
      
      // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      planning: [
        {
          trigger: /–ø–ª–∞–Ω–∏—Ä—É|–±—É–¥—É|—Å–æ–±–∏—Ä–∞|–Ω–∞–º–µ—Ä–µ–Ω|—Ö–æ—á—É —Å–¥–µ–ª–∞—Ç—å/i,
          questions: [
            {
              text: 'üìã –≠—Ç–æ –±—ã–ª–∞ –º—ã—Å–ª—å –æ –±—É–¥—É—â–µ–º –∏–ª–∏ –≤—ã —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–ª–∏ (–ø–∏—Å–∞–ª–∏ –ø–ª–∞–Ω, –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏)?',
              clarifies: 'planning_vs_doing',
              priority: 'high'
            }
          ]
        }
      ],
      
      // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
      visualization: [
        {
          trigger: /–≤–∏–∂—É|–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è|–æ–±—Ä–∞–∑|–∫–∞—Ä—Ç–∏–Ω|–≤–∏–∑—É–∞–ª–∏–∑/i,
          questions: [
            {
              text: 'üñº –û–±—Ä–∞–∑ –±—ã–ª —á—ë—Ç–∫–∏–π –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–ª–∏ —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã–π? –¶–≤–µ—Ç–Ω–æ–π –∏–ª–∏ —á—ë—Ä–Ω–æ-–±–µ–ª—ã–π?',
              clarifies: 'image_quality',
              priority: 'high'
            },
            {
              text: 'üìê –ì–¥–µ –±—ã–ª —ç—Ç–æ—Ç –æ–±—Ä–∞–∑? –ü–µ—Ä–µ–¥ –≥–ª–∞–∑–∞–º–∏? –í –≥–æ–ª–æ–≤–µ? –û–ø–∏—à–∏—Ç–µ "—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"',
              clarifies: 'image_location',
              priority: 'medium'
            }
          ]
        }
      ],
      
      // –§–∏–∑–∏—á–µ—Å–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è
      physical: [
        {
          trigger: /–±–æ–ª—å|–æ—â—É—â–∞|—á—É–≤—Å—Ç–≤—É|—Ö–æ–ª–æ–¥|—Ç–µ–ø–ª|–Ω–∞–ø—Ä—è–∂/i,
          questions: [
            {
              text: 'üéØ –û–ø–∏—à–∏—Ç–µ —ç—Ç–æ –æ—â—É—â–µ–Ω–∏–µ —Ç–æ—á–Ω–µ–µ. –û—Å—Ç—Ä–æ–µ? –¢—É–ø–æ–µ? –ü—É–ª—å—Å–∏—Ä—É—é—â–µ–µ? –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ?',
              clarifies: 'sensation_quality',
              priority: 'high'
            },
            {
              text: 'üìç –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ. –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ (—Å –º–æ–Ω–µ—Ç—É? —Å –ª–∞–¥–æ–Ω—å?)',
              clarifies: 'sensation_precision',
              priority: 'medium'
            }
          ]
        }
      ],
      
      // –í–Ω–∏–º–∞–Ω–∏–µ
      attention: [
        {
          trigger: /—Å–º–æ—Ç—Ä|—Å–ª—É—à–∞|–≤–Ω–∏–º–∞|—Ñ–æ–∫—É—Å|–∫–æ–Ω—Ü–µ–Ω—Ç—Ä/i,
          questions: [
            {
              text: 'üëÅ –ù–∞ —á—Ç–æ –ò–ú–ï–ù–ù–û –±—ã–ª–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–Ω–∏–º–∞–Ω–∏–µ? –û–¥–∏–Ω –æ–±—ä–µ–∫—Ç –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ?',
              clarifies: 'attention_focus',
              priority: 'high'
            }
          ]
        }
      ],
      
      // –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
      memory: [
        {
          trigger: /–≤—Å–ø–æ–º–Ω|–ø–æ–º–Ω|–ø—Ä–æ—à–ª/i,
          questions: [
            {
              text: '‚è∞ –°—Ç–æ–ø! –í—ã –≤—Å–ø–æ–º–∏–Ω–∞–ª–∏ —á—Ç–æ-—Ç–æ –í –ú–û–ú–ï–ù–¢ —Å–∏–≥–Ω–∞–ª–∞ –∏–ª–∏ –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç–µ —Å–µ–π—á–∞—Å?',
              clarifies: 'memory_timing',
              priority: 'high'
            },
            {
              text: 'üé¨ –ï—Å–ª–∏ –≤—Å–ø–æ–º–∏–Ω–∞–ª–∏ - —ç—Ç–æ –±—ã–ª –æ–±—Ä–∞–∑, —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞–Ω–∏–µ –æ –ø—Ä–æ—à–ª–æ–º?',
              clarifies: 'memory_modality',
              priority: 'medium'
            }
          ]
        }
      ]
    };
    
    // –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–æ–≤
    this.askedQuestions = new Map();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π follow-up –≤–æ–ø—Ä–æ—Å
   * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
   * @returns {Promise<Object|null>} - –í–æ–ø—Ä–æ—Å –∏–ª–∏ null
   */
  async getNextQuestion(context) {
    const { responses, currentQuestion, userId, trainingDay } = context;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    const lastTextResponse = this.getLastTextResponse(responses);
    if (!lastTextResponse) return null;
    
    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    const candidates = this.findCandidateQuestions(lastTextResponse.text, trainingDay);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ (—Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    const unseenCandidates = await this.filterUnseenQuestions(candidates, userId, context);
    
    // –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –≤–æ–ø—Ä–æ—Å
    const selectedQuestion = this.selectBestQuestion(unseenCandidates, context);
    
    if (selectedQuestion) {
      this.markAsAsked(selectedQuestion, userId);
    }
    
    return selectedQuestion;
  }

  /**
   * –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
   */
  getLastTextResponse(responses) {
    const textFields = ['moment_capture', 'currentActivity', 'currentThoughts'];
    
    for (const field of textFields) {
      if (responses[field] && typeof responses[field] === 'string') {
        return {
          field,
          text: responses[field]
        };
      }
    }
    
    return null;
  }

  /**
   * –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
   */
  findCandidateQuestions(text, trainingDay) {
    const candidates = [];
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for (const [category, patterns] of Object.entries(this.followUpDatabase)) {
      for (const pattern of patterns) {
        if (pattern.trigger.test(text)) {
          // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —ç—Ç–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
          pattern.questions.forEach(q => {
            candidates.push({
              ...q,
              category,
              matchStrength: this.calculateMatchStrength(text, pattern.trigger),
              trainingDayRelevance: this.calculateTrainingRelevance(q, trainingDay)
            });
          });
        }
      }
    }
    
    return candidates;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∏–ª—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
   */
  calculateMatchStrength(text, regex) {
    const matches = text.match(regex);
    if (!matches) return 0;
    
    // –ß–µ–º –±–æ–ª—å—à–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ
    return matches.length;
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –¥–Ω—è –æ–±—É—á–µ–Ω–∏—è
   */
  calculateTrainingRelevance(question, trainingDay) {
    // –í –ø–µ—Ä–≤—ã–µ –¥–Ω–∏ –∑–∞–¥–∞—ë–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    if (trainingDay === 1) {
      return question.priority === 'high' ? 1 : 0.5;
    } else if (trainingDay === 2) {
      return question.priority === 'medium' ? 1 : 0.7;
    } else {
      return 1; // –ü–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã
    }
  }

  /**
   * –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ + –ò–ò)
   */
  async filterUnseenQuestions(candidates, userId, context) {
    const userQuestions = this.askedQuestions.get(userId) || new Set();
    const questionMapping = this.getQuestionSemanticMapping();
    
    // –≠—Ç–∞–ø 1: –ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
    const staticFiltered = candidates.filter(q => {
      const questionId = `${q.category}_${q.clarifies}`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–¥–∞–≤–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
      if (userQuestions.has(questionId)) {
        return false;
      }
      
      // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
      if (context && context.responses) {
        const semanticConcept = questionMapping[q.clarifies];
        
        if (semanticConcept) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞ —ç—Ç–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è
          if (this.hasConceptMentioned(semanticConcept, context.responses)) {
            return false;
          }
        }
      }
      
      return true;
    });

    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (staticFiltered.length === 0) {
      return staticFiltered;
    }

    // –≠—Ç–∞–ø 2: –ò–ò-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    if (config.ai && config.ai.enableSmartValidation && context && context.responses) {
      return await this.filterWithAI(staticFiltered, context);
    }

    return staticFiltered;
  }

  /**
   * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò
   */
  async filterWithAI(candidates, context) {
    try {
      const aiFilteredCandidates = [];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —á–µ—Ä–µ–∑ –ò–ò (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 3 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
      const candidatesToCheck = candidates.slice(0, 3);
      
      for (const candidate of candidatesToCheck) {
        try {
          const aiAnalysis = await aiValidator.analyzeSemanticSimilarity(
            candidate, 
            context.responses, 
            { userId: context.userId, trainingDay: context.trainingDay }
          );

          // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ò–ò –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
          candidate.aiAnalysis = aiAnalysis;

          // –ï—Å–ª–∏ –ò–ò –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
          if (aiAnalysis.shouldAsk && aiAnalysis.confidence > 0.6) {
            aiFilteredCandidates.push(candidate);
          } else {
            console.log(`AI filtered out question: ${candidate.clarifies} (confidence: ${aiAnalysis.confidence}, reason: ${aiAnalysis.reason})`);
          }
        } catch (error) {
          console.warn(`AI analysis failed for question ${candidate.clarifies}:`, error.message);
          // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ò–ò –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (fail-safe)
          aiFilteredCandidates.push(candidate);
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –±–µ–∑ –ò–ò-–ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      if (candidates.length > 3) {
        aiFilteredCandidates.push(...candidates.slice(3));
      }

      return aiFilteredCandidates;
    } catch (error) {
      console.error('AI filtering failed, falling back to static filtering:', error);
      return candidates; // Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á—å —É–ø–æ–º—è–Ω—É—Ç—ã–µ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   */
  extractBodyParts(text) {
    const bodyParts = [
      '–≥–ª–∞–∑', '–≥–ª–∞–∑–∞—Ö', '–≥–ª–∞–∑—É', '–≥–ª–∞–∑–∞',
      '–≥–æ–ª–æ–≤', '–≥–æ–ª–æ–≤–µ', '–≥–æ–ª–æ–≤—É', '–≥–æ–ª–æ–≤–∞',
      '–≥—Ä—É–¥', '–≥—Ä—É–¥–∏', '–≥—Ä—É–¥—å', '–≥—Ä—É–¥—å—é',
      '–∂–∏–≤–æ—Ç', '–∂–∏–≤–æ—Ç–µ', '–∂–∏–≤–æ—Ç–∞',
      '—Ä—É–∫', '—Ä—É–∫–µ', '—Ä—É–∫–∏', '—Ä—É–∫—É', '—Ä—É–∫–∞',
      '–Ω–æ–≥', '–Ω–æ–≥–µ', '–Ω–æ–≥–∏', '–Ω–æ–≥—É', '–Ω–æ–≥–∞',
      '—Å–ø–∏–Ω', '—Å–ø–∏–Ω–µ', '—Å–ø–∏–Ω–∞', '—Å–ø–∏–Ω—É',
      '—à–µ–µ', '—à–µ—è', '—à–µ—é',
      '–≥–æ—Ä–ª–µ', '–≥–æ—Ä–ª–æ', '–≥–æ—Ä–ª–∞',
      '–ø–ª–µ—á', '–ø–ª–µ—á–µ', '–ø–ª–µ—á–æ', '–ø–ª–µ—á–∞',
      '–ª–∏—Ü–µ', '–ª–∏—Ü–æ', '–ª–∏—Ü–∞',
      '–∑–∞—Ç—ã–ª–∫', '–∑–∞—Ç—ã–ª–∫–µ', '–∑–∞—Ç—ã–ª–æ–∫',
      '–ª–±—É', '–ª–æ–±', '–ª–±–∞'
    ];
    
    const foundParts = [];
    const lowerText = text.toLowerCase();
    
    for (const part of bodyParts) {
      if (lowerText.includes(part)) {
        foundParts.push(part);
      }
    }
    
    return foundParts;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–∞ –ª–∏ —É–∂–µ —É–ø–æ–º—è–Ω—É—Ç–∞ –ª–æ–∫–∞—Ü–∏—è —Ç–µ–ª–∞
   */
  hasBodyLocationMentioned(responses) {
    const allResponses = Object.values(responses).join(' ');
    const bodyParts = this.extractBodyParts(allResponses);
    return bodyParts.length > 0;
  }

  /**
   * –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
   */
  getSemanticConcepts() {
    return {
      // –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤—ã—à–µ)
      location: {
        patterns: [
          /–≤\s+(–≥–ª–∞–∑|–≥–æ–ª–æ–≤|–≥—Ä—É–¥|–∂–∏–≤–æ—Ç|—Ä—É–∫|–Ω–æ–≥|—Å–ø–∏–Ω|—à–µ–µ|–≥–æ—Ä–ª–µ|–ø–ª–µ—á|–ª–∏—Ü–µ|–∑–∞—Ç—ã–ª–∫|–ª–±—É)/i,
          /–Ω–∞\s+(–ª–∏—Ü–µ|—Ä—É–∫–µ|–Ω–æ–≥–µ|—Å–ø–∏–Ω–µ)/i,
          /(—Å–ª–µ–≤–∞|—Å–ø—Ä–∞–≤–∞|—Å–≤–µ—Ä—Ö—É|—Å–Ω–∏–∑—É|–≤–Ω—É—Ç—Ä–∏|—Å–Ω–∞—Ä—É–∂–∏)/i
        ],
        checker: (responses) => this.hasBodyLocationMentioned(responses)
      },
      
      // –ö–∞—á–µ—Å—Ç–≤–æ –æ—â—É—â–µ–Ω–∏–π
      quality: {
        patterns: [
          /(–æ—Å—Ç—Ä–æ–µ|—Ç—É–ø–æ–µ|–ø—É–ª—å—Å–∏—Ä—É—é—â–µ–µ|–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ|–Ω–æ—é—â–µ–µ|—Ä–µ–∂—É—â–µ–µ|–¥–∞–≤—è—â–µ–µ|–∂–≥—É—á–µ–µ)/i,
          /(—Å–∏–ª—å–Ω–æ–µ|—Å–ª–∞–±–æ–µ|—É–º–µ—Ä–µ–Ω–Ω–æ–µ|–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ)/i,
          /(—Ö–æ–ª–æ–¥–Ω–æ–µ|—Ç–µ–ø–ª–æ–µ|–≥–æ—Ä—è—á–µ–µ|–ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–µ)/i
        ],
        checker: (responses) => this.hasQualityMentioned(responses)
      },
      
      // –ú–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è  
      modality: {
        patterns: [
          /(—Å–ª—ã—à–∞–ª|–≤–∏–¥–µ–ª|—á—É–≤—Å—Ç–≤–æ–≤–∞–ª|–æ—â—É—â–∞–ª|–ø–æ–Ω–∏–º–∞–ª|–∑–Ω–∞–ª)/i,
          /(–≥–æ–ª–æ—Å|–∑–≤—É–∫|–æ–±—Ä–∞–∑|–∫–∞—Ä—Ç–∏–Ω|–≤–∏–∑—É–∞–ª–∏–∑)/i,
          /(–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π\s+–≥–æ–ª–æ—Å|–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è\s+—Ä–µ—á—å)/i
        ],
        checker: (responses) => this.hasModalityMentioned(responses)
      },
      
      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      timing: {
        patterns: [
          /(–≤\s+–º–æ–º–µ–Ω—Ç|–∏–º–µ–Ω–Ω–æ\s+—Ç–æ–≥–¥–∞|–ø—Ä—è–º–æ\s+—Å–µ–π—á–∞—Å|–≤\s+—Ç–æ—Ç\s+–º–æ–º–µ–Ω—Ç)/i,
          /(—Å–Ω–∞—á–∞–ª–∞|–ø–æ—Ç–æ–º|–ø–æ—Å–ª–µ|–¥–æ\s+—Ç–æ–≥–æ|–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ)/i,
          /(–º–≥–Ω–æ–≤–µ–Ω–Ω–æ|–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ|—Ä–µ–∑–∫–æ|–º–µ–¥–ª–µ–Ω–Ω–æ)/i
        ],
        checker: (responses) => this.hasTimingMentioned(responses)
      },
      
      // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ vs —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è
      emotion_vs_physical: {
        patterns: [
          /(—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ|—Ç–µ–ª–µ—Å–Ω–æ–µ|–æ—â—É—â–µ–Ω–∏–µ|—á—É–≤—Å—Ç–≤–æ\s+–≤\s+—Ç–µ–ª–µ)/i,
          /(–º—ã—Å–ª—å|—ç–º–æ—Ü–∏—è|–ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ|—Å–æ—Å—Ç–æ—è–Ω–∏–µ)/i,
          /(–æ—Ç–ª–∏—á–∏—Ç—å|—Ä–∞–∑–ª–∏—á–∏—Ç—å|—Ä–∞–∑–¥–µ–ª–∏—Ç—å)/i
        ],
        checker: (responses) => this.hasEmotionDistinctionMentioned(responses)
      },
      
      // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–Ω–∏–º–∞–Ω–∏—è/—Ñ–æ–∫—É—Å–∞
      attention: {
        patterns: [
          /(—Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω|—Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω|–≤–Ω–∏–º–∞–Ω–∏–µ\s+–Ω–∞)/i,
          /(–æ–¥–∏–Ω\s+–æ–±—ä–µ–∫—Ç|–Ω–µ—Å–∫–æ–ª—å–∫–æ\s+–æ–±—ä–µ–∫—Ç–æ–≤|—Ä–∞—Å—Å–µ—è–Ω–Ω–æ)/i,
          /(—á–µ—Ç–∫–æ|—Ä–∞–∑–º—ã—Ç–æ|—è—Å–Ω–æ|–Ω–µ—è—Å–Ω–æ)/i
        ],
        checker: (responses) => this.hasAttentionMentioned(responses)
      }
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—â—É—â–µ–Ω–∏–π
   */
  hasQualityMentioned(responses) {
    const allText = Object.values(responses).join(' ').toLowerCase();
    const qualityWords = [
      '–æ—Å—Ç—Ä–æ–µ', '–æ—Å—Ç—Ä–∞—è', '–æ—Å—Ç—Ä—ã–π', '–æ—Å—Ç—Ä–æ',
      '—Ç—É–ø–æ–µ', '—Ç—É–ø–∞—è', '—Ç—É–ø–æ–π', '—Ç—É–ø–æ',
      '–ø—É–ª—å—Å–∏—Ä—É—é—â–µ–µ', '–ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è', '–ø—É–ª—å—Å–∏—Ä—É—é—â–∏–π', '–ø—É–ª—å—Å–∏—Ä—É–µ—Ç',
      '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ', '–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è', '–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π', '–ø–æ—Å—Ç–æ—è–Ω–Ω–æ',
      '–Ω–æ—é—â–µ–µ', '–Ω–æ—é—â–∞—è', '–Ω–æ—é—â–∏–π', '–Ω–æ–µ—Ç',
      '—Ä–µ–∂—É—â–µ–µ', '—Ä–µ–∂—É—â–∞—è', '—Ä–µ–∂—É—â–∏–π', '—Ä–µ–∂–µ—Ç',
      '–¥–∞–≤—è—â–µ–µ', '–¥–∞–≤—è—â–∞—è', '–¥–∞–≤—è—â–∏–π', '–¥–∞–≤–∏—Ç',
      '–∂–≥—É—á–µ–µ', '–∂–≥—É—á–∞—è', '–∂–≥—É—á–∏–π', '–∂–∂–µ—Ç',
      '—Å–∏–ª—å–Ω–æ–µ', '—Å–∏–ª—å–Ω–∞—è', '—Å–∏–ª—å–Ω—ã–π', '—Å–∏–ª—å–Ω–æ',
      '—Å–ª–∞–±–æ–µ', '—Å–ª–∞–±–∞—è', '—Å–ª–∞–±—ã–π', '—Å–ª–∞–±–æ',
      '—É–º–µ—Ä–µ–Ω–Ω–æ–µ', '—É–º–µ—Ä–µ–Ω–Ω–∞—è', '—É–º–µ—Ä–µ–Ω–Ω—ã–π', '—É–º–µ—Ä–µ–Ω–Ω–æ',
      '–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ', '–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è', '–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π', '–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ',
      '—Ö–æ–ª–æ–¥–Ω–æ–µ', '—Ö–æ–ª–æ–¥–Ω–∞—è', '—Ö–æ–ª–æ–¥–Ω—ã–π', '—Ö–æ–ª–æ–¥–Ω–æ',
      '—Ç–µ–ø–ª–æ–µ', '—Ç–µ–ø–ª–∞—è', '—Ç–µ–ø–ª—ã–π', '—Ç–µ–ø–ª–æ',
      '–≥–æ—Ä—è—á–µ–µ', '–≥–æ—Ä—è—á–∞—è', '–≥–æ—Ä—è—á–∏–π', '–≥–æ—Ä—è—á–æ',
      '–ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–µ', '–ø—Ä–æ—Ö–ª–∞–¥–Ω–∞—è', '–ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–π', '–ø—Ä–æ—Ö–ª–∞–¥–Ω–æ'
    ];
    return qualityWords.some(word => allText.includes(word));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏
   */
  hasModalityMentioned(responses) {
    const allText = Object.values(responses).join(' ').toLowerCase();
    const modalityWords = ['—Å–ª—ã—à–∞–ª', '–≤–∏–¥–µ–ª', '—á—É–≤—Å—Ç–≤–æ–≤–∞–ª', '–æ—â—É—â–∞–ª', '–ø–æ–Ω–∏–º–∞–ª', '–∑–Ω–∞–ª', '–≥–æ–ª–æ—Å', '–∑–≤—É–∫', '–æ–±—Ä–∞–∑', '–∫–∞—Ä—Ç–∏–Ω', '–≤–∏–∑—É–∞–ª–∏–∑'];
    return modalityWords.some(word => allText.includes(word));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
   */
  hasTimingMentioned(responses) {
    const allText = Object.values(responses).join(' ').toLowerCase();
    const timingWords = ['–≤ –º–æ–º–µ–Ω—Ç', '–∏–º–µ–Ω–Ω–æ —Ç–æ–≥–¥–∞', '–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å', '–≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç', '—Å–Ω–∞—á–∞–ª–∞', '–ø–æ—Ç–æ–º', '–ø–æ—Å–ª–µ', '–¥–æ —Ç–æ–≥–æ', '–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ', '–º–≥–Ω–æ–≤–µ–Ω–Ω–æ', '–ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ', '—Ä–µ–∑–∫–æ', '–º–µ–¥–ª–µ–Ω–Ω–æ'];
    return timingWords.some(phrase => allText.includes(phrase));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–π –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—è–≤–ª–µ–Ω–∏–π
   */
  hasEmotionDistinctionMentioned(responses) {
    const allText = Object.values(responses).join(' ').toLowerCase();
    const distinctionWords = ['—Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ', '—Ç–µ–ª–µ—Å–Ω–æ–µ', '–æ—â—É—â–µ–Ω–∏–µ', '–º—ã—Å–ª—å', '—ç–º–æ—Ü–∏—è', '–ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ', '–æ—Ç–ª–∏—á–∏—Ç—å', '—Ä–∞–∑–ª–∏—á–∏—Ç—å', '—Ä–∞–∑–¥–µ–ª–∏—Ç—å'];
    return distinctionWords.some(word => allText.includes(word));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤–Ω–∏–º–∞–Ω–∏—è
   */
  hasAttentionMentioned(responses) {
    const allText = Object.values(responses).join(' ').toLowerCase();
    const attentionWords = ['—Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω', '—Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω', '–≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞', '–æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç', '–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤', '—Ä–∞—Å—Å–µ—è–Ω–Ω–æ', '—á–µ—Ç–∫–æ', '—Ä–∞–∑–º—ã—Ç–æ', '—è—Å–Ω–æ', '–Ω–µ—è—Å–Ω–æ'];
    return attentionWords.some(phrase => allText.includes(phrase));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–∞ –ª–∏ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è
   */
  hasConceptMentioned(conceptName, responses) {
    const concepts = this.getSemanticConcepts();
    const concept = concepts[conceptName];
    
    if (!concept || !concept.checker) {
      return false;
    }
    
    return concept.checker(responses);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º
   */
  getQuestionSemanticMapping() {
    return {
      // –í–æ–ø—Ä–æ—Å—ã –æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏
      'sensation_precision': 'location',
      'emotion_location': 'location', 
      'voice_location': 'location',
      'image_location': 'location',
      'anxiety_location': 'location',
      
      // –í–æ–ø—Ä–æ—Å—ã –æ –∫–∞—á–µ—Å—Ç–≤–µ –æ—â—É—â–µ–Ω–∏–π
      'sensation_quality': 'quality',
      'emotion_sensory': 'quality',
      
      // –í–æ–ø—Ä–æ—Å—ã –æ –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
      'reading_modality': 'modality',
      'inner_speech_illusion': 'modality',
      'unsymbolized_thinking': 'modality',
      'voice_characteristics': 'modality',
      'memory_modality': 'modality',
      'image_quality': 'modality',
      
      // –í–æ–ø—Ä–æ—Å—ã –æ –≤—Ä–µ–º–µ–Ω–∏
      'memory_timing': 'timing',
      'reading_precision': 'timing',
      
      // –í–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–∑–ª–∏—á–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–π –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—è–≤–ª–µ–Ω–∏–π
      'emotion_vs_thought': 'emotion_vs_physical',
      'anger_physical': 'emotion_vs_physical',
      
      // –í–æ–ø—Ä–æ—Å—ã –æ –≤–Ω–∏–º–∞–Ω–∏–∏
      'attention_focus': 'attention',
      
      // –í–æ–ø—Ä–æ—Å—ã –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã)
      'planning_vs_doing': null
    };
  }

  /**
   * –í—ã–±—Ä–∞—Ç—å –ª—É—á—à–∏–π –≤–æ–ø—Ä–æ—Å
   */
  selectBestQuestion(candidates, context) {
    if (candidates.length === 0) return null;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    candidates.sort((a, b) => {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
      const priorityScore = {
        high: 3,
        medium: 2,
        low: 1
      };
      
      const scoreA = priorityScore[a.priority] * a.trainingDayRelevance * a.matchStrength;
      const scoreB = priorityScore[b.priority] * b.trainingDayRelevance * b.matchStrength;
      
      return scoreB - scoreA;
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å - –∏–Ω–æ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ–º –Ω–µ —Å–∞–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π
    const randomFactor = Math.random();
    if (randomFactor < 0.8) {
      return candidates[0]; // 80% –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π
    } else if (candidates.length > 1) {
      return candidates[1]; // 20% –≤—Ä–µ–º–µ–Ω–∏ –≤—Ç–æ—Ä–æ–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    }
    
    return candidates[0];
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –∑–∞–¥–∞–Ω–Ω—ã–π
   */
  markAsAsked(question, userId) {
    if (!this.askedQuestions.has(userId)) {
      this.askedQuestions.set(userId, new Set());
    }
    
    const questionId = `${question.category}_${question.clarifies}`;
    this.askedQuestions.get(userId).add(questionId);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ follow-up –≤–æ–ø—Ä–æ—Å
   */
  analyzeFollowUpResponse(response, question, context) {
    const analysis = {
      insightGained: false,
      phenomenaDetected: [],
      illusionBroken: false,
      recommendations: []
    };
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è
    switch (question.clarifies) {
      case 'inner_speech_illusion':
        if (response.toLowerCase().includes('–∑–Ω–∞–ª') || response.toLowerCase().includes('–ø–æ–Ω–∏–º–∞–ª')) {
          analysis.illusionBroken = true;
          analysis.phenomenaDetected.push('unsymbolized_thinking');
          analysis.recommendations.push('–û—Ç–ª–∏—á–Ω–æ! –í—ã —Ä–∞–∑–ª–∏—á–∏–ª–∏ –º—ã—Å–ª—å –æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ—á–∏');
        }
        break;
        
      case 'emotion_vs_thought':
        if (response.match(/—Ç–µ–ª|—Ñ–∏–∑|–æ—â—É—â|–≥—Ä—É–¥|–∂–∏–≤–æ—Ç|–≥–æ—Ä–ª/i)) {
          analysis.insightGained = true;
          analysis.phenomenaDetected.push('embodied_emotion');
        }
        break;
        
      case 'reading_modality':
        if (response.toLowerCase().includes('–ø–æ–Ω–∏–º–∞–ª') || response.toLowerCase().includes('–∑–Ω–∞–ª')) {
          analysis.illusionBroken = true;
          analysis.recommendations.push('–î–∞! –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≥–æ–ª–æ—Å–∞');
        }
        break;
    }
    
    return analysis;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
   */
  getPersonalizedInsights(userId, allResponses) {
    const insights = [];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const innerSpeechCount = allResponses.filter(r => 
      r.metadata?.phenomena?.includes('innerSpeech')
    ).length;
    
    const totalCount = allResponses.length;
    
    if (innerSpeechCount / totalCount > 0.5) {
      insights.push({
        type: 'pattern',
        message: 'üéØ –í—ã —á–∞—Å—Ç–æ —Å–æ–æ–±—â–∞–µ—Ç–µ –æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ - —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ "–≥–æ–ª–æ—Å" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞–Ω–∏–µ?',
        confidence: 0.8
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    
    return insights;
  }

  /**
   * –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è)
   */
  resetUserHistory(userId) {
    this.askedQuestions.delete(userId);
  }
}

module.exports = FollowUpStrategy;