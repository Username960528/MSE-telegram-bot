const config = require('../config/hurlburt');

/**
 * –í–∞–ª–∏–¥–∞—Ç–æ—Ä –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –ø–æ –º–µ—Ç–æ–¥—É –•–µ—Ä–ª–±–µ—Ä—Ç–∞
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–∞–º–æ–æ—Ç—á—ë—Ç–æ–≤ –∏ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 * –Ω–∞—É—á–∏—Ç—å—Å—è —Ç–æ—á–Ω–æ–º—É —Å–∞–º–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—é.
 */
class MomentValidator {
  constructor() {
    this.config = config.validation;
    this.phenomena = config.phenomena;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @param {string} text - –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} validationType - –¢–∏–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (pristine, specific, etc.)
   * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã, –¥–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è –∏ —Ç.–¥.)
   * @returns {Object} - { valid, feedback, score, detectedIssues, phenomena }
   */
  validate(text, validationType = 'general', context = {}) {
    const result = {
      valid: true,
      feedback: null,
      score: 100,
      detectedIssues: [],
      phenomena: [],
      suggestions: []
    };

    // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (!text || text.trim().length === 0) {
      return {
        ...result,
        valid: false,
        feedback: 'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç',
        score: 0
      };
    }

    const normalizedText = text.toLowerCase().trim();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if (normalizedText.length < 10) {
      result.detectedIssues.push('too_short');
      result.score -= 30;
      result.suggestions.push('–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É—Å–æ—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const garbageCheck = this.checkGarbagePatterns(normalizedText);
    if (garbageCheck.found.length > 0) {
      result.detectedIssues.push(...garbageCheck.types);
      result.score -= garbageCheck.penalty;
      result.feedback = garbageCheck.feedback;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const positiveCheck = this.checkPositivePatterns(normalizedText);
    result.score += positiveCheck.bonus;
    if (positiveCheck.found.length > 0) {
      result.phenomena.push(...positiveCheck.phenomena);
    }

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (validationType === 'pristine') {
      const pristineCheck = this.validatePristineExperience(normalizedText, context);
      result.score = Math.min(result.score, pristineCheck.score);
      if (pristineCheck.feedback) {
        result.feedback = pristineCheck.feedback;
      }
      result.detectedIssues.push(...pristineCheck.issues);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if (context.previousResponses) {
      const repeatCheck = this.checkForRepeats(normalizedText, context.previousResponses);
      if (repeatCheck.isRepeat) {
        result.detectedIssues.push('repeat');
        result.score -= 20;
        result.suggestions.push('–û–ø–∏—à–∏—Ç–µ –∏–º–µ–Ω–Ω–æ –≠–¢–û–¢ –º–æ–º–µ–Ω—Ç, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ –ø—Ä–æ—à–ª—ã–µ');
      }
    }

    // –î–µ—Ç–µ–∫—Ü–∏—è —Ñ–µ–Ω–æ–º–µ–Ω–æ–≤ –•–µ—Ä–ª–±–µ—Ä—Ç–∞
    const phenomenaDetected = this.detectHurlburtPhenomena(normalizedText);
    result.phenomena.push(...phenomenaDetected);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    result.score = Math.max(0, Math.min(100, result.score));
    result.valid = result.score >= 40 || (context.trainingDay === 1 && result.score >= 30);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if (!result.valid && !result.feedback) {
      result.feedback = this.generateFeedback(result.detectedIssues, context);
    }

    return result;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É—Å–æ—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
   */
  checkGarbagePatterns(text) {
    const found = [];
    const types = [];
    let penalty = 0;
    let feedback = null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –º—É—Å–æ—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    for (const [type, patterns] of Object.entries(this.config.garbage)) {
      for (const pattern of patterns) {
        if (text.includes(pattern)) {
          found.push(pattern);
          if (!types.includes(type)) {
            types.push(type);
          }
        }
      }
    }

    // –†–∞—Å—á—ë—Ç —à—Ç—Ä–∞—Ñ–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if (types.includes('generic')) {
      penalty += 20;
      feedback = config.messages.corrections.tooGeneric;
    }
    if (types.includes('theoretical')) {
      penalty += 25;
      feedback = config.messages.corrections.theoretical;
    }
    if (types.includes('retrospective')) {
      penalty += 30;
      feedback = config.messages.corrections.retrospective;
    }
    if (types.includes('future')) {
      penalty += 30;
      feedback = config.messages.corrections.future;
    }
    if (types.includes('abstract')) {
      penalty += 15;
      feedback = config.messages.corrections.abstract;
    }

    return { found, types, penalty, feedback };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  checkPositivePatterns(text) {
    const found = [];
    const phenomena = [];
    let bonus = 0;

    for (const [type, patterns] of Object.entries(this.config.positive)) {
      for (const pattern of patterns) {
        if (text.includes(pattern)) {
          found.push(pattern);
          
          switch(type) {
            case 'sensory':
              bonus += 10;
              phenomena.push('sensory_awareness');
              break;
            case 'specific':
              bonus += 8;
              break;
            case 'momentary':
              bonus += 12;
              break;
          }
        }
      }
    }

    return { found, phenomena, bonus };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è "—á–∏—Å—Ç–æ–≥–æ" –æ–ø—ã—Ç–∞ (pristine experience)
   */
  validatePristineExperience(text, context) {
    const issues = [];
    let score = 100;
    let feedback = null;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏—è
    const interpretationWords = ['–ø–æ—Ç–æ–º—É —á—Ç–æ', '—Ç–∞–∫ –∫–∞–∫', '–ø–æ—ç—Ç–æ–º—É', '–∑–Ω–∞—á–∏—Ç', '—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ'];
    if (interpretationWords.some(word => text.includes(word))) {
      issues.push('interpretation');
      score -= 15;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ü–µ–Ω–æ—á–Ω—ã–µ —Å—É–∂–¥–µ–Ω–∏—è
    const judgmentWords = ['—Ö–æ—Ä–æ—à–æ', '–ø–ª–æ—Ö–æ', '–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–¥–æ–ª–∂–µ–Ω'];
    if (judgmentWords.some(word => text.includes(word))) {
      issues.push('judgment');
      score -= 10;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç–∏
    const pastWords = ['–±—ã–ª', '–±—ã–ª–∞', '–±—ã–ª–æ', '–±—ã–ª–∏'];
    const presentWords = ['–µ—Å—Ç—å', '–Ω–∞—Ö–æ–∂—É—Å—å', '–¥–µ–ª–∞—é', '–≤–∏–∂—É', '—Å–ª—ã—à—É'];
    
    const pastCount = pastWords.filter(word => text.includes(word)).length;
    const presentCount = presentWords.filter(word => text.includes(word)).length;
    
    if (pastCount > presentCount * 2) {
      issues.push('past_tense');
      score -= 20;
      feedback = '‚è∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è - –æ–ø–∏—à–∏—Ç–µ –º–æ–º–µ–Ω—Ç –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–∏–∑–Ω–∞–∫ –¥–æ–¥—É–º—ã–≤–∞–Ω–∏—è)
    if (text.length > 300) {
      issues.push('too_long');
      score -= 10;
      feedback = config.messages.corrections.tooLong;
    }

    return { score, feedback, issues };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—ã
   */
  checkForRepeats(text, previousResponses) {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    const threshold = 0.7; // 70% —Å—Ö–æ–∂–µ—Å—Ç–∏
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞
    if (!previousResponses || !Array.isArray(previousResponses)) {
      return { isRepeat: false };
    }
    
    for (const prev of previousResponses.slice(-5)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      if (!prev || typeof prev !== 'string') {
        continue;
      }
      
      const similarity = this.calculateSimilarity(text, prev);
      if (similarity > threshold) {
        return { isRepeat: true, similarity };
      }
    }
    
    return { isRepeat: false };
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á—ë—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤
   */
  calculateSimilarity(text1, text2) {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!text1 || !text2 || typeof text1 !== 'string' || typeof text2 !== 'string') {
      return 0;
    }
    
    const words1 = text1.split(/\s+/);
    const words2 = text2.split(/\s+/);
    
    const commonWords = words1.filter(word => words2.includes(word));
    return commonWords.length / Math.max(words1.length, words2.length);
  }

  /**
   * –î–µ—Ç–µ–∫—Ü–∏—è —Ñ–µ–Ω–æ–º–µ–Ω–æ–≤ –•–µ—Ä–ª–±–µ—Ä—Ç–∞
   */
  detectHurlburtPhenomena(text) {
    const detected = [];

    for (const [key, phenomenon] of Object.entries(this.phenomena)) {
      for (const marker of phenomenon.markers) {
        if (text.includes(marker)) {
          detected.push({
            type: key,
            name: phenomenon.name,
            confidence: 0.7 // –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å ML
          });
          break;
        }
      }
    }

    return detected;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   */
  generateFeedback(issues, context) {
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–±–ª–µ–º
    const priority = ['retrospective', 'future', 'theoretical', 'generic', 'abstract', 'too_short'];
    
    for (const issue of priority) {
      if (issues.includes(issue)) {
        return config.messages.corrections[issue] || config.messages.corrections.tooGeneric;
      }
    }

    // –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –æ–±—É—á–µ–Ω–∏—è
    if (context.trainingDay === 1) {
      return 'üí° –ü–æ–º–Ω–∏—Ç–µ: –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã–ª–æ –ü–†–Ø–ú–û –í –ú–û–ú–ï–ù–¢ —Å–∏–≥–Ω–∞–ª–∞';
    } else if (context.trainingDay === 2) {
      return 'üîç –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ - —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –≤–∏–¥–µ–ª–∏/—Å–ª—ã—à–∞–ª–∏/—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏?';
    } else {
      return 'üéØ –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —á–∏—Å—Ç–æ–º –æ–ø—ã—Ç–µ –±–µ–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π';
    }
  }

  /**
   * –†–∞—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
   */
  calculateOverallQuality(responses) {
    const weights = config.quality.weights;
    let totalScore = 0;

    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å
    const specificityScore = this.calculateSpecificity(responses);
    totalScore += specificityScore * weights.specificity;

    // –§–æ–∫—É—Å –Ω–∞ –º–æ–º–µ–Ω—Ç–µ
    const momentFocusScore = this.calculateMomentFocus(responses);
    totalScore += momentFocusScore * weights.momentFocus;

    // –°–µ–Ω—Å–æ—Ä–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    const sensoryScore = this.calculateSensoryDetail(responses);
    totalScore += sensoryScore * weights.sensoryDetail;

    // –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    const consistencyScore = this.calculateConsistency(responses);
    totalScore += consistencyScore * weights.consistency;

    // –ö—Ä–∞—Ç–∫–æ—Å—Ç—å
    const brevityScore = this.calculateBrevity(responses);
    totalScore += brevityScore * weights.brevity;

    return Math.round(totalScore);
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞
   */
  calculateSpecificity(responses) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–π
    let totalSpecificity = 0;
    let count = 0;

    for (const [key, value] of Object.entries(responses)) {
      if (typeof value === 'string' && value.length > 10) {
        const specific = this.config.positive.specific;
        const matches = specific.filter(word => value.toLowerCase().includes(word)).length;
        totalSpecificity += Math.min(100, matches * 20);
        count++;
      }
    }

    return count > 0 ? totalSpecificity / count : 50;
  }

  calculateMomentFocus(responses) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–º –º–æ–º–µ–Ω—Ç–µ
    if (!responses.moment_capture) return 50;
    
    const text = responses.moment_capture.toLowerCase();
    const momentWords = this.config.positive.momentary;
    const retroWords = this.config.garbage.retrospective;
    
    const momentScore = momentWords.filter(w => text.includes(w)).length * 15;
    const retroPenalty = retroWords.filter(w => text.includes(w)).length * 20;
    
    return Math.max(0, Math.min(100, 50 + momentScore - retroPenalty));
  }

  calculateSensoryDetail(responses) {
    // –û—Ü–µ–Ω–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
    let sensoryCount = 0;
    let totalResponses = 0;

    for (const [key, value] of Object.entries(responses)) {
      if (typeof value === 'string' && value.length > 10) {
        const sensory = this.config.positive.sensory;
        if (sensory.some(word => value.toLowerCase().includes(word))) {
          sensoryCount++;
        }
        totalResponses++;
      }
    }

    return totalResponses > 0 ? (sensoryCount / totalResponses) * 100 : 50;
  }

  calculateConsistency(responses) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —à–∫–∞–ª–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–æ–º
    const mood = responses.mood;
    const stress = responses.stress;
    const energy = responses.energy;
    const text = (responses.moment_capture || '').toLowerCase();

    let consistencyScore = 100;

    // –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å—Ç—Ä–µ—Å—Å–∞
    if (mood >= 6 && stress >= 6) {
      consistencyScore -= 20; // –í—ã—Å–æ–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ + –≤—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å = –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
    }

    // –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Ç–µ–∫—Å—Ç–∞
    if (energy <= 2 && !text.match(/—É—Å—Ç–∞–ª|—É—Ç–æ–º–ª–µ–Ω|–∏–∑–º–æ–∂–¥–µ–Ω|—Å–æ–Ω–Ω/)) {
      consistencyScore -= 15;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Flow —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (responses.challenge && responses.skill) {
      const flowState = this.detectFlowState(responses.challenge, responses.skill);
      if (flowState === 'flow' && stress >= 6) {
        consistencyScore -= 15; // –í –ø–æ—Ç–æ–∫–µ –æ–±—ã—á–Ω–æ –Ω–∏–∑–∫–∏–π —Å—Ç—Ä–µ—Å—Å
      }
    }

    return Math.max(0, consistencyScore);
  }

  calculateBrevity(responses) {
    // –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ—Å—Ç—å (–Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –¥–µ—Ç–∞–ª—è–º–∏)
    const momentText = responses.moment_capture || '';
    const activityText = responses.currentActivity || '';
    
    const totalLength = momentText.length + activityText.length;
    
    if (totalLength < 50) return 60; // –°–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–æ
    if (totalLength > 500) return 40; // –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
    if (totalLength > 300) return 70; // –ú–Ω–æ–≥–æ–≤–∞—Ç–æ
    return 100; // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Flow —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  detectFlowState(challenge, skill) {
    const zones = config.flow.zones;
    
    for (const [zone, ranges] of Object.entries(zones)) {
      if (challenge >= ranges.challenge[0] && challenge <= ranges.challenge[1] &&
          skill >= ranges.skill[0] && skill <= ranges.skill[1]) {
        return zone;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–Ω—É –∑–æ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
    const diff = Math.abs(challenge - skill);
    if (diff <= 1 && challenge >= 5 && skill >= 5) return 'flow';
    if (challenge > skill + 2) return 'anxiety';
    if (skill > challenge + 2) return 'boredom';
    return 'neutral';
  }
}

module.exports = MomentValidator;