#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ + –ò–ò
 */

const FollowUpStrategy = require('./strategies/followUpStrategy');
const aiValidator = require('./services/ai-validator-service');

class SemanticIntegrationTest {
  constructor() {
    this.followUpStrategy = new FollowUpStrategy();
    this.testCases = this.createTestCases();
    this.results = [];
  }

  createTestCases() {
    return [
      {
        name: '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ (—Å—Ç–∞—Ç–∏–∫–∞)',
        responses: {
          moment_capture: '–î–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –≤ –≥–ª–∞–∑–∞—Ö –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ',
          currentActivity: '–ß–∏—Ç–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ'
        },
        expectedBlock: ['sensation_precision', 'emotion_location'],
        description: '–î–æ–ª–∂–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –ª–æ–∫–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ "–≤ –≥–ª–∞–∑–∞—Ö" —É–∂–µ —É–∫–∞–∑–∞–Ω–æ'
      },
      {
        name: '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—â—É—â–µ–Ω–∏–π',
        responses: {
          moment_capture: '–û—Å—Ç—Ä–∞—è –±–æ–ª—å –≤ —Å–ø–∏–Ω–µ, –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è',
          currentActivity: '–°–∏–¥–µ–ª –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º'
        },
        expectedBlock: ['sensation_quality'],
        description: '–î–æ–ª–∂–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –∫–∞—á–µ—Å—Ç–≤–µ (–æ—Å—Ç—Ä–∞—è, –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è)'
      },
      {
        name: '–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏',
        responses: {
          moment_capture: '–°–ª—ã—à–∞–ª –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏–ª "–Ω–∞–¥–æ –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è"',
          currentActivity: '–î—É–º–∞–ª –æ –ø–ª–∞–Ω–∞—Ö –Ω–∞ –¥–µ–Ω—å'
        },
        expectedBlock: ['inner_speech_illusion', 'voice_characteristics'],
        description: '–î–æ–ª–∂–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ—á–∏'
      },
      {
        name: '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤',
        responses: {
          moment_capture: '–ü—Ä–æ—Å—Ç–æ –∑–Ω–∞–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å',
          currentActivity: '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á–∏'
        },
        expectedAllow: ['attention_focus', 'planning_vs_doing'],
        description: '–î–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –≤–Ω–∏–º–∞–Ω–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏'
      },
      {
        name: '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å (–ò–ò —Ç–µ—Å—Ç)',
        responses: {
          moment_capture: '–ù–µ–ø—Ä–∏—è—Ç–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –≥–æ–ª–æ–≤—ã',
          currentActivity: '–†–∞–±–æ—Ç–∞–ª –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º'
        },
        candidateQuestion: {
          text: '–ì–¥–µ –∏–º–µ–Ω–Ω–æ –≤ —Ç–µ–ª–µ –≤—ã —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —ç—Ç–∏ –æ—â—É—â–µ–Ω–∏—è?',
          clarifies: 'sensation_precision',
          category: 'physical',
          priority: 'high'
        },
        expectedAIBlock: true,
        description: '–ò–ò –¥–æ–ª–∂–µ–Ω –ø–æ–Ω—è—Ç—å: "–æ–±–ª–∞—Å—Ç—å –≥–æ–ª–æ–≤—ã" ‚â° –ª–æ–∫–∞—Ü–∏—è —É–∂–µ —É–∫–∞–∑–∞–Ω–∞'
      }
    ];
  }

  async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...\n');

    for (const testCase of this.testCases) {
      try {
        const result = await this.runSingleTest(testCase);
        this.results.push(result);
        this.printTestResult(result);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ "${testCase.name}":`, error.message);
        this.results.push({
          name: testCase.name,
          passed: false,
          error: error.message
        });
      }
    }

    this.printSummary();
  }

  async runSingleTest(testCase) {
    const context = {
      responses: testCase.responses,
      currentQuestion: 0,
      userId: 'test_user_' + Date.now(),
      trainingDay: 2
    };

    // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª
    if (testCase.expectedBlock) {
      for (const questionType of testCase.expectedBlock) {
        const isBlocked = this.testStaticBlocking(questionType, testCase.responses);
        if (!isBlocked) {
          return {
            name: testCase.name,
            passed: false,
            reason: `–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç–∏–ø–∞: ${questionType}`,
            details: testCase.description
          };
        }
      }
    }

    // –¢–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    if (testCase.expectedAllow) {
      for (const questionType of testCase.expectedAllow) {
        const isBlocked = this.testStaticBlocking(questionType, testCase.responses);
        if (isBlocked) {
          return {
            name: testCase.name,
            passed: false,
            reason: `–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: ${questionType}`,
            details: testCase.description
          };
        }
      }
    }

    // –¢–µ—Å—Ç –ò–ò –∞–Ω–∞–ª–∏–∑–∞
    if (testCase.candidateQuestion && testCase.expectedAIBlock !== undefined) {
      try {
        const aiResult = await aiValidator.analyzeSemanticSimilarity(
          testCase.candidateQuestion,
          testCase.responses,
          { userId: context.userId, trainingDay: context.trainingDay }
        );

        const actualBlocked = !aiResult.shouldAsk;
        if (actualBlocked !== testCase.expectedAIBlock) {
          return {
            name: testCase.name,
            passed: false,
            reason: `–ò–ò –∞–Ω–∞–ª–∏–∑ –¥–∞–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –û–∂–∏–¥–∞–ª–æ—Å—å: ${testCase.expectedAIBlock ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '—Ä–∞–∑—Ä–µ—à–∏—Ç—å'}, –ø–æ–ª—É—á–µ–Ω–æ: ${actualBlocked ? '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ' : '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ'}`,
            details: `Confidence: ${aiResult.confidence}, Reason: ${aiResult.reason}`,
            aiResult: aiResult
          };
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ò–ò –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞ "${testCase.name}": ${error.message}`);
        // –î–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º fallback
      }
    }

    return {
      name: testCase.name,
      passed: true,
      reason: '–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
      details: testCase.description
    };
  }

  testStaticBlocking(questionType, responses) {
    const mapping = this.followUpStrategy.getQuestionSemanticMapping();
    const conceptName = mapping[questionType];

    if (!conceptName) {
      return false; // –ï—Å–ª–∏ –Ω–µ—Ç –º–∞–ø–ø–∏–Ω–≥–∞, –≤–æ–ø—Ä–æ—Å –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
    }

    return this.followUpStrategy.hasConceptMentioned(conceptName, responses);
  }

  printTestResult(result) {
    const status = result.passed ? '‚úÖ' : '‚ùå';
    console.log(`${status} ${result.name}`);
    console.log(`   ${result.reason}`);
    if (result.details) {
      console.log(`   üìù ${result.details}`);
    }
    if (result.aiResult) {
      console.log(`   ü§ñ AI: confidence=${result.aiResult.confidence}, reason="${result.aiResult.reason}"`);
    }
    console.log();
  }

  printSummary() {
    const passed = this.results.filter(r => r.passed).length;
    const total = this.results.length;
    const percentage = Math.round((passed / total) * 100);

    console.log('üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('‚ïê'.repeat(50));
    console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total} (${percentage}%)`);
    
    if (passed === total) {
      console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
      console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.');
      
      const failed = this.results.filter(r => !r.passed);
      console.log('\n–ù–µ –ø—Ä–æ—à–µ–¥—à–∏–µ —Ç–µ—Å—Ç—ã:');
      failed.forEach(f => {
        console.log(`- ${f.name}: ${f.reason}`);
      });
    }

    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ AI —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω (OPENAI_API_KEY –∏–ª–∏ ANTHROPIC_API_KEY)');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ai.enableSmartValidation = true');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  async runPerformanceTest() {
    console.log('\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    const startTime = Date.now();
    const testPromises = [];

    // –ó–∞–ø—É—Å–∫–∞–µ–º 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
    for (let i = 0; i < 5; i++) {
      const context = {
        responses: {
          moment_capture: `–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç ${i} —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏`,
          currentActivity: `–¢–µ—Å—Ç–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ${i}`
        },
        userId: `perf_test_${i}`,
        trainingDay: 2
      };

      const question = {
        text: `–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å ${i}?`,
        clarifies: 'test_type',
        category: 'test',
        priority: 'medium'
      };

      testPromises.push(
        this.followUpStrategy.getNextQuestion(context).catch(e => ({ error: e.message }))
      );
    }

    const results = await Promise.all(testPromises);
    const duration = Date.now() - startTime;
    
    console.log(`–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: ${duration}ms`);
    console.log(`–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∞–Ω–∞–ª–∏–∑: ${Math.round(duration / 5)}ms`);
    
    const errors = results.filter(r => r && r.error);
    if (errors.length > 0) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∏: ${errors.length}/5`);
    } else {
      console.log('‚úÖ –í—Å–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const test = new SemanticIntegrationTest();
  
  test.runAllTests()
    .then(() => test.runPerformanceTest())
    .then(() => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      process.exit(0);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      process.exit(1);
    });
}

module.exports = SemanticIntegrationTest;