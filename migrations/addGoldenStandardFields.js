const User = require('../models/User');
const mongoose = require('mongoose');

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –∑–æ–ª–æ—Ç–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
 */
class GoldenStandardMigration {
  constructor() {
    this.migrationName = 'addGoldenStandardFields';
    this.version = '1.0.0';
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  async migrate() {
    console.log(`üîÑ Starting migration: ${this.migrationName}`);
    
    try {
      const stats = await this.addMissingFields();
      console.log(`‚úÖ Migration completed successfully:`, stats);
      return stats;
    } catch (error) {
      console.error(`‚ùå Migration failed:`, error);
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  async addMissingFields() {
    const stats = {
      totalUsers: 0,
      usersUpdated: 0,
      usersSkipped: 0,
      errors: 0
    };

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
    const usersToUpdate = await User.find({
      $or: [
        { trainingStartDate: { $exists: false } },
        { currentTrainingDay: { $exists: false } },
        { averageDataQuality: { $exists: false } },
        { qualityHistory: { $exists: false } },
        { phenomenaFrequencies: { $exists: false } },
        { commonPatterns: { $exists: false } },
        { preferences: { $exists: false } },
        { achievements: { $exists: false } }
      ]
    });

    stats.totalUsers = usersToUpdate.length;
    console.log(`Found ${stats.totalUsers} users to update`);

    for (const user of usersToUpdate) {
      try {
        await this.updateUserFields(user);
        stats.usersUpdated++;
        
        if (stats.usersUpdated % 100 === 0) {
          console.log(`Progress: ${stats.usersUpdated}/${stats.totalUsers} users updated`);
        }
      } catch (error) {
        console.error(`Error updating user ${user.telegramId}:`, error);
        stats.errors++;
      }
    }

    stats.usersSkipped = stats.totalUsers - stats.usersUpdated - stats.errors;
    return stats;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async updateUserFields(user) {
    const updates = {};

    // –ü–æ–ª—è –æ–±—É—á–µ–Ω–∏—è
    if (!user.trainingStartDate) {
      updates.trainingStartDate = null;
    }
    
    if (!user.currentTrainingDay) {
      updates.currentTrainingDay = 0;
    }
    
    if (!user.trainingCompleted) {
      updates.trainingCompleted = false;
    }

    // –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    if (!user.averageDataQuality) {
      updates.averageDataQuality = 0;
    }
    
    if (!user.qualityHistory) {
      updates.qualityHistory = [];
    }

    // –ß–∞—Å—Ç–æ—Ç—ã —Ñ–µ–Ω–æ–º–µ–Ω–æ–≤
    if (!user.phenomenaFrequencies) {
      updates.phenomenaFrequencies = {
        innerSpeech: 0,
        innerSeeing: 0,
        unsymbolizedThinking: 0,
        feeling: 0,
        sensoryAwareness: 0
      };
    }

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user.commonPatterns) {
      updates.commonPatterns = {
        usesInnerSpeech: null,
        tendencyToGeneralize: 0,
        introspectiveAccuracy: 0,
        preferredResponseLength: 0,
        readingVoiceIllusion: null,
        emotionAsThought: null,
        sensoryDetailRichness: 0,
        momentCaptureAbility: 0,
        emptinessRecognition: 0
      };
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
    if (!user.preferences) {
      updates.preferences = {
        receiveQualityFeedback: true,
        showExamples: true,
        adaptiveQuestions: true,
        trainingReminders: true,
        useAIValidation: true
      };
    }

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if (!user.achievements) {
      updates.achievements = [];
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
    if (Object.keys(updates).length > 0) {
      await User.updateOne(
        { _id: user._id },
        { $set: updates }
      );
    }
  }

  /**
   * –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)
   */
  async rollback() {
    console.log(`üîÑ Rolling back migration: ${this.migrationName}`);
    
    try {
      const result = await User.updateMany(
        {},
        {
          $unset: {
            trainingStartDate: "",
            currentTrainingDay: "",
            trainingCompleted: "",
            averageDataQuality: "",
            qualityHistory: "",
            phenomenaFrequencies: "",
            commonPatterns: "",
            preferences: "",
            achievements: ""
          }
        }
      );

      console.log(`‚úÖ Rollback completed. ${result.modifiedCount} users updated`);
      return result;
    } catch (error) {
      console.error(`‚ùå Rollback failed:`, error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
   */
  async checkMigrationStatus() {
    const stats = {
      totalUsers: 0,
      migratedUsers: 0,
      pendingUsers: 0
    };

    stats.totalUsers = await User.countDocuments();
    
    stats.migratedUsers = await User.countDocuments({
      trainingStartDate: { $exists: true },
      currentTrainingDay: { $exists: true },
      averageDataQuality: { $exists: true },
      qualityHistory: { $exists: true },
      phenomenaFrequencies: { $exists: true },
      commonPatterns: { $exists: true },
      preferences: { $exists: true },
      achievements: { $exists: true }
    });

    stats.pendingUsers = stats.totalUsers - stats.migratedUsers;

    return stats;
  }
}

module.exports = GoldenStandardMigration;

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const mongoose = require('mongoose');
  
  async function runMigration() {
    try {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/mse-bot');
      console.log('Connected to MongoDB');

      const migration = new GoldenStandardMigration();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const statusBefore = await migration.checkMigrationStatus();
      console.log('Migration status before:', statusBefore);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
      const result = await migration.migrate();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const statusAfter = await migration.checkMigrationStatus();
      console.log('Migration status after:', statusAfter);
      
      await mongoose.disconnect();
      process.exit(0);
    } catch (error) {
      console.error('Migration script failed:', error);
      await mongoose.disconnect();
      process.exit(1);
    }
  }

  runMigration();
}