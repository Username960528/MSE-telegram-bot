const config = require('../config/hurlburt');

/**
 * –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 
 * –ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–ø—ã—Ç–∞
 * –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
 */
class PatternDetector {
  constructor() {
    this.config = config;
    this.phenomena = config.phenomena;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   * @param {Array} responses - –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Object} - –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  analyzeUserPatterns(responses) {
    const analysis = {
      totalResponses: responses.length,
      phenomenaFrequency: {},
      dominantPhenomena: null,
      consistencyScore: 0,
      personalInsights: [],
      recommendations: [],
      unusualPatterns: [],
      progressTrend: null
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É —Ñ–µ–Ω–æ–º–µ–Ω–æ–≤
    this.analyzePhenomenaFrequency(responses, analysis);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
    this.analyzeConsistency(responses, analysis);
    
    // –í—ã—è–≤–ª—è–µ–º –Ω–µ–æ–±—ã—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    this.detectUnusualPatterns(responses, analysis);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    this.analyzeProgress(responses, analysis);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    this.generatePersonalInsights(analysis);
    
    return analysis;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã —Ñ–µ–Ω–æ–º–µ–Ω–æ–≤ –•–µ—Ä–ª–±–µ—Ä—Ç–∞
   */
  analyzePhenomenaFrequency(responses, analysis) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á—ë—Ç—á–∏–∫–∏
    Object.keys(this.phenomena).forEach(key => {
      analysis.phenomenaFrequency[key] = 0;
    });

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–µ–Ω–æ–º–µ–Ω—ã
    responses.forEach(response => {
      if (response.metadata?.phenomenaDetected) {
        response.metadata.phenomenaDetected.forEach(phenomenon => {
          if (analysis.phenomenaFrequency[phenomenon.type] !== undefined) {
            analysis.phenomenaFrequency[phenomenon.type]++;
          }
        });
      }
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ñ–µ–Ω–æ–º–µ–Ω
    let maxCount = 0;
    Object.entries(analysis.phenomenaFrequency).forEach(([key, count]) => {
      if (count > maxCount) {
        maxCount = count;
        analysis.dominantPhenomena = key;
      }
    });

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –Ω–æ—Ä–º–æ–π
    Object.entries(analysis.phenomenaFrequency).forEach(([key, count]) => {
      const percentage = responses.length > 0 ? count / responses.length : 0;
      const expectedPercentage = this.phenomena[key]?.frequency || 0;
      
      if (Math.abs(percentage - expectedPercentage) > 0.15) {
        analysis.unusualPatterns.push({
          type: 'frequency_deviation',
          phenomenon: key,
          observed: percentage,
          expected: expectedPercentage,
          message: percentage > expectedPercentage ? 
            `–í—ã —Å–æ–æ–±—â–∞–µ—Ç–µ –æ ${this.phenomena[key].name} —á–∞—â–µ –æ–±—ã—á–Ω–æ–≥–æ` :
            `–í—ã —Ä–µ–¥–∫–æ —Å–æ–æ–±—â–∞–µ—Ç–µ –æ ${this.phenomena[key].name}`
        });
      }
    });
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
   */
  analyzeConsistency(responses, analysis) {
    if (responses.length < 5) {
      analysis.consistencyScore = 0;
      return;
    }

    let consistentPairs = 0;
    let totalPairs = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∏ —Å—Ç—Ä–µ—Å—Å–æ–º
    responses.forEach(response => {
      const mood = response.responses?.mood;
      const stress = response.responses?.stress;
      const energy = response.responses?.energy;

      if (mood && stress) {
        totalPairs++;
        // –í—ã—Å–æ–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ = –Ω–∏–∑–∫–∏–π —Å—Ç—Ä–µ—Å—Å
        if ((mood >= 6 && stress <= 3) || (mood <= 3 && stress >= 5)) {
          consistentPairs++;
        }
      }

      if (energy && stress) {
        totalPairs++;
        // –í—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è + –≤—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å = –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ —Ä–µ–∂–µ
        if ((energy >= 6 && stress <= 5) || (energy <= 3 && stress <= 5)) {
          consistentPairs++;
        }
      }
    });

    analysis.consistencyScore = totalPairs > 0 ? 
      Math.round((consistentPairs / totalPairs) * 100) : 0;

    if (analysis.consistencyScore < 60) {
      analysis.unusualPatterns.push({
        type: 'low_consistency',
        message: '–í–∞—à–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ–æ–±—ã—á–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è'
      });
    }
  }

  /**
   * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  detectUnusualPatterns(responses, analysis) {
    // –ü–∞—Ç—Ç–µ—Ä–Ω: –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
    const moodValues = responses.map(r => r.responses?.mood).filter(Boolean);
    if (moodValues.length > 10) {
      const uniqueMoods = new Set(moodValues);
      if (uniqueMoods.size <= 2) {
        analysis.unusualPatterns.push({
          type: 'low_variability',
          field: 'mood',
          message: '–í—ã —á–∞—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'
        });
      }
    }

    // –ü–∞—Ç—Ç–µ—Ä–Ω: –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
    const textLengths = responses
      .map(r => r.responses?.currentThoughts?.length || 0)
      .filter(len => len > 0);
    
    if (textLengths.length > 5) {
      const avgLength = textLengths.reduce((a, b) => a + b, 0) / textLengths.length;
      if (avgLength < 20) {
        analysis.unusualPatterns.push({
          type: 'brief_responses',
          message: '–í–∞—à–∏ –æ–ø–∏—Å–∞–Ω–∏—è –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π'
        });
      }
    }

    // –ü–∞—Ç—Ç–µ—Ä–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
    let sensoryCount = 0;
    responses.forEach(response => {
      const text = response.responses?.currentThoughts || '';
      if (/—Ü–≤–µ—Ç|–∑–≤—É–∫|–∑–∞–ø–∞—Ö|–≤–∫—É—Å|—Ö–æ–ª–æ–¥|—Ç–µ–ø–ª–æ|–±–æ–ª—å/.test(text.toLowerCase())) {
        sensoryCount++;
      }
    });

    if (responses.length > 10 && sensoryCount / responses.length < 0.1) {
      analysis.unusualPatterns.push({
        type: 'low_sensory',
        message: '–í –≤–∞—à–∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è—Ö –º–∞–ª–æ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π'
      });
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  analyzeProgress(responses, analysis) {
    if (responses.length < 10) {
      analysis.progressTrend = 'insufficient_data';
      return;
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–≤—ã—Ö –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    const sortedResponses = responses.sort((a, b) => 
      new Date(a.timestamp) - new Date(b.timestamp)
    );

    const firstThird = sortedResponses.slice(0, Math.floor(responses.length / 3));
    const lastThird = sortedResponses.slice(-Math.floor(responses.length / 3));

    const avgQualityFirst = this.calculateAverageQuality(firstThird);
    const avgQualityLast = this.calculateAverageQuality(lastThird);

    const improvement = avgQualityLast - avgQualityFirst;

    if (improvement > 20) {
      analysis.progressTrend = 'significant_improvement';
      analysis.personalInsights.push('üéØ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ö–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏–ª–æ—Å—å');
    } else if (improvement > 10) {
      analysis.progressTrend = 'moderate_improvement';
      analysis.personalInsights.push('üìà –í—ã –¥–µ–ª–∞–µ—Ç–µ —É—Å–ø–µ—Ö–∏ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–∞–º–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è');
    } else if (improvement < -10) {
      analysis.progressTrend = 'declining';
      analysis.recommendations.push('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–∞–∑–æ–≤—ã–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –º–æ–º–µ–Ω—Ç–∞');
    } else {
      analysis.progressTrend = 'stable';
    }
  }

  /**
   * –†–∞—Å—á—ë—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
   */
  calculateAverageQuality(responses) {
    if (responses.length === 0) return 0;
    
    const qualities = responses
      .map(r => r.metadata?.dataQualityScore || 50)
      .filter(q => q > 0);
    
    return qualities.length > 0 ? 
      qualities.reduce((a, b) => a + b, 0) / qualities.length : 50;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
   */
  generatePersonalInsights(analysis) {
    // –ò–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–≥–æ —Ñ–µ–Ω–æ–º–µ–Ω–∞
    if (analysis.dominantPhenomena) {
      const phenomenon = this.phenomena[analysis.dominantPhenomena];
      if (phenomenon) {
        analysis.personalInsights.push(
          `üí≠ –£ –≤–∞—Å —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è ${phenomenon.name.toLowerCase()}`
        );
      }
    }

    // –ò–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    analysis.unusualPatterns.forEach(pattern => {
      if (pattern.type === 'frequency_deviation' && pattern.observed > pattern.expected) {
        analysis.recommendations.push(
          `üîç –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –∑–∞ ${
            this.phenomena[pattern.phenomenon].name.toLowerCase()
          } —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ`
        );
      }
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    if (analysis.consistencyScore < 70) {
      analysis.recommendations.push(
        'üéØ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Ç–æ—á–Ω–µ–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É —ç–º–æ—Ü–∏—è–º–∏ –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º'
      );
    }

    // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (analysis.totalResponses > 50 && analysis.progressTrend === 'significant_improvement') {
      analysis.personalInsights.push(
        'üèÜ –í—ã –≤—Ö–æ–¥–∏—Ç–µ –≤ —Ç–æ–ø –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–Ω—ã –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π'
      );
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–ø—ã—Ç–∞
   */
  detectExperienceType(analysis) {
    const types = {
      verbal: {
        name: '–í–µ—Ä–±–∞–ª—å–Ω—ã–π —Ç–∏–ø',
        description: '–ß–∞—Å—Ç–æ –¥—É–º–∞–µ—Ç–µ —Å–ª–æ–≤–∞–º–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ—á—å—é',
        markers: ['innerSpeech']
      },
      visual: {
        name: '–í–∏–∑—É–∞–ª—å–Ω—ã–π —Ç–∏–ø',
        description: '–ú—ã—Å–ª–∏—Ç–µ –æ–±—Ä–∞–∑–∞–º–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏',
        markers: ['innerSeeing']
      },
      abstract: {
        name: '–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π —Ç–∏–ø',
        description: '–ß–∞—Å—Ç–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –Ω–µ—Å–∏–º–≤–æ–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ',
        markers: ['unsymbolizedThinking']
      },
      sensory: {
        name: '–°–µ–Ω—Å–æ—Ä–Ω—ã–π —Ç–∏–ø',
        description: '–•–æ—Ä–æ—à–æ –æ—Å–æ–∑–Ω–∞—ë—Ç–µ —Ç–µ–ª–µ—Å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è',
        markers: ['sensoryAwareness']
      },
      emotional: {
        name: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø',
        description: '–ë–æ–≥–∞—Ç—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä',
        markers: ['feeling']
      }
    };

    let maxScore = 0;
    let detectedType = null;

    Object.entries(types).forEach(([key, type]) => {
      let score = 0;
      type.markers.forEach(marker => {
        score += analysis.phenomenaFrequency[marker] || 0;
      });
      
      if (score > maxScore) {
        maxScore = score;
        detectedType = type;
      }
    });

    return detectedType;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
   */
  exportForResearch(analysis, userId) {
    return {
      userId: userId,
      timestamp: new Date().toISOString(),
      sampleSize: analysis.totalResponses,
      phenomenaDistribution: analysis.phenomenaFrequency,
      dominantPhenomenon: analysis.dominantPhenomena,
      consistencyScore: analysis.consistencyScore,
      unusualPatterns: analysis.unusualPatterns.map(p => ({
        type: p.type,
        details: p.message
      })),
      progressTrend: analysis.progressTrend,
      experienceType: this.detectExperienceType(analysis)?.name || 'undefined'
    };
  }
}

module.exports = PatternDetector;