const Response = require('../models/Response');
const config = require('../config/hurlburt');

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
 */
class PatternFeedback {
  constructor() {
    this.config = config;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞
   * @param {String} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} currentResponse - –¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç
   * @returns {String} - –°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
   */
  async generateIterativeFeedback(userId, currentResponse) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      const recentResponses = await Response.find({ 
        userId,
        'metadata.isTraining': { $ne: true } // –ò—Å–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      })
      .sort({ timestamp: -1 })
      .limit(10);

      if (recentResponses.length < 3) {
        return null; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      }

      const patterns = this.analyzePatterns(recentResponses, currentResponse);
      return this.formatFeedbackMessage(patterns);

    } catch (error) {
      console.error('Error generating pattern feedback:', error);
      return null;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–∞—Ö
   */
  analyzePatterns(responses, currentResponse) {
    const patterns = {
      stress: this.analyzeStressPatterns(responses),
      mood: this.analyzeMoodPatterns(responses),
      flow: this.analyzeFlowPatterns(responses),
      activity: this.analyzeActivityPatterns(responses),
      phenomena: this.analyzePhenomenaPatterns(responses),
      consistency: this.analyzeConsistency(responses)
    };

    return patterns;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å—Ç—Ä–µ—Å—Å–∞
   */
  analyzeStressPatterns(responses) {
    const stressLevels = responses.map(r => r.responses?.stress).filter(Boolean);
    if (stressLevels.length < 3) return null;

    const avgStress = stressLevels.reduce((a, b) => a + b, 0) / stressLevels.length;
    const highStressCount = stressLevels.filter(s => s >= 6).length;
    const highStressPercentage = (highStressCount / stressLevels.length) * 100;

    // –ò—â–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    const highStressActivities = responses
      .filter(r => r.responses?.stress >= 6 && r.responses?.currentActivity)
      .map(r => r.responses.currentActivity.toLowerCase());

    const activityCounts = {};
    highStressActivities.forEach(activity => {
      const keywords = this.extractKeywords(activity);
      keywords.forEach(keyword => {
        activityCounts[keyword] = (activityCounts[keyword] || 0) + 1;
      });
    });

    const topStressActivity = Object.entries(activityCounts)
      .sort(([,a], [,b]) => b - a)[0];

    return {
      avgLevel: Math.round(avgStress * 10) / 10,
      highStressPercentage: Math.round(highStressPercentage),
      topStressActivity: topStressActivity ? topStressActivity[0] : null,
      trend: this.calculateTrend(stressLevels)
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
   */
  analyzeMoodPatterns(responses) {
    const moodLevels = responses.map(r => r.responses?.mood).filter(Boolean);
    if (moodLevels.length < 3) return null;

    const avgMood = moodLevels.reduce((a, b) => a + b, 0) / moodLevels.length;
    const variability = this.calculateVariability(moodLevels);

    return {
      avgLevel: Math.round(avgMood * 10) / 10,
      variability: variability,
      trend: this.calculateTrend(moodLevels),
      stable: variability < 1.5
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ Flow —Å–æ—Å—Ç–æ—è–Ω–∏–π
   */
  analyzeFlowPatterns(responses) {
    const flowStates = responses
      .map(r => r.metadata?.flowState)
      .filter(Boolean);

    if (flowStates.length < 3) return null;

    const flowCount = flowStates.filter(s => s === 'flow').length;
    const flowPercentage = (flowCount / flowStates.length) * 100;

    const stateDistribution = {};
    flowStates.forEach(state => {
      stateDistribution[state] = (stateDistribution[state] || 0) + 1;
    });

    const dominantState = Object.entries(stateDistribution)
      .sort(([,a], [,b]) => b - a)[0];

    return {
      flowPercentage: Math.round(flowPercentage),
      dominantState: dominantState[0],
      distribution: stateDistribution
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  analyzeActivityPatterns(responses) {
    const activities = responses
      .map(r => r.responses?.currentActivity)
      .filter(Boolean);

    if (activities.length < 3) return null;

    const keywordCounts = {};
    activities.forEach(activity => {
      const keywords = this.extractKeywords(activity.toLowerCase());
      keywords.forEach(keyword => {
        keywordCounts[keyword] = (keywordCounts[keyword] || 0) + 1;
      });
    });

    const topActivities = Object.entries(keywordCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3);

    return {
      topActivities: topActivities.map(([word, count]) => ({ word, count })),
      variety: Object.keys(keywordCounts).length
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ñ–µ–Ω–æ–º–µ–Ω–æ–≤
   */
  analyzePhenomenaPatterns(responses) {
    const allPhenomena = responses
      .flatMap(r => r.metadata?.phenomenaDetected || [])
      .map(p => p.type);

    if (allPhenomena.length < 2) return null;

    const phenomenaCounts = {};
    allPhenomena.forEach(type => {
      phenomenaCounts[type] = (phenomenaCounts[type] || 0) + 1;
    });

    const dominantPhenomenon = Object.entries(phenomenaCounts)
      .sort(([,a], [,b]) => b - a)[0];

    return {
      dominantPhenomenon: dominantPhenomenon ? dominantPhenomenon[0] : null,
      variety: Object.keys(phenomenaCounts).length,
      distribution: phenomenaCounts
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
   */
  analyzeConsistency(responses) {
    let consistentPairs = 0;
    let totalPairs = 0;

    responses.forEach(r => {
      const mood = r.responses?.mood;
      const stress = r.responses?.stress;
      const energy = r.responses?.energy;

      if (mood && stress) {
        totalPairs++;
        // –û–∂–∏–¥–∞–µ–º: –≤—ã—Å–æ–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ = –Ω–∏–∑–∫–∏–π —Å—Ç—Ä–µ—Å—Å
        if ((mood >= 6 && stress <= 3) || (mood <= 3 && stress >= 5) || 
            (mood >= 4 && mood <= 5 && stress >= 3 && stress <= 5)) {
          consistentPairs++;
        }
      }
    });

    return {
      consistencyScore: totalPairs > 0 ? Math.round((consistentPairs / totalPairs) * 100) : 0,
      totalComparisons: totalPairs
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   */
  formatFeedbackMessage(patterns) {
    const messages = [];

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å—Ç—Ä–µ—Å—Å–∞
    if (patterns.stress && patterns.stress.highStressPercentage >= 50) {
      messages.push(`üîç –ü–∞—Ç—Ç–µ—Ä–Ω: –í—ã —á–∞—Å—Ç–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –≤—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å (${patterns.stress.highStressPercentage}% –≤—Ä–µ–º–µ–Ω–∏)`);
      
      if (patterns.stress.topStressActivity) {
        messages.push(`üìã –≠—Ç–æ —á–∞—Å—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏: "${patterns.stress.topStressActivity}"`);
      }
    }

    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    if (patterns.mood) {
      if (patterns.mood.stable) {
        messages.push(`üòå –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–≤–æ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ (—Å—Ä–µ–¥–Ω–µ–µ: ${patterns.mood.avgLevel})`);
      } else {
        messages.push(`üé≠ –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è (—Å—Ä–µ–¥–Ω–µ–µ: ${patterns.mood.avgLevel})`);
      }
    }

    // Flow –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (patterns.flow && patterns.flow.flowPercentage > 0) {
      if (patterns.flow.flowPercentage >= 30) {
        messages.push(`üåä –û—Ç–ª–∏—á–Ω–æ! –í—ã —á–∞—Å—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–æ—Ç–æ–∫–µ (${patterns.flow.flowPercentage}%)`);
      } else {
        messages.push(`‚ö° –í—ã –∏–Ω–æ–≥–¥–∞ –≤—Ö–æ–¥–∏—Ç–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ (${patterns.flow.flowPercentage}%)`);
      }
    }

    // –§–µ–Ω–æ–º–µ–Ω—ã —Å–æ–∑–Ω–∞–Ω–∏—è
    if (patterns.phenomena && patterns.phenomena.dominantPhenomenon) {
      const phenomenonName = this.config.phenomena[patterns.phenomena.dominantPhenomenon]?.name;
      if (phenomenonName) {
        messages.push(`üí≠ –£ –≤–∞—Å —á–∞—Å—Ç–æ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è: ${phenomenonName.toLowerCase()}`);
      }
    }

    // –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    if (patterns.consistency && patterns.consistency.consistencyScore < 60) {
      messages.push(`üéØ –°–æ–≤–µ—Ç: –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–≤—è–∑—å –º–µ–∂–¥—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º –∏ —Å—Ç—Ä–µ—Å—Å–æ–º`);
    }

    if (messages.length === 0) {
      return null;
    }

    return `\n\nüîç –í–∞—à–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:\n${messages.join('\n')}\n\n‚ùì –≠—Ç–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç?`;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  extractKeywords(text) {
    const stopWords = ['–≤', '–Ω–∞', '—Å', '–∏', '–∞', '–Ω–æ', '–∏–ª–∏', '–¥–ª—è', '–æ—Ç', '–ø–æ', '–∑–∞', '–∏–∑'];
    return text
      .split(/[\s,.-]+/)
      .filter(word => word.length > 2 && !stopWords.includes(word))
      .slice(0, 3); // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
  }

  calculateTrend(values) {
    if (values.length < 3) return 'unknown';
    
    const recent = values.slice(0, Math.ceil(values.length / 2));
    const older = values.slice(Math.ceil(values.length / 2));
    
    const recentAvg = recent.reduce((a, b) => a + b, 0) / recent.length;
    const olderAvg = older.reduce((a, b) => a + b, 0) / older.length;
    
    const diff = recentAvg - olderAvg;
    
    if (Math.abs(diff) < 0.5) return 'stable';
    return diff > 0 ? 'increasing' : 'decreasing';
  }

  calculateVariability(values) {
    const avg = values.reduce((a, b) => a + b, 0) / values.length;
    const variance = values.reduce((sum, val) => sum + Math.pow(val - avg, 2), 0) / values.length;
    return Math.sqrt(variance);
  }
}

module.exports = PatternFeedback;