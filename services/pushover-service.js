const pushover = require('pushover-notifications');

class PushoverService {
    constructor() {
        this.appToken = process.env.PUSHOVER_APP_TOKEN;
        if (!this.appToken) {
            console.warn('PUSHOVER_APP_TOKEN not set. Pushover notifications will be disabled.');
        }
    }

    /**
     * Send Pushover notification to user's watch/devices
     */
    async sendNotification(user, message, options = {}) {
        // Check if Pushover is enabled for this user
        if (!this.isEnabled(user)) {
            return { success: false, reason: 'pushover_disabled' };
        }

        try {
            const client = new pushover({
                user: user.settings.pushover.userKey,
                token: this.appToken
            });

            const notification = {
                message: message,
                title: options.title || 'üîî –í—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞',
                priority: user.settings.pushover.priority,
                sound: user.settings.pushover.sound,
                retry: options.retry || 30, // Repeat every 30 seconds
                expire: options.expire || 300, // Stop after 5 minutes
                url: options.url,
                url_title: options.urlTitle
            };

            // For high priority notifications, ensure they get through
            if (user.settings.pushover.priority === 2) {
                notification.retry = 30;
                notification.expire = 600; // 10 minutes for emergency notifications
            }

            const result = await new Promise((resolve, reject) => {
                client.send(notification, (err, result) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(result);
                    }
                });
            });

            console.log(`Pushover notification sent to ${user.getFullName()}: ${result.status}`);
            return { 
                success: true, 
                result,
                receipt: result.receipt // For tracking emergency notifications
            };

        } catch (error) {
            console.error(`Failed to send Pushover notification to ${user.getFullName()}:`, error);
            return { 
                success: false, 
                error: error.message,
                reason: 'send_failed'
            };
        }
    }

    /**
     * Send survey notification specifically formatted for watches
     */
    async sendSurveyNotification(user, responseId, options = {}) {
        const message = '–í—Ä–µ–º—è –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ–ø—Ä–æ—Å–∞! –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2-3 –º–∏–Ω—É—Ç—ã. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.';
        
        const notificationOptions = {
            title: 'üîî MSE –û–ø—Ä–æ—Å',
            url: `https://t.me/${process.env.BOT_USERNAME}`,
            urlTitle: '–û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞',
            ...options
        };

        return await this.sendNotification(user, message, notificationOptions);
    }

    /**
     * Send escalation notification with higher priority
     */
    async sendEscalationNotification(user, escalationMessage, level, responseId) {
        const message = `${escalationMessage}\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2-3 –º–∏–Ω—É—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.`;
        
        // Increase priority for escalations
        const originalPriority = user.settings.pushover.priority;
        const escalationPriority = Math.min(originalPriority + 1, 2);

        const options = {
            title: `üö® –°—Ä–æ—á–Ω–æ: –û–ø—Ä–æ—Å (—É—Ä–æ–≤–µ–Ω—å ${level})`,
            priority: escalationPriority,
            retry: 15, // More frequent for escalations
            expire: 900, // 15 minutes
            url: `https://t.me/${process.env.BOT_USERNAME}`,
            urlTitle: '–û—Ç–≤–µ—Ç–∏—Ç—å —Å–µ–π—á–∞—Å'
        };

        return await this.sendNotification(user, message, options);
    }

    /**
     * Test Pushover connection with user's token
     */
    async testConnection(userKey) {
        if (!this.appToken) {
            return { success: false, error: 'App token not configured' };
        }

        try {
            const client = new pushover({
                user: userKey,
                token: this.appToken
            });

            const result = await new Promise((resolve, reject) => {
                client.send({
                    message: '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Pushover —É—Å–ø–µ—à–µ–Ω! üéâ',
                    title: 'MSE Bot - –¢–µ—Å—Ç',
                    priority: 0
                }, (err, result) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(result);
                    }
                });
            });

            return { success: true, result };

        } catch (error) {
            return { 
                success: false, 
                error: error.message 
            };
        }
    }

    /**
     * Check if Pushover is properly configured and enabled for user
     */
    isEnabled(user) {
        return this.appToken && 
               user.settings.pushover.enabled && 
               user.settings.pushover.userKey;
    }

    /**
     * Get Pushover setup instructions for user
     */
    getSetupInstructions() {
        return `üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —á–∞—Å—ã —á–µ—Ä–µ–∑ Pushover:

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Pushover –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –ø–æ–ª—É—á–∏—Ç–µ User Key
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–∏ —á–∞—Å—ã (Garmin/Apple Watch/Wear OS)
4. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /pushover_setup [–≤–∞—à_user_key]

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –ø—Ä—è–º–æ –Ω–∞ —á–∞—Å—ã
‚úÖ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –ø—Ä–æ–±–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ DND
‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∑–≤—É–∫–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏—è
‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ

–°—Ç–æ–∏–º–æ—Å—Ç—å: ~ –∑–∞ iOS/Android`;
    }

    /**
     * Validate Pushover user key format
     */
    validateUserKey(userKey) {
        // Pushover user keys are 30 characters long, alphanumeric
        const keyRegex = /^[a-zA-Z0-9]{30}$/;
        return keyRegex.test(userKey);
    }

    /**
     * Get available sounds for Pushover notifications
     */
    getAvailableSounds() {
        return [
            'pushover', 'bike', 'bugle', 'cashregister', 'classical', 
            'cosmic', 'falling', 'gamelan', 'incoming', 'intermission',
            'magic', 'mechanical', 'pianobar', 'siren', 'spacealarm',
            'tugboat', 'alien', 'climb', 'persistent', 'echo', 'updown', 'none'
        ];
    }

    /**
     * Get priority levels with descriptions
     */
    getPriorityLevels() {
        return {
            '-2': '–¢–∏—Ö–∏–µ (–±–µ–∑ –∑–≤—É–∫–∞)',
            '-1': '–û–±—ã—á–Ω—ã–µ (–±–µ–∑ –∑–≤—É–∫–∞ –µ—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –±–µ–∑–∑–≤—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ)',
            '0': '–û–±—ã—á–Ω—ã–µ (—Å–æ –∑–≤—É–∫–æ–º)',
            '1': '–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ø—Ä–æ–±–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ DND)',
            '2': '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ (—Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)'
        };
    }
}

module.exports = PushoverService;