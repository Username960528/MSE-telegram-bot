const User = require('../models/User');
const Response = require('../models/Response');

class GamificationService {
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
  static async processResponse(user, response) {
    const achievements = [];
    let levelUp = false;
    
    // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ –æ—Ç–≤–µ—Ç
    let experienceGained = 10;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å—Ç—Ä–∏–∫
    const dailyStreak = user.updateStreak('daily');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
    const isHighQuality = response.metadata?.dataQualityScore >= 70;
    if (isHighQuality) {
      experienceGained += 15;
      const qualityStreak = user.updateStreak('quality');
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
      if (qualityStreak === 10) {
        achievements.push(await this.unlockAchievement(user, 'quality_master', 
          'üéØ –ú–∞—Å—Ç–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞: 10 –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–¥—Ä—è–¥!'));
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Flow —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const isFlowState = response.metadata?.flowState === 'flow';
    if (isFlowState) {
      experienceGained += 25;
      const flowStreak = user.updateStreak('flow');
      
      // –ü–µ—Ä–≤–æ–µ flow —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (!user.achievements.find(a => a.type === 'flow_finder')) {
        achievements.push(await this.unlockAchievement(user, 'flow_finder', 
          'üåä –ü–µ—Ä–≤—ã–π –ø–æ—Ç–æ–∫: –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Flow!'));
      }
      
      // –°—Ç—Ä–∏–∫ flow —Å–æ—Å—Ç–æ—è–Ω–∏–π
      if (flowStreak === 5) {
        achievements.push(await this.unlockAchievement(user, 'flow_seeker', 
          'üåä –ò—Å–∫–∞—Ç–µ–ª—å –ø–æ—Ç–æ–∫–∞: 5 Flow —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–¥—Ä—è–¥!'));
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const hour = response.timestamp.getHours();
    if (hour >= 22 || hour <= 5) {
      if (!user.achievements.find(a => a.type === 'night_owl')) {
        achievements.push(await this.unlockAchievement(user, 'night_owl', 
          'ü¶â –ù–æ—á–Ω–∞—è —Å–æ–≤–∞: –û—Ç–≤–µ—Ç –≤ –ø–æ–∑–¥–Ω–µ–µ –≤—Ä–µ–º—è!'));
      }
    }
    
    if (hour >= 5 && hour <= 7) {
      if (!user.achievements.find(a => a.type === 'early_bird')) {
        achievements.push(await this.unlockAchievement(user, 'early_bird', 
          'üê¶ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞: –û—Ç–≤–µ—Ç —Ä–∞–Ω–æ —É—Ç—Ä–æ–º!'));
      }
    }
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∏–∫–∞–º
    if (dailyStreak === 7) {
      achievements.push(await this.unlockAchievement(user, 'daily_warrior', 
        '‚öîÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–∏–Ω: 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!'));
    }
    
    if (dailyStreak === 30) {
      achievements.push(await this.unlockAchievement(user, 'weekly_champion', 
        'üëë –ß–µ–º–ø–∏–æ–Ω –Ω–µ–¥–µ–ª—å: 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!'));
    }
    
    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–≤–µ—Ç–æ–≤
    if (user.totalResponses === 100) {
      achievements.push(await this.unlockAchievement(user, 'century_club', 
        'üíØ –ö–ª—É–± —Å–æ—Ç–Ω–∏: 100 –æ—Ç–≤–µ—Ç–æ–≤!'));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    levelUp = user.addExperience(experienceGained);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    await this.updateRankingMetrics(user, response);
    
    await user.save();
    
    return {
      achievements,
      levelUp,
      experienceGained,
      streaks: {
        daily: dailyStreak,
        quality: user.streaks.current.quality.count,
        flow: user.streaks.current.flow.count
      },
      level: user.level.current,
      progress: user.getProgressToNextLevel()
    };
  }
  
  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  static async unlockAchievement(user, type, description) {
    const unlocked = user.unlockAchievement(type, description);
    if (unlocked) {
      return {
        type,
        description,
        rarity: user.getAchievementRarity(type),
        isNew: true
      };
    }
    return null;
  }
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
  static async updateRankingMetrics(user, response) {
    const now = new Date();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    user.generateAnonymousId();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const weekStart = new Date(now);
    weekStart.setDate(now.getDate() - now.getDay());
    weekStart.setHours(0, 0, 0, 0);
    
    if (!user.rankings.lastRankingUpdate || user.rankings.lastRankingUpdate < weekStart) {
      user.rankings.weeklyScore = 0;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∑–∞ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç
    let weeklyPoints = 10; // –±–∞–∑–æ–≤—ã–µ –æ—á–∫–∏
    if (response.metadata?.dataQualityScore >= 70) weeklyPoints += 15;
    if (response.metadata?.flowState === 'flow') weeklyPoints += 25;
    
    user.rankings.weeklyScore += weeklyPoints;
    user.rankings.lastRankingUpdate = now;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    const recentResponses = await Response.find({
      userId: user._id,
      timestamp: { $gte: new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000) }
    });
    
    if (recentResponses.length > 0) {
      const qualityScores = recentResponses
        .map(r => r.metadata?.dataQualityScore)
        .filter(score => score !== undefined);
      
      if (qualityScores.length > 0) {
        user.rankings.qualityAverage = qualityScores.reduce((a, b) => a + b, 0) / qualityScores.length;
      }
      
      const flowCount = recentResponses.filter(r => r.metadata?.flowState === 'flow').length;
      user.rankings.flowPercentage = (flowCount / recentResponses.length) * 100;
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–Ω–æ–Ω–∏–º–Ω–æ)
  static async getLeaderboards() {
    const weeklyTop = await User.find({
      'rankings.weeklyScore': { $gt: 0 }
    })
    .sort({ 'rankings.weeklyScore': -1 })
    .limit(10)
    .select('rankings level streaks');
    
    const qualityTop = await User.find({
      'rankings.qualityAverage': { $gt: 0 }
    })
    .sort({ 'rankings.qualityAverage': -1 })
    .limit(10)
    .select('rankings level');
    
    const flowTop = await User.find({
      'rankings.flowPercentage': { $gt: 0 }
    })
    .sort({ 'rankings.flowPercentage': -1 })
    .limit(10)
    .select('rankings level');
    
    const streakTop = await User.find({
      'streaks.current.daily.count': { $gt: 0 }
    })
    .sort({ 'streaks.current.daily.count': -1 })
    .limit(10)
    .select('rankings streaks level');
    
    return {
      weekly: this.formatLeaderboard(weeklyTop, 'weeklyScore'),
      quality: this.formatLeaderboard(qualityTop, 'qualityAverage'),
      flow: this.formatLeaderboard(flowTop, 'flowPercentage'),
      streaks: this.formatLeaderboard(streakTop, 'dailyStreak')
    };
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
  static formatLeaderboard(users, scoreType) {
    return users.map((user, index) => {
      let score;
      switch(scoreType) {
        case 'weeklyScore':
          score = user.rankings.weeklyScore;
          break;
        case 'qualityAverage':
          score = Math.round(user.rankings.qualityAverage);
          break;
        case 'flowPercentage':
          score = Math.round(user.rankings.flowPercentage);
          break;
        case 'dailyStreak':
          score = user.streaks.current.daily.count;
          break;
        default:
          score = 0;
      }
      
      return {
        position: index + 1,
        anonymousId: user.rankings.anonymousId,
        score,
        level: user.level.current,
        title: user.level.title
      };
    });
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
  static async getUserRanking(userId, type = 'weekly') {
    let sortField;
    switch(type) {
      case 'weekly':
        sortField = 'rankings.weeklyScore';
        break;
      case 'quality':
        sortField = 'rankings.qualityAverage';
        break;
      case 'flow':
        sortField = 'rankings.flowPercentage';
        break;
      case 'streak':
        sortField = 'streaks.current.daily.count';
        break;
      default:
        sortField = 'rankings.weeklyScore';
    }
    
    const userPosition = await User.countDocuments({
      [sortField]: { 
        $gt: await User.findById(userId).select(sortField).then(user => {
          switch(type) {
            case 'weekly':
              return user?.rankings?.weeklyScore || 0;
            case 'quality':
              return user?.rankings?.qualityAverage || 0;
            case 'flow':
              return user?.rankings?.flowPercentage || 0;
            case 'streak':
              return user?.streaks?.current?.daily?.count || 0;
            default:
              return 0;
          }
        })
      }
    });
    
    return userPosition + 1;
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  static generateMotivationalMessage(user, gamificationResult) {
    const messages = [];
    
    if (gamificationResult.levelUp) {
      messages.push(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å ${user.level.current} - ${user.level.title}!`);
    }
    
    if (gamificationResult.achievements.length > 0) {
      gamificationResult.achievements.forEach(achievement => {
        const rarityEmoji = {
          'common': 'ü•â',
          'rare': 'ü•à', 
          'epic': 'ü•á',
          'legendary': 'üëë'
        };
        messages.push(`${rarityEmoji[achievement.rarity]} ${achievement.description}`);
      });
    }
    
    // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∏–∫–æ–≤
    const dailyStreak = gamificationResult.streaks.daily;
    if (dailyStreak > 1 && dailyStreak < 7) {
      messages.push(`üî• –°—Ç—Ä–∏–∫ ${dailyStreak} –¥–Ω–µ–π! –î–æ –Ω–∞–≥—Ä–∞–¥—ã "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≤–æ–∏–Ω" –æ—Å—Ç–∞–ª–æ—Å—å ${7 - dailyStreak} –¥–Ω–µ–π`);
    }
    
    return messages;
  }
}

module.exports = GamificationService;