const Response = require('../models/Response');
const aiValidator = require('./ai-validator-service');
const goldenStandard = require('../validators/goldenStandard');

/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–ª–∞–±–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ü–µ–ª–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–∏:
 * - –î–µ—Ç–µ–∫—Ü–∏—è —Ç–æ–Ω–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—à–∏–±–æ–∫
 * - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è
 * - –í—ã—è–≤–ª–µ–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤—ã—Ö –∏–ª–ª—é–∑–∏–π
 * - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 */
class WeaknessAnalyzer {
  constructor() {
    this.aiService = aiValidator;
    
    // –¢–∏–ø—ã —Å–ª–∞–±–æ—Å—Ç–µ–π —Å –≤–µ—Å–∞–º–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏
    this.weaknessTypes = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
      'moment_capture': {
        name: '–ù–µ—Ç–æ—á–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –º–æ–º–µ–Ω—Ç–∞',
        weight: 1.0,
        category: 'fundamental',
        markers: ['retrospective', 'generalization', 'time_period'],
        interventions: ['moment_training', 'temporal_precision']
      },
      'specificity': {
        name: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç–∏', 
        weight: 0.9,
        category: 'precision',
        markers: ['abstract', 'generic', 'vague'],
        interventions: ['detail_training', 'concrete_examples']
      },
      'illusion_detection': {
        name: '–ù–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∞—Ç—å –∏–ª–ª—é–∑–∏–∏',
        weight: 1.0,
        category: 'fundamental', 
        markers: ['reading_voice_illusion', 'emotion_labeling', 'causal_thinking'],
        interventions: ['illusion_education', 'reality_testing']
      },
      
      // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã
      'sensory_detail': {
        name: '–°–ª–∞–±—ã–µ —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è',
        weight: 0.8,
        category: 'technical',
        markers: ['no_sensory', 'abstract_emotions'],
        interventions: ['sensory_training', 'body_awareness']
      },
      'consistency': {
        name: '–ù–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤',
        weight: 0.7,
        category: 'technical',
        markers: ['contradictions', 'mood_stress_mismatch'],
        interventions: ['consistency_training', 'self_monitoring']
      },
      'avoidance': {
        name: '–ò–∑–±–µ–≥–∞–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è',
        weight: 0.9,
        category: 'psychological',
        markers: ['empty_responses', 'dont_know', 'nothing_special'],
        interventions: ['engagement_training', 'curiosity_building']
      },
      
      // –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      'over_analysis': {
        name: '–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
        weight: 0.6,
        category: 'cognitive',
        markers: ['theoretical', 'causal_explanation', 'meta_thinking'],
        interventions: ['simplicity_training', 'direct_experience']
      },
      'emotional_labeling': {
        name: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —è—Ä–ª—ã–∫–∏',
        weight: 0.7,
        category: 'cognitive', 
        markers: ['emotion_words', 'mood_descriptions'],
        interventions: ['somatic_training', 'feeling_vs_emotion']
      },
      'time_confusion': {
        name: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—É—Ç–∞–Ω–∏—Ü–∞',
        weight: 0.8,
        category: 'temporal',
        markers: ['past_tense', 'duration_words', 'sequence_description'],
        interventions: ['temporal_training', 'snapshot_technique']
      }
    };
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è —Å–ª–∞–±–æ—Å—Ç–µ–π
    this.progressionPatterns = {
      'persistent': '–°–ª–∞–±–æ—Å—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö —Å–µ—Å—Å–∏—è—Ö',
      'increasing': '–°–ª–∞–±–æ—Å—Ç—å —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º', 
      'plateau': '–°–ª–∞–±–æ—Å—Ç—å –Ω–µ —É–ª—É—á—à–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è',
      'contextual': '–°–ª–∞–±–æ—Å—Ç—å –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞—Ö',
      'compensated': '–°–ª–∞–±–æ—Å—Ç—å –º–∞—Å–∫–∏—Ä—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏'
    };
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Å–ª–∞–±–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async analyzeUserWeaknesses(userId, depth = 'comprehensive') {
    try {
      console.log(`üîç Analyzing weaknesses for user ${userId} (${depth} mode)`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–æ–≤
      const responses = await this.getUserResponses(userId);
      if (responses.length === 0) {
        return this.createInitialWeaknessProfile();
      }

      // –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑
      const statisticalAnalysis = this.performStatisticalAnalysis(responses);
      const patternAnalysis = this.performPatternAnalysis(responses);
      const progressionAnalysis = this.analyzeProgression(responses);
      
      // –ò–ò-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
      let aiAnalysis = null;
      if (depth === 'comprehensive' && this.aiService.isConfigured) {
        aiAnalysis = await this.performAIWeaknessAnalysis(responses);
      }
      
      // –°–∏–Ω—Ç–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const synthesizedWeaknesses = this.synthesizeAnalysis(
        statisticalAnalysis, 
        patternAnalysis, 
        progressionAnalysis, 
        aiAnalysis
      );
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
      const prioritizedWeaknesses = this.prioritizeWeaknesses(synthesizedWeaknesses);
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–π
      const interventions = this.generateInterventions(prioritizedWeaknesses);
      
      const result = {
        userId,
        analysisDate: new Date(),
        analysisDepth: depth,
        primaryWeaknesses: prioritizedWeaknesses.slice(0, 3),
        allWeaknesses: prioritizedWeaknesses,
        progressionPatterns: progressionAnalysis.patterns,
        riskFactors: this.identifyRiskFactors(prioritizedWeaknesses),
        interventions,
        confidence: this.calculateConfidence(statisticalAnalysis, aiAnalysis),
        metadata: {
          totalResponses: responses.length,
          analysisVersion: '1.0',
          aiUsed: !!aiAnalysis
        }
      };
      
      console.log(`‚úÖ Weakness analysis completed: ${prioritizedWeaknesses.length} issues identified`);
      return result;
      
    } catch (error) {
      console.error('Error analyzing user weaknesses:', error);
      return this.createFallbackAnalysis(userId);
    }
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
   */
  performStatisticalAnalysis(responses) {
    const analysis = {
      qualityMetrics: this.analyzeQualityMetrics(responses),
      responsePatterns: this.analyzeResponsePatterns(responses),
      validationIssues: this.analyzeValidationIssues(responses),
      phenomenaProfile: this.analyzePhenomenaProfile(responses)
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–∞–±–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const detectedWeaknesses = [];

    // –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–º–µ–Ω—Ç–∞
    if (analysis.qualityMetrics.avgMomentFocus < 60) {
      detectedWeaknesses.push({
        type: 'moment_capture',
        severity: this.calculateSeverity(analysis.qualityMetrics.avgMomentFocus, 60),
        evidence: `–°—Ä–µ–¥–Ω–∏–π —Ñ–æ–∫—É—Å –Ω–∞ –º–æ–º–µ–Ω—Ç–µ: ${analysis.qualityMetrics.avgMomentFocus}%`,
        frequency: analysis.responsePatterns.momentIssueFrequency
      });
    }

    // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç–∏
    if (analysis.qualityMetrics.avgSpecificity < 65) {
      detectedWeaknesses.push({
        type: 'specificity',
        severity: this.calculateSeverity(analysis.qualityMetrics.avgSpecificity, 65),
        evidence: `–°—Ä–µ–¥–Ω—è—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å: ${analysis.qualityMetrics.avgSpecificity}%`,
        frequency: analysis.responsePatterns.specificityIssues
      });
    }

    // –°–ª–∞–±—ã–µ —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    if (analysis.qualityMetrics.avgSensoryDetail < 50) {
      detectedWeaknesses.push({
        type: 'sensory_detail',
        severity: this.calculateSeverity(analysis.qualityMetrics.avgSensoryDetail, 50),
        evidence: `–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π: ${analysis.qualityMetrics.avgSensoryDetail}%`,
        frequency: analysis.responsePatterns.sensoryDeficit
      });
    }

    // –ù–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (analysis.qualityMetrics.consistencyScore < 0.7) {
      detectedWeaknesses.push({
        type: 'consistency',
        severity: this.calculateSeverity(analysis.qualityMetrics.consistencyScore * 100, 70),
        evidence: `–û—Ü–µ–Ω–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${Math.round(analysis.qualityMetrics.consistencyScore * 100)}%`,
        frequency: analysis.responsePatterns.inconsistencyCount
      });
    }

    return {
      weaknesses: detectedWeaknesses,
      metrics: analysis,
      confidence: 0.8
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç
   */
  performPatternAnalysis(responses) {
    const detectedWeaknesses = [];
    const patternCounts = {};

    responses.forEach(response => {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∑–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      if (response.metadata?.goldenStandard?.matchedPatterns?.negative) {
        response.metadata.goldenStandard.matchedPatterns.negative.forEach(pattern => {
          patternCounts[pattern.name] = (patternCounts[pattern.name] || 0) + 1;
        });
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const text = response.responses?.currentThoughts || '';
      if (text) {
        this.detectTextPatterns(text).forEach(pattern => {
          patternCounts[pattern] = (patternCounts[pattern] || 0) + 1;
        });
      }
    });

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–∞–±–æ—Å—Ç–∏
    Object.entries(patternCounts).forEach(([pattern, count]) => {
      const frequency = count / responses.length;
      if (frequency > 0.3) { // –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ >30% –æ—Ç–≤–µ—Ç–æ–≤
        const weakness = this.mapPatternToWeakness(pattern);
        if (weakness) {
          detectedWeaknesses.push({
            type: weakness,
            severity: Math.min(1.0, frequency * 1.5),
            evidence: `–ü–∞—Ç—Ç–µ—Ä–Ω "${pattern}" –≤ ${count} –∏–∑ ${responses.length} –æ—Ç–≤–µ—Ç–æ–≤`,
            frequency: frequency,
            patternName: pattern
          });
        }
      }
    });

    return {
      weaknesses: detectedWeaknesses,
      patterns: patternCounts,
      confidence: 0.7
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —Å–ª–∞–±–æ—Å—Ç–µ–π –≤–æ –≤—Ä–µ–º–µ–Ω–∏
   */
  analyzeProgression(responses) {
    const sortedResponses = responses.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
    const progressionPatterns = {};
    const weeklyAnalysis = [];

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
    const weeks = this.groupResponsesByWeek(sortedResponses);
    
    weeks.forEach((weekResponses, weekIndex) => {
      const weekAnalysis = this.analyzeWeekWeaknesses(weekResponses);
      weeklyAnalysis.push({
        week: weekIndex + 1,
        weaknesses: weekAnalysis,
        avgQuality: this.calculateWeekAvgQuality(weekResponses)
      });
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
    Object.keys(this.weaknessTypes).forEach(weaknessType => {
      const weeklyScores = weeklyAnalysis.map(w => 
        w.weaknesses.find(weak => weak.type === weaknessType)?.severity || 0
      );
      
      progressionPatterns[weaknessType] = this.classifyProgression(weeklyScores);
    });

    return {
      patterns: progressionPatterns,
      weeklyAnalysis,
      confidence: 0.6
    };
  }

  /**
   * –ò–ò-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–ª–∞–±–æ—Å—Ç–µ–π
   */
  async performAIWeaknessAnalysis(responses) {
    if (!this.aiService.isConfigured) return null;

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
    const analysisData = this.prepareAIAnalysisData(responses);
    
    const prompt = `–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–ª–∞–±–æ—Å—Ç–µ–π –≤ –æ–±—É—á–µ–Ω–∏–∏ ESM —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

–î–ê–ù–ù–´–ï –û–¢–í–ï–¢–û–í:
${JSON.stringify(analysisData, null, 2)}

–ó–ê–î–ê–ß–ê:
–í—ã—è–≤–∏ —Ç–æ–Ω–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–±–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:

1. –°–ö–†–´–¢–´–ï –ò–õ–õ–Æ–ó–ò–ò:
   - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ (—Ä–µ–∞–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ 3% –≤—Ä–µ–º–µ–Ω–∏)
   - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —è—Ä–ª—ã–∫–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–ª–µ—Å–Ω—ã—Ö –æ—â—É—â–µ–Ω–∏–π
   - –ö–∞—É–∑–∞–ª—å–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø—ã—Ç–∞
   - –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

2. –ö–û–ì–ù–ò–¢–ò–í–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:
   - –ò–∑–±—ã—Ç–æ—á–Ω–æ–µ —Ç–µ–æ—Ä–µ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
   - –ò–∑–±–µ–≥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –æ–ø—ã—Ç–∞
   - –ö–æ–Ω—Ñ–∞–±—É–ª—è—Ü–∏—è –¥–µ—Ç–∞–ª–µ–π
   - –°–æ—Ü–∏–∞–ª—å–Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

3. –ú–ï–¢–û–î–û–õ–û–ì–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:
   - –ù–µ—Ç–æ—á–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –º–æ–º–µ–Ω—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞
   - –°–º–µ—à–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
   - –î–æ–¥—É–º—ã–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è

4. –ü–†–û–ì–†–ï–°–°–ò–Ø –û–ë–£–ß–ï–ù–ò–Ø:
   - –ó–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
   - –ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ —Å–ª–∞–±–æ—Å—Ç–µ–π —Ä–∞–∑–≤–∏—Ç—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏
   - –ü–ª–∞—Ç–æ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏

–í–µ—Ä–Ω–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ JSON:
{
  "criticalWeaknesses": [
    {
      "type": "weakness_type",
      "severity": 0.8,
      "evidence": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤",
      "hiddenPattern": "–æ–ø–∏—Å–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞",
      "riskLevel": "high|medium|low"
    }
  ],
  "subtleIssues": [
    {
      "pattern": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞", 
      "description": "–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
      "examples": ["–ø—Ä–∏–º–µ—Ä1", "–ø—Ä–∏–º–µ—Ä2"],
      "interventionNeeded": true
    }
  ],
  "learningBlocks": [
    {
      "blockType": "—Ç–∏–ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏",
      "manifestation": "–∫–∞–∫ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è",
      "suggestion": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—é"
    }
  ],
  "progressionInsights": {
    "overallTrend": "improving|plateauing|declining",
    "stuckAreas": ["–æ–±–ª–∞—Å—Ç—å1", "–æ–±–ª–∞—Å—Ç—å2"],
    "breakthroughPotential": ["–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª1", "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª2"]
  },
  "confidence": 0.85
}`;

    try {
      const result = await this.aiService.validate(prompt, { 
        isWeaknessAnalysis: true,
        userId: responses[0]?.userId
      });
      
      return this.parseAIWeaknessResult(result);
      
    } catch (error) {
      console.error('AI weakness analysis failed:', error);
      return null;
    }
  }

  /**
   * –°–∏–Ω—Ç–µ–∑ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
   */
  synthesizeAnalysis(statistical, pattern, progression, ai) {
    const allWeaknesses = new Map();
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–∞–±–æ—Å—Ç–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    [statistical, pattern].forEach(analysis => {
      analysis.weaknesses.forEach(weakness => {
        const key = weakness.type;
        if (allWeaknesses.has(key)) {
          const existing = allWeaknesses.get(key);
          existing.severity = Math.max(existing.severity, weakness.severity);
          existing.sources.push(analysis.confidence);
          existing.evidence += `; ${weakness.evidence}`;
        } else {
          allWeaknesses.set(key, {
            ...weakness,
            sources: [analysis.confidence],
            progressionPattern: progression.patterns[key] || 'unknown'
          });
        }
      });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ò–ò-–∞–Ω–∞–ª–∏–∑–∞
    if (ai?.criticalWeaknesses) {
      ai.criticalWeaknesses.forEach(weakness => {
        const key = weakness.type;
        if (allWeaknesses.has(key)) {
          const existing = allWeaknesses.get(key);
          existing.severity = Math.max(existing.severity, weakness.severity);
          existing.aiInsights = weakness.hiddenPattern;
          existing.riskLevel = weakness.riskLevel;
        } else {
          allWeaknesses.set(key, {
            type: weakness.type,
            severity: weakness.severity,
            evidence: weakness.evidence,
            sources: [ai.confidence || 0.8],
            progressionPattern: 'ai_detected',
            aiInsights: weakness.hiddenPattern,
            riskLevel: weakness.riskLevel
          });
        }
      });
    }

    return Array.from(allWeaknesses.values());
  }

  /**
   * –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Å–ª–∞–±–æ—Å—Ç–µ–π
   */
  prioritizeWeaknesses(weaknesses) {
    return weaknesses
      .map(weakness => ({
        ...weakness,
        priority: this.calculatePriority(weakness),
        confidence: this.calculateWeaknessConfidence(weakness)
      }))
      .sort((a, b) => b.priority - a.priority);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ª–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–π
   */
  generateInterventions(prioritizedWeaknesses) {
    return prioritizedWeaknesses.slice(0, 5).map(weakness => {
      const weaknessConfig = this.weaknessTypes[weakness.type];
      
      return {
        targetWeakness: weakness.type,
        interventionType: weaknessConfig?.interventions[0] || 'general_training',
        urgency: weakness.riskLevel || this.calculateUrgency(weakness.severity),
        specificActions: this.generateSpecificActions(weakness),
        estimatedDuration: this.estimateInterventionDuration(weakness),
        successMetrics: this.defineSuccessMetrics(weakness.type),
        fallbackStrategy: this.generateFallbackStrategy(weakness)
      };
    });
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  
  async getUserResponses(userId, limit = 50) {
    return await Response.find({ userId })
      .sort({ timestamp: -1 })
      .limit(limit);
  }

  calculateSeverity(current, target) {
    const deficit = Math.max(0, target - current);
    return Math.min(1.0, deficit / target);
  }

  mapPatternToWeakness(pattern) {
    const mapping = {
      'generalization': 'moment_capture',
      'retrospective': 'moment_capture', 
      'theoretical': 'over_analysis',
      'abstract': 'specificity',
      'reading_voice_illusion': 'illusion_detection',
      'emotion_labeling': 'emotional_labeling',
      'avoidance': 'avoidance',
      'past_tense': 'time_confusion'
    };
    
    return mapping[pattern];
  }

  detectTextPatterns(text) {
    const patterns = [];
    const lowerText = text.toLowerCase();
    
    // –û–±–æ–±—â–µ–Ω–∏—è
    if (/–æ–±—ã—á–Ω–æ|–≤—Å–µ–≥–¥–∞|–Ω–∏–∫–æ–≥–¥–∞|—á–∞—Å—Ç–æ|—Ä–µ–¥–∫–æ/.test(lowerText)) {
      patterns.push('generalization');
    }
    
    // –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞
    if (/–±—ã–ª|–±—ã–ª–∞|–±—ã–ª–æ|–±—ã–ª–∏|–≤—á–µ—Ä–∞|—É—Ç—Ä–æ–º|—Ä–∞–Ω—å—à–µ/.test(lowerText)) {
      patterns.push('retrospective');
    }
    
    // –¢–µ–æ—Ä–µ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (/–¥—É–º–∞—é|–Ω–∞–≤–µ—Ä–Ω–æ–µ|–¥–æ–ª–∂–µ–Ω|–ø–æ—Ç–æ–º—É —á—Ç–æ|–ø–æ—ç—Ç–æ–º—É/.test(lowerText)) {
      patterns.push('theoretical');
    }
    
    // –ò–∑–±–µ–≥–∞–Ω–∏–µ
    if (/–Ω–∏—á–µ–≥–æ|–Ω–µ –∑–Ω–∞—é|–Ω–µ –ø–æ–º–Ω—é|–Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ/.test(lowerText)) {
      patterns.push('avoidance');
    }
    
    return patterns;
  }

  groupResponsesByWeek(responses) {
    const weeks = [];
    let currentWeek = [];
    let currentWeekStart = null;
    
    responses.forEach(response => {
      const responseDate = new Date(response.timestamp);
      
      if (!currentWeekStart) {
        currentWeekStart = responseDate;
        currentWeek = [response];
      } else {
        const daysDiff = (responseDate - currentWeekStart) / (1000 * 60 * 60 * 24);
        
        if (daysDiff <= 7) {
          currentWeek.push(response);
        } else {
          weeks.push(currentWeek);
          currentWeek = [response];
          currentWeekStart = responseDate;
        }
      }
    });
    
    if (currentWeek.length > 0) {
      weeks.push(currentWeek);
    }
    
    return weeks;
  }

  classifyProgression(weeklyScores) {
    if (weeklyScores.length < 2) return 'insufficient_data';
    
    const trend = this.calculateTrend(weeklyScores);
    const variance = this.calculateVariance(weeklyScores);
    const lastScore = weeklyScores[weeklyScores.length - 1];
    
    if (Math.abs(trend) < 0.1 && lastScore > 0.5) return 'persistent';
    if (trend > 0.2) return 'increasing'; 
    if (trend < -0.2) return 'improving';
    if (variance < 0.1 && lastScore > 0.3) return 'plateau';
    return 'variable';
  }

  calculateTrend(values) {
    if (values.length < 2) return 0;
    
    const n = values.length;
    const sumX = (n * (n + 1)) / 2;
    const sumY = values.reduce((a, b) => a + b, 0);
    const sumXY = values.reduce((sum, y, i) => sum + y * (i + 1), 0);
    const sumX2 = (n * (n + 1) * (2 * n + 1)) / 6;
    
    return (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
  }

  calculateVariance(values) {
    const mean = values.reduce((a, b) => a + b, 0) / values.length;
    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;
    return Math.sqrt(variance);
  }

  calculatePriority(weakness) {
    const weaknessConfig = this.weaknessTypes[weakness.type];
    const weight = weaknessConfig?.weight || 0.5;
    const confidenceBonus = weakness.sources.reduce((sum, conf) => sum + conf, 0) / weakness.sources.length;
    
    return weakness.severity * weight * confidenceBonus;
  }

  calculateWeaknessConfidence(weakness) {
    return weakness.sources.reduce((sum, conf) => sum + conf, 0) / weakness.sources.length;
  }

  identifyRiskFactors(weaknesses) {
    const risks = [];
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–∞–±–æ—Å—Ç–∏
    const criticalWeaknesses = weaknesses.filter(w => w.severity > 0.8);
    if (criticalWeaknesses.length > 2) {
      risks.push('multiple_critical_issues');
    }
    
    // –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    const fundamentalIssues = weaknesses.filter(w => 
      this.weaknessTypes[w.type]?.category === 'fundamental'
    );
    if (fundamentalIssues.length > 0) {
      risks.push('fundamental_skill_deficit');
    }
    
    // –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const plateauedWeaknesses = weaknesses.filter(w => 
      w.progressionPattern === 'plateau' || w.progressionPattern === 'persistent'
    );
    if (plateauedWeaknesses.length > 1) {
      risks.push('learning_plateau');
    }
    
    return risks;
  }

  generateSpecificActions(weakness) {
    const actions = {
      'moment_capture': [
        '–ü—Ä–∞–∫—Ç–∏–∫–∞ "—Å—Ç–æ–ø-–∫–∞–¥—Ä–∞": –ø—Ä–∏ —Å–∏–≥–Ω–∞–ª–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –º–æ–º–µ–Ω—Ç –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é',
        '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º: –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —á—Ç–æ –°–ï–ô–ß–ê–° –≤ —Å–æ–∑–Ω–∞–Ω–∏–∏',
        '–†–∞–∑–ª–∏—á–µ–Ω–∏–µ: "—á—Ç–æ –±—ã–ª–æ —Ç–æ–≥–¥–∞" vs "—á—Ç–æ —è –¥—É–º–∞—é –æ–± —ç—Ç–æ–º —Å–µ–π—á–∞—Å"'
      ],
      'specificity': [
        '–¢–µ—Ö–Ω–∏–∫–∞ 5W: –ö—Ç–æ, –ß—Ç–æ, –ì–¥–µ, –ö–æ–≥–¥–∞, –ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞',
        '–û–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: —á—Ç–æ –≤–∏–¥–µ–ª/—Å–ª—ã—à–∞–ª/—á—É–≤—Å—Ç–≤–æ–≤–∞–ª',
        '–ò–∑–±–µ–≥–∞–Ω–∏–µ –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö —Å–ª–æ–≤: –∑–∞–º–µ–Ω–∏—Ç—å "—Ö–æ—Ä–æ—à–æ" –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'
      ],
      'illusion_detection': [
        '–ò–∑—É—á–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –•–µ—Ä–ª–±–µ—Ä—Ç–∞ –æ —á–∞—Å—Ç–æ—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≥–æ–ª–æ—Å–∞ (3%)',
        '–°–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —è —Å–ª—ã—à–∞–ª —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–Ω–∏–º–∞–ª?"',
        '–†–∞–∑–ª–∏—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –∏ —Ç–µ–ª–µ—Å–Ω—ã—Ö –æ—â—É—â–µ–Ω–∏–π'
      ]
    };
    
    return actions[weakness.type] || ['–†–∞–∑–≤–∏—Ç–∏–µ –æ–±—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è'];
  }

  estimateInterventionDuration(weakness) {
    const baseDuration = {
      'high': 7, // –¥–Ω–µ–π
      'medium': 4,
      'low': 2
    };
    
    const riskLevel = weakness.riskLevel || 'medium';
    return baseDuration[riskLevel] || 4;
  }

  defineSuccessMetrics(weaknessType) {
    const metrics = {
      'moment_capture': '–ü–æ–≤—ã—à–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –º–æ–º–µ–Ω—Ç-—Ñ–æ–∫—É—Å–∞ –¥–æ 70%+',
      'specificity': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ 65%+',
      'illusion_detection': '–°–Ω–∏–∂–µ–Ω–∏–µ –∏–ª–ª—é–∑–∏–π –¥–æ <20% –æ—Ç–≤–µ—Ç–æ–≤',
      'consistency': '–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–æ 80%+'
    };
    
    return metrics[weaknessType] || '–û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤';
  }

  generateFallbackStrategy(weakness) {
    if (weakness.severity > 0.8) {
      return '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –º–µ–Ω—Ç–æ—Ä–æ–º-–±–æ—Ç–æ–º';
    } else if (weakness.severity > 0.6) {
      return '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ—Ä—ã';
    } else {
      return '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏';
    }
  }

  // –ú–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è fallback –¥–∞–Ω–Ω—ã—Ö
  createInitialWeaknessProfile() {
    return {
      primaryWeaknesses: [
        { type: 'moment_capture', severity: 0.7, evidence: '–ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞' },
        { type: 'specificity', severity: 0.6, evidence: '–ù–∞—á–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞' }
      ],
      allWeaknesses: [],
      interventions: [],
      confidence: 0.3,
      metadata: { isInitial: true }
    };
  }

  createFallbackAnalysis(userId) {
    return {
      userId,
      primaryWeaknesses: [
        { type: 'moment_capture', severity: 0.5, evidence: 'Fallback –∞–Ω–∞–ª–∏–∑' }
      ],
      allWeaknesses: [],
      interventions: [],
      confidence: 0.2,
      metadata: { isFallback: true }
    };
  }

  analyzeQualityMetrics(responses) {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
    return {
      avgMomentFocus: 50,
      avgSpecificity: 55,
      avgSensoryDetail: 45,
      consistencyScore: 0.6
    };
  }

  analyzeResponsePatterns(responses) {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
    return {
      momentIssueFrequency: 0.4,
      specificityIssues: 0.3,
      sensoryDeficit: 0.5,
      inconsistencyCount: 3
    };
  }

  analyzeValidationIssues(responses) {
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    return responses.reduce((issues, response) => {
      const attempts = response.metadata?.validationAttempts || {};
      Object.entries(attempts).forEach(([question, count]) => {
        if (count > 1) {
          issues.push({ question, attempts: count });
        }
      });
      return issues;
    }, []);
  }

  analyzePhenomenaProfile(responses) {
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —Ñ–µ–Ω–æ–º–µ–Ω–æ–≤
    const phenomena = {};
    responses.forEach(r => {
      const detected = r.metadata?.phenomenaDetected || [];
      detected.forEach(p => {
        phenomena[p.type] = (phenomena[p.type] || 0) + 1;
      });
    });
    return phenomena;
  }

  prepareAIAnalysisData(responses) {
    return responses.slice(0, 15).map(r => ({
      text: r.responses?.currentThoughts?.substring(0, 200) || '',
      quality: r.metadata?.dataQualityScore || 0,
      day: r.metadata?.trainingDay || 1,
      validationAttempts: Object.values(r.metadata?.validationAttempts || {}).reduce((a, b) => a + b, 0),
      phenomena: r.metadata?.phenomenaDetected || [],
      mood: r.responses?.mood,
      stress: r.responses?.stress,
      timestamp: r.timestamp
    }));
  }

  parseAIWeaknessResult(result) {
    try {
      // –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const fallback = {
        criticalWeaknesses: [],
        subtleIssues: [],
        learningBlocks: [],
        progressionInsights: {
          overallTrend: 'unknown',
          stuckAreas: [],
          breakthroughPotential: []
        },
        confidence: 0.5
      };

      if (result && typeof result === 'object') {
        return { ...fallback, ...result };
      }
      
      return fallback;
    } catch (error) {
      console.error('Error parsing AI weakness result:', error);
      return {
        criticalWeaknesses: [],
        subtleIssues: [],
        learningBlocks: [],
        progressionInsights: { overallTrend: 'unknown', stuckAreas: [], breakthroughPotential: [] },
        confidence: 0.3
      };
    }
  }

  calculateConfidence(statistical, ai) {
    let confidence = statistical.confidence * 0.6;
    if (ai?.confidence) {
      confidence += ai.confidence * 0.4;
    } else {
      confidence += 0.2; // Bonus –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ –ò–ò
    }
    return Math.min(1.0, confidence);
  }

  calculateWeekAvgQuality(weekResponses) {
    const qualities = weekResponses
      .map(r => r.metadata?.dataQualityScore)
      .filter(Boolean);
    
    return qualities.length > 0 ? 
      qualities.reduce((a, b) => a + b, 0) / qualities.length : 50;
  }

  analyzeWeekWeaknesses(weekResponses) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–ª–∞–±–æ—Å—Ç–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é
    return [
      { type: 'moment_capture', severity: Math.random() * 0.5 + 0.2 },
      { type: 'specificity', severity: Math.random() * 0.4 + 0.1 }
    ];
  }

  calculateUrgency(severity) {
    if (severity > 0.8) return 'high';
    if (severity > 0.5) return 'medium';
    return 'low';
  }
}

module.exports = new WeaknessAnalyzer();