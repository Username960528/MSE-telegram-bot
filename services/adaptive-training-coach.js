const aiValidator = require('./ai-validator-service');
const Response = require('../models/Response');
const TrainingProgress = require('../models/TrainingProgress');
const config = require('../config/hurlburt');
const { recordAIUsage } = require('../utils/metrics');

/**
 * –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ò–ò-–∫–æ—É—á –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è ESM
 * 
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è:
 * - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (2-5 –¥–Ω–µ–π)
 * - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
 * - –í—ã—è–≤–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–ª–∞–±–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ü–µ–ª–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–∏
 * - –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ñ–æ–∫—É—Å –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
 */
class AdaptiveTrainingCoach {
  constructor() {
    this.aiService = aiValidator;
    this.config = config;
    
    // –ü—Ä–æ—Ñ–∏–ª–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.learningProfiles = {
      'quick_learner': { 
        minDays: 2, 
        maxDays: 3,
        qualityThreshold: 80,
        focusAreas: ['precision', 'consistency']
      },
      'analytical': { 
        minDays: 3, 
        maxDays: 4,
        qualityThreshold: 75,
        focusAreas: ['illusion_detection', 'specificity'] 
      },
      'intuitive': { 
        minDays: 2, 
        maxDays: 4,
        qualityThreshold: 70,
        focusAreas: ['moment_capture', 'sensory_detail']
      },
      'struggling': { 
        minDays: 4, 
        maxDays: 5,
        qualityThreshold: 60,
        focusAreas: ['basic_awareness', 'simple_distinction']
      }
    };
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è
   */
  async adaptTrainingPlan(userId, currentProgress) {
    try {
      console.log(`üéØ Adapting training plan for user ${userId}`);
      
      // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å–ª–∞–±–æ—Å—Ç–∏
      const analysis = await this.analyzeUserProgress(userId, currentProgress);
      
      // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ–±—É—á–µ–Ω–∏—è
      const learningProfile = this.identifyLearningProfile(analysis);
      
      // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
      const personalizedContent = await this.generatePersonalizedContent(analysis, learningProfile);
      
      // 4. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      const recommendedDuration = this.calculateOptimalDuration(analysis, learningProfile);
      
      // 5. –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω
      const adaptedPlan = {
        learningProfile: learningProfile.type,
        recommendedDuration,
        currentDay: analysis.currentDay,
        personalizedExercises: personalizedContent.exercises,
        dailyFocus: personalizedContent.dailyFocus,
        customMessages: personalizedContent.messages,
        interventions: personalizedContent.interventions,
        nextSteps: personalizedContent.nextSteps,
        qualityTarget: learningProfile.qualityThreshold,
        weaknessTargets: analysis.primaryWeaknesses,
        metadata: {
          analysisDate: new Date(),
          confidence: analysis.confidence,
          adaptationReason: analysis.adaptationReason
        }
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.saveAdaptedPlan(userId, adaptedPlan);
      
      recordAIUsage('adaptive_coaching', true);
      console.log(`‚úÖ Training plan adapted for ${learningProfile.type} learner`);
      
      return adaptedPlan;
      
    } catch (error) {
      console.error('Error adapting training plan:', error);
      recordAIUsage('adaptive_coaching', false);
      
      // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ø–ª–∞–Ω—É
      return this.createFallbackPlan(currentProgress);
    }
  }

  /**
   * –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async analyzeUserProgress(userId, currentProgress) {
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–≤–µ—Ç–æ–≤
    const responses = await Response.find({ userId })
      .sort({ timestamp: -1 })
      .limit(20);
    
    if (responses.length === 0) {
      return this.createInitialAnalysis();
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ò–ò
    const aiAnalysis = await this.performAIAnalysis(responses, currentProgress);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
    const statisticalAnalysis = this.performStatisticalAnalysis(responses);
    
    return {
      currentDay: currentProgress?.getCurrentDay() || 1,
      totalResponses: responses.length,
      qualityTrend: aiAnalysis.qualityTrend,
      primaryWeaknesses: aiAnalysis.weaknesses,
      strengths: aiAnalysis.strengths,
      learningVelocity: statisticalAnalysis.learningVelocity,
      consistencyScore: statisticalAnalysis.consistencyScore,
      illusionPatterns: aiAnalysis.illusionPatterns,
      phenomenaProfile: statisticalAnalysis.phenomenaProfile,
      adaptationReason: aiAnalysis.adaptationReason,
      confidence: aiAnalysis.confidence || 0.7,
      riskFactors: aiAnalysis.riskFactors || []
    };
  }

  /**
   * –ò–ò-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async performAIAnalysis(responses, currentProgress) {
    if (!this.aiService.isConfigured) {
      return this.createFallbackAnalysis(responses);
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ò–ò
    const analysisData = this.prepareAnalysisData(responses);
    
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è ESM —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:

–î–ê–ù–ù–´–ï –û–¢–í–ï–¢–û–í:
${JSON.stringify(analysisData, null, 2)}

–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:
- –î–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è: ${currentProgress?.getCurrentDay() || 1}
- –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã: ${responses.length}
- –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${this.calculateAverageQuality(responses)}

–ó–ê–î–ê–ß–ê –ê–ù–ê–õ–ò–ó–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –¢–û–ü-3 —Å–ª–∞–±–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –í—ã—è–≤–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–ª–ª—é–∑–∏–π –∏ –æ—à–∏–±–æ–∫  
3. –û—Ü–µ–Ω–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–º–µ–¥–ª–µ–Ω–Ω–∞—è/–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è/–±—ã—Å—Ç—Ä–∞—è)
4. –û–ø—Ä–µ–¥–µ–ª–∏ —Ä–∏—Å–∫–∏ dropout –∏–ª–∏ –ø–ª–æ—Ö–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
5. –ü—Ä–µ–¥–ª–æ–∂–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã

–û–°–û–ë–û–ï –í–ù–ò–ú–ê–ù–ò–ï:
- –ò–ª–ª—é–∑–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≥–æ–ª–æ—Å–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±–æ–±—â–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏
- –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ –º–æ–º–µ–Ω—Ç–∞
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —è—Ä–ª—ã–∫–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–ª–µ—Å–Ω—ã—Ö –æ—â—É—â–µ–Ω–∏–π
- –¢–µ–æ—Ä–µ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–ø—ã—Ç–∞

–û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "qualityTrend": "improving|stable|declining",
  "weaknesses": ["weakness1", "weakness2", "weakness3"],
  "strengths": ["strength1", "strength2"],
  "learningVelocity": "slow|normal|fast",
  "illusionPatterns": ["pattern1", "pattern2"],
  "adaptationReason": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –Ω—É–∂–Ω–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏—è",
  "confidence": 0.8,
  "riskFactors": ["risk1", "risk2"],
  "recommendedFocus": ["area1", "area2"]
}`;

    try {
      const result = await this.aiService.validate(prompt, { 
        isMetaAnalysis: true,
        userId: responses[0]?.userId
      });
      
      // –ü–∞—Ä—Å–∏–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò
      return this.parseAIAnalysisResult(result);
      
    } catch (error) {
      console.error('AI analysis failed:', error);
      return this.createFallbackAnalysis(responses);
    }
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
   */
  performStatisticalAnalysis(responses) {
    const qualityScores = responses
      .map(r => r.metadata?.dataQualityScore)
      .filter(Boolean);
    
    const learningVelocity = this.calculateLearningVelocity(qualityScores);
    const consistencyScore = this.calculateConsistencyScore(responses);
    const phenomenaProfile = this.analyzePhenomenaProfile(responses);
    
    return {
      learningVelocity,
      consistencyScore,
      phenomenaProfile,
      averageQuality: qualityScores.length > 0 ? 
        qualityScores.reduce((a, b) => a + b, 0) / qualityScores.length : 50,
      responseFrequency: this.calculateResponseFrequency(responses),
      timePatterns: this.analyzeTimePatterns(responses)
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±—É—á–µ–Ω–∏—è
   */
  identifyLearningProfile(analysis) {
    const { learningVelocity, qualityTrend, primaryWeaknesses, riskFactors } = analysis;
    
    // –ë—ã—Å—Ç—Ä–æ –æ–±—É—á–∞—é—â–∏–π—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (learningVelocity === 'fast' && qualityTrend === 'improving' && 
        analysis.averageQuality > 70) {
      return { 
        type: 'quick_learner', 
        ...this.learningProfiles.quick_learner,
        adaptations: ['accelerated_pace', 'advanced_concepts']
      };
    }
    
    // –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–∏–ø
    if (primaryWeaknesses.includes('theoretical') || 
        primaryWeaknesses.includes('over_analysis')) {
      return { 
        type: 'analytical', 
        ...this.learningProfiles.analytical,
        adaptations: ['simplicity_focus', 'experiential_exercises']
      };
    }
    
    // –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π —Ç–∏–ø
    if (primaryWeaknesses.includes('specificity') && 
        !primaryWeaknesses.includes('moment_capture')) {
      return { 
        type: 'intuitive', 
        ...this.learningProfiles.intuitive,
        adaptations: ['detail_training', 'structured_observation']
      };
    }
    
    // Struggling learner
    if (riskFactors.length > 2 || analysis.averageQuality < 50 || 
        learningVelocity === 'slow') {
      return { 
        type: 'struggling', 
        ...this.learningProfiles.struggling,
        adaptations: ['extended_practice', 'simplified_concepts', 'extra_support']
      };
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    return { 
      type: 'analytical', 
      ...this.learningProfiles.analytical,
      adaptations: ['standard_progression']
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  async generatePersonalizedContent(analysis, learningProfile) {
    if (!this.aiService.isConfigured) {
      return this.createFallbackContent(analysis, learningProfile);
    }

    const prompt = `–°–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è ESM:

–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
- –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è: ${learningProfile.type}
- –û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–∞–±–æ—Å—Ç–∏: ${analysis.primaryWeaknesses.join(', ')}
- –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: ${analysis.strengths.join(', ')}
- –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: ${analysis.currentDay}
- –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏–ª–ª—é–∑–∏–π: ${analysis.illusionPatterns.join(', ')}

–ê–î–ê–ü–¢–ê–¶–ò–ò: ${learningProfile.adaptations.join(', ')}

–°–û–ó–î–ê–ô:
1. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (2-3 –Ω–∞ –¥–µ–Ω—å) –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–∞–±–æ—Å—Ç–µ–π
2. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ (–∫–æ—Ä–æ—Ç–∫–∏–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ)
3. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–∏ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
4. –§–æ–∫—É—Å –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –æ–±—É—á–µ–Ω–∏—è

–ü–†–ò–ù–¶–ò–ü–´:
- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏
- –°–æ–æ–±—â–µ–Ω–∏—è - –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º–∏, –Ω–µ –∫—Ä–∏—Ç–∏–∫—É—é—â–∏–º–∏  
- –ò–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–∏ - —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–ª–ª—é–∑–∏–∏
- –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É

–û—Ç–≤–µ—Ç—å –≤ JSON:
{
  "exercises": {
    "day1": [{"title": "...", "description": "...", "target": "weakness"}],
    "day2": [...],
    "day3": [...],
    "day4": [...] // –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
  },
  "messages": {
    "morning": ["...", "..."],
    "encouragement": ["...", "..."],
    "correction": ["...", "..."]
  },
  "interventions": [
    {"trigger": "generalization", "response": "...", "example": "..."}
  ],
  "dailyFocus": {
    "day1": "focus_area",
    "day2": "focus_area", 
    "day3": "focus_area"
  },
  "nextSteps": ["step1", "step2"]
}`;

    try {
      const result = await this.aiService.validate(prompt, { 
        isContentGeneration: true,
        learningProfile: learningProfile.type
      });
      
      return this.parsePersonalizedContent(result);
      
    } catch (error) {
      console.error('Personalized content generation failed:', error);
      return this.createFallbackContent(analysis, learningProfile);
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
   */
  calculateOptimalDuration(analysis, learningProfile) {
    let duration = learningProfile.minDays;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞
    if (analysis.riskFactors.length > 2) duration += 1;
    if (analysis.learningVelocity === 'slow') duration += 1;
    if (analysis.averageQuality < 50) duration += 1;
    if (analysis.consistencyScore < 0.6) duration += 1;
    
    // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ –æ–±—É—á–∞—é—â–∏—Ö—Å—è
    if (analysis.learningVelocity === 'fast' && analysis.averageQuality > 70) {
      duration = Math.max(learningProfile.minDays, duration - 1);
    }
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
    return Math.min(learningProfile.maxDays, Math.max(learningProfile.minDays, duration));
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
   */
  async saveAdaptedPlan(userId, adaptedPlan) {
    try {
      const progress = await TrainingProgress.findOne({ userId });
      if (progress) {
        if (!progress.adaptiveCoaching) {
          progress.adaptiveCoaching = {};
        }
        
        progress.adaptiveCoaching = {
          ...adaptedPlan,
          createdAt: new Date(),
          version: (progress.adaptiveCoaching.version || 0) + 1
        };
        
        await progress.save();
        console.log(`üíæ Adaptive plan saved for user ${userId}`);
      }
    } catch (error) {
      console.error('Error saving adaptive plan:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
   */
  async getAdaptivePlan(userId) {
    try {
      const progress = await TrainingProgress.findOne({ userId });
      return progress?.adaptiveCoaching || null;
    } catch (error) {
      console.error('Error getting adaptive plan:', error);
      return null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   */
  async updatePlanBasedOnProgress(userId, newResponse) {
    const currentPlan = await this.getAdaptivePlan(userId);
    if (!currentPlan) return null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω
    const needsUpdate = await this.shouldUpdatePlan(currentPlan, newResponse);
    
    if (needsUpdate) {
      console.log(`üîÑ Updating adaptive plan for user ${userId}`);
      const progress = await TrainingProgress.findOne({ userId });
      return await this.adaptTrainingPlan(userId, progress);
    }
    
    return currentPlan;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  
  prepareAnalysisData(responses) {
    return responses.slice(0, 10).map(r => ({
      quality: r.metadata?.dataQualityScore || 0,
      text: r.responses?.currentThoughts?.substring(0, 100) || '',
      day: r.metadata?.trainingDay || 1,
      phenomena: r.metadata?.phenomenaDetected || [],
      issues: r.metadata?.validationAttempts || {},
      mood: r.responses?.mood,
      stress: r.responses?.stress,
      timestamp: r.timestamp
    }));
  }

  calculateAverageQuality(responses) {
    const scores = responses
      .map(r => r.metadata?.dataQualityScore)
      .filter(Boolean);
    
    return scores.length > 0 ? 
      Math.round(scores.reduce((a, b) => a + b, 0) / scores.length) : 50;
  }

  calculateLearningVelocity(qualityScores) {
    if (qualityScores.length < 3) return 'normal';
    
    const firstHalf = qualityScores.slice(-Math.ceil(qualityScores.length / 2));
    const secondHalf = qualityScores.slice(0, Math.floor(qualityScores.length / 2));
    
    const firstAvg = firstHalf.reduce((a, b) => a + b, 0) / firstHalf.length;
    const secondAvg = secondHalf.reduce((a, b) => a + b, 0) / secondHalf.length;
    
    const improvement = firstAvg - secondAvg;
    
    if (improvement > 20) return 'fast';
    if (improvement < 5) return 'slow';
    return 'normal';
  }

  calculateConsistencyScore(responses) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º, —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º –æ—Ç–≤–µ—Ç–æ–≤
    let consistentPairs = 0;
    let totalPairs = 0;
    
    responses.forEach(r => {
      const mood = r.responses?.mood;
      const stress = r.responses?.stress;
      const quality = r.metadata?.dataQualityScore;
      
      if (mood && stress && quality) {
        totalPairs++;
        
        // –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–æ–º mood/stress
        const isBalanced = Math.abs(mood - (8 - stress)) < 2;
        const isHighQuality = quality > 60;
        
        if ((isBalanced && isHighQuality) || (!isBalanced && !isHighQuality)) {
          consistentPairs++;
        }
      }
    });
    
    return totalPairs > 0 ? consistentPairs / totalPairs : 0.5;
  }

  analyzePhenomenaProfile(responses) {
    const phenomena = {};
    
    responses.forEach(r => {
      const detected = r.metadata?.phenomenaDetected || [];
      detected.forEach(p => {
        phenomena[p.type] = (phenomena[p.type] || 0) + 1;
      });
    });
    
    return phenomena;
  }

  calculateResponseFrequency(responses) {
    if (responses.length < 2) return 'unknown';
    
    const times = responses.map(r => new Date(r.timestamp).getTime());
    const intervals = [];
    
    for (let i = 1; i < times.length; i++) {
      intervals.push(times[i-1] - times[i]);
    }
    
    const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;
    const hours = avgInterval / (1000 * 60 * 60);
    
    if (hours < 2) return 'very_frequent';
    if (hours < 6) return 'frequent';
    if (hours < 12) return 'normal';
    return 'infrequent';
  }

  analyzeTimePatterns(responses) {
    const hours = responses.map(r => new Date(r.timestamp).getHours());
    const timeDistribution = {};
    
    hours.forEach(hour => {
      const period = hour < 6 ? 'night' : 
                   hour < 12 ? 'morning' :
                   hour < 18 ? 'afternoon' : 'evening';
      timeDistribution[period] = (timeDistribution[period] || 0) + 1;
    });
    
    return timeDistribution;
  }

  parseAIAnalysisResult(result) {
    // –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const fallback = {
      qualityTrend: 'stable',
      weaknesses: ['specificity', 'moment_focus'],
      strengths: ['engagement'],
      learningVelocity: 'normal',
      illusionPatterns: [],
      adaptationReason: 'Standard adaptation',
      confidence: 0.5,
      riskFactors: []
    };

    try {
      if (result && typeof result === 'object') {
        return {
          ...fallback,
          ...result,
          confidence: Math.min(1, Math.max(0, result.confidence || 0.5))
        };
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
      if (typeof result === 'string') {
        const parsed = JSON.parse(result);
        return { ...fallback, ...parsed };
      }
      
      return fallback;
    } catch (error) {
      console.error('Error parsing AI analysis result:', error);
      return fallback;
    }
  }

  parsePersonalizedContent(result) {
    const fallback = this.createFallbackContent({}, { type: 'analytical' });
    
    try {
      if (result && typeof result === 'object') {
        return {
          exercises: result.exercises || fallback.exercises,
          messages: result.messages || fallback.messages,
          interventions: result.interventions || fallback.interventions,
          dailyFocus: result.dailyFocus || fallback.dailyFocus,
          nextSteps: result.nextSteps || fallback.nextSteps
        };
      }
      
      return fallback;
    } catch (error) {
      console.error('Error parsing personalized content:', error);
      return fallback;
    }
  }

  createInitialAnalysis() {
    return {
      currentDay: 1,
      totalResponses: 0,
      qualityTrend: 'unknown',
      primaryWeaknesses: ['moment_capture', 'specificity'],
      strengths: [],
      learningVelocity: 'normal',
      consistencyScore: 0.5,
      illusionPatterns: [],
      phenomenaProfile: {},
      adaptationReason: 'Initial assessment',
      confidence: 0.3,
      riskFactors: [],
      averageQuality: 50
    };
  }

  createFallbackAnalysis(responses) {
    const avgQuality = this.calculateAverageQuality(responses);
    
    return {
      currentDay: responses.length > 0 ? 
        (responses[0].metadata?.trainingDay || 1) : 1,
      totalResponses: responses.length,
      qualityTrend: avgQuality > 60 ? 'improving' : 'stable',
      primaryWeaknesses: avgQuality < 50 ? 
        ['moment_capture', 'specificity', 'consistency'] :
        ['specificity', 'sensory_detail'],
      strengths: ['engagement'],
      learningVelocity: 'normal',
      consistencyScore: 0.6,
      illusionPatterns: ['generalization'],
      phenomenaProfile: {},
      adaptationReason: 'Fallback analysis due to AI unavailability',
      confidence: 0.4,
      riskFactors: avgQuality < 40 ? ['low_quality', 'inconsistency'] : [],
      averageQuality: avgQuality
    };
  }

  createFallbackContent(analysis, learningProfile) {
    return {
      exercises: {
        day1: [
          {
            title: "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ –∑–∞—Ö–≤–∞—Ç –º–æ–º–µ–Ω—Ç–∞",
            description: "–ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–∞–π–º–µ—Ä –Ω–∞ 5 –º–∏–Ω—É—Ç. –ö–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ: —á—Ç–æ –ò–ú–ï–ù–ù–û —Å–µ–π—á–∞—Å –≤ —Å–æ–∑–Ω–∞–Ω–∏–∏?",
            target: "moment_capture"
          }
        ],
        day2: [
          {
            title: "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—ã—Ç–∞",
            description: "–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–∏–≥–Ω–∞–ª–µ –æ–ø–∏—à–∏—Ç–µ 3 —Å–µ–Ω—Å–æ—Ä–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: —á—Ç–æ –≤–∏–¥–µ–ª–∏, —Å–ª—ã—à–∞–ª–∏, —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —Ç–µ–ª–æ–º.",
            target: "sensory_detail"
          }
        ],
        day3: [
          {
            title: "–†–∞–∑–ª–∏—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏",
            description: "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç, –∑–∞—Ç–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ - —á—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ–± —ç—Ç–æ–º –æ–ø—ã—Ç–µ. –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞?",
            target: "pure_experience"
          }
        ]
      },
      messages: {
        morning: [
          "üåÖ –°–µ–≥–æ–¥–Ω—è —Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –º–æ–º–µ–Ω—Ç–µ —Å–∏–≥–Ω–∞–ª–∞!",
          "üí° –ü–æ–º–Ω–∏—Ç–µ: –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ –¢–û, —á—Ç–æ –±—ã–ª–æ, –Ω–µ —Ç–æ, —á—Ç–æ –æ–±—ã—á–Ω–æ –±—ã–≤–∞–µ—Ç"
        ],
        encouragement: [
          "üëç –í—ã –¥–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ç–æ—á–Ω–æ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–∏!",
          "üéØ –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É"
        ],
        correction: [
          "üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±—ã—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑",
          "‚è∞ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –º–æ–º–µ–Ω—Ç—É —Å–∏–≥–Ω–∞–ª–∞ - —á—Ç–æ –±—ã–ª–æ –¢–û–ì–î–ê?"
        ]
      },
      interventions: [
        {
          trigger: "generalization",
          response: "–ó–∞–º–µ—Ç–∏–ª–∏ –æ–±–æ–±—â–µ–Ω–∏–µ! –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –±—ã–ª–æ –≤ –¢–û–¢ –º–æ–º–µ–Ω—Ç?",
          example: "–í–º–µ—Å—Ç–æ '–æ–±—ã—á–Ω–æ –¥—É–º–∞—é' ‚Üí '–≤–∏–¥–µ–ª —Å–ª–æ–≤–æ –•–µ—Ä–ª–±–µ—Ä—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ'"
        }
      ],
      dailyFocus: {
        day1: "moment_capture",
        day2: "sensory_detail", 
        day3: "pure_experience"
      },
      nextSteps: [
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —Ç–æ—á–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ",
        "–û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–∏–µ –º–µ–∂–¥—É –æ–ø—ã—Ç–æ–º –∏ –º—ã—Å–ª—è–º–∏ –æ–± –æ–ø—ã—Ç–µ"
      ]
    };
  }

  createFallbackPlan(currentProgress) {
    return {
      learningProfile: 'standard',
      recommendedDuration: 3,
      currentDay: currentProgress?.getCurrentDay() || 1,
      personalizedExercises: this.createFallbackContent({}, { type: 'analytical' }).exercises,
      dailyFocus: { day1: 'moment_capture', day2: 'specificity', day3: 'consistency' },
      customMessages: this.createFallbackContent({}, { type: 'analytical' }).messages,
      interventions: this.createFallbackContent({}, { type: 'analytical' }).interventions,
      nextSteps: ['Continue standard training progression'],
      qualityTarget: 70,
      weaknessTargets: ['specificity', 'moment_focus'],
      metadata: {
        analysisDate: new Date(),
        confidence: 0.3,
        adaptationReason: 'Fallback due to analysis failure',
        isFallback: true
      }
    };
  }

  shouldUpdatePlan(currentPlan, newResponse) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –µ—Å–ª–∏:
    // 1. –ö–∞—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    // 2. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    // 3. –ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    const hoursSinceUpdate = (Date.now() - new Date(currentPlan.metadata.analysisDate)) / (1000 * 60 * 60);
    const qualityChange = Math.abs((newResponse.metadata?.dataQualityScore || 50) - (currentPlan.qualityTarget || 70));
    
    return hoursSinceUpdate > 24 || qualityChange > 30;
  }
}

module.exports = new AdaptiveTrainingCoach();