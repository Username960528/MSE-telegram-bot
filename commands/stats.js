const User = require('../models/User');
const Response = require('../models/Response');

// –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
const progressEmojis = {
  veryLow: 'üî¥',
  low: 'üü†',
  medium: 'üü°',
  good: 'üü¢',
  excellent: 'üåü'
};

function getProgressEmoji(percent) {
  if (percent < 20) return progressEmojis.veryLow;
  if (percent < 40) return progressEmojis.low;
  if (percent < 60) return progressEmojis.medium;
  if (percent < 80) return progressEmojis.good;
  return progressEmojis.excellent;
}

// –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function createProgressBar(percent, width = 10) {
  const filled = Math.round((percent / 100) * width);
  const empty = width - filled;
  return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
}

async function showStats(bot, chatId, telegramId) {
  try {
    const user = await User.findOne({ telegramId });
    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const responses = await Response.find({ 
      userId: user._id 
    }).sort({ timestamp: -1 });

    if (responses.length === 0) {
      bot.sendMessage(chatId, 
        'üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n\n' +
        '–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /survey –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞!'
      );
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ –¥–Ω—è–º
    const responsesByDay = {};
    const dayScores = {};
    
    responses.forEach(r => {
      const date = new Date(r.timestamp);
      const dayKey = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;
      
      if (!responsesByDay[dayKey]) {
        responsesByDay[dayKey] = [];
      }
      responsesByDay[dayKey].push(r);
      
      // –°–æ–±–∏—Ä–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (r.metadata && r.metadata.dataQualityScore) {
        if (!dayScores[dayKey]) dayScores[dayKey] = [];
        dayScores[dayKey].push(r.metadata.dataQualityScore);
      }
    });

    // –°—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    let totalMood = 0, totalEnergy = 0, totalStress = 0;
    let countMood = 0, countEnergy = 0, countStress = 0;
    let totalQuality = 0, countQuality = 0;
    let trainingResponses = 0;

    responses.forEach(r => {
      if (r.responses) {
        if (r.responses.mood) {
          totalMood += r.responses.mood;
          countMood++;
        }
        if (r.responses.energy) {
          totalEnergy += r.responses.energy;
          countEnergy++;
        }
        if (r.responses.stress) {
          totalStress += r.responses.stress;
          countStress++;
        }
      }
      
      if (r.metadata) {
        if (r.metadata.dataQualityScore) {
          totalQuality += r.metadata.dataQualityScore;
          countQuality++;
        }
        if (r.metadata.isTraining) {
          trainingResponses++;
        }
      }
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è
    const uniqueDays = Object.keys(responsesByDay).length;
    const currentTrainingDay = Math.min(uniqueDays, 3);
    const isStillTraining = currentTrainingDay < 3;

    // –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ESM**\n\n`;
    
    // –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è
    if (isStillTraining) {
      message += `üéì **–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è**: –î–µ–Ω—å ${currentTrainingDay} –∏–∑ 3\n`;
      message += `${getProgressEmoji(currentTrainingDay * 33)} –ü—Ä–æ–≥—Ä–µ—Å—Å: ${createProgressBar(currentTrainingDay * 33)}\n\n`;
    } else {
      message += `‚úÖ **–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n`;
      message += `–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ 3-–≥–æ –¥–Ω—è —è–≤–ª—è—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏\n\n`;
    }

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `üìà **–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n`;
    message += `‚îú –í—Å–µ–≥–æ –æ–ø—Ä–æ—Å–æ–≤: ${responses.length}\n`;
    message += `‚îú –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π: ${uniqueDays}\n`;
    message += `‚îú –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤: ${trainingResponses}\n`;
    if (countQuality > 0) {
      const avgQuality = Math.round(totalQuality / countQuality);
      message += `‚îî –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${getProgressEmoji(avgQuality)} ${avgQuality}%\n`;
    }
    message += `\n`;

    // –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    if (countMood > 0 || countEnergy > 0 || countStress > 0) {
      message += `üìä **–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n`;
      if (countMood > 0) {
        const avgMood = (totalMood / countMood).toFixed(1);
        message += `‚îú –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${getProgressEmoji(avgMood * 14.3)} ${avgMood}/7\n`;
      }
      if (countEnergy > 0) {
        const avgEnergy = (totalEnergy / countEnergy).toFixed(1);
        message += `‚îú –≠–Ω–µ—Ä–≥–∏—è: ${getProgressEmoji(avgEnergy * 14.3)} ${avgEnergy}/7\n`;
      }
      if (countStress > 0) {
        const avgStress = (totalStress / countStress).toFixed(1);
        const stressEmoji = getProgressEmoji(100 - avgStress * 14.3); // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ç—Ä–µ—Å—Å–∞
        message += `‚îî –°—Ç—Ä–µ—Å—Å: ${stressEmoji} ${avgStress}/7\n`;
      }
      message += `\n`;
    }

    // –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º
    const sortedDays = Object.keys(dayScores).sort();
    if (sortedDays.length > 0) {
      message += `üìÖ **–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º:**\n`;
      sortedDays.slice(-5).forEach((day, index) => {
        const scores = dayScores[day];
        const avgScore = Math.round(scores.reduce((a, b) => a + b, 0) / scores.length);
        const dayNum = index + 1;
        const label = dayNum <= 3 ? ' (–æ–±—É—á–µ–Ω–∏–µ)' : '';
        message += `–î–µ–Ω—å ${dayNum}${label}: ${getProgressEmoji(avgScore)} ${avgScore}%\n`;
      });
      message += `\n`;
    }

    // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞
    if (sortedDays.length >= 2) {
      const firstDayScores = dayScores[sortedDays[0]];
      const lastDayScores = dayScores[sortedDays[sortedDays.length - 1]];
      const firstAvg = Math.round(firstDayScores.reduce((a, b) => a + b, 0) / firstDayScores.length);
      const lastAvg = Math.round(lastDayScores.reduce((a, b) => a + b, 0) / lastDayScores.length);
      const improvement = lastAvg - firstAvg;
      
      if (improvement > 10) {
        message += `üìà –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —É–ª—É—á—à–∏–ª–æ—Å—å –Ω–∞ ${improvement}%!\n\n`;
      } else if (improvement > 0) {
        message += `üìä –ö–∞—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —É–ª—É—á—à–∞–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ\n\n`;
      }
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    message += `üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n`;
    
    if (isStillTraining) {
      message += `‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ - –æ—Å—Ç–∞–ª–æ—Å—å ${3 - currentTrainingDay} ${currentTrainingDay === 2 ? '–¥–µ–Ω—å' : '–¥–Ω—è'}\n`;
      message += `‚Ä¢ –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ú–û–ú–ï–ù–¢–ï —Å–∏–≥–Ω–∞–ª–∞\n`;
      message += `‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–±–æ–±—â–µ–Ω–∏–π —Ç–∏–ø–∞ "–æ–±—ã—á–Ω–æ", "–≤—Å–µ–≥–¥–∞"\n`;
    } else {
      if (countQuality > 0 && totalQuality / countQuality < 60) {
        message += `‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –º–æ–º–µ–Ω—Ç–∞\n`;
        message += `‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–µ–Ω—Å–æ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—á—Ç–æ –≤–∏–¥–µ–ª–∏/—Å–ª—ã—à–∞–ª–∏)\n`;
      } else {
        message += `‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ\n`;
        message += `‚Ä¢ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç–æ—á–Ω–æ –æ—Ç—Ä–∞–∂–∞—é—Ç –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç\n`;
      }
    }

    message += `\nüí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /survey –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞`;

    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });

    // –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    if (!isStillTraining && countQuality > 0 && totalQuality / countQuality > 70) {
      setTimeout(() => {
        bot.sendMessage(chatId, 
          `üí° **–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã?**\n\n` +
          `–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –†–∞—Å—Å–µ–ª–∞ –•–µ—Ä–ª–±–µ—Ä—Ç–∞ –ø–æ–∫–∞–∑–∞–ª–∏, —á—Ç–æ —Ç–æ–ª—å–∫–æ 3% –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ` +
          `–ª—é–¥–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ "—Å–ª—ã—à–∞—Ç" –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≥–æ–ª–æ—Å, —Ö–æ—Ç—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.\n\n` +
          `–í—ã –Ω–∞—É—á–∏–ª–∏—Å—å —Ä–∞–∑–ª–∏—á–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –æ—Ç —É–±–µ–∂–¥–µ–Ω–∏–π –æ –Ω—ë–º - —ç—Ç–æ —Ä–µ–¥–∫–∏–π –Ω–∞–≤—ã–∫! üåü`
        );
      }, 2000);
    }

  } catch (error) {
    console.error('Error showing stats:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
}

module.exports = {
  command: 'stats',
  description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å',
  execute: async (bot, msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    
    await showStats(bot, chatId, telegramId);
  }
};