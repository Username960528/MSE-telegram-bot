const User = require('../models/User');
const Response = require('../models/Response');
const config = require('../config/hurlburt');
const MomentValidator = require('../validators/momentValidator');
const goldenStandard = require('../validators/goldenStandard');
const aiValidator = require('../services/ai-validator-service');
const FollowUpStrategy = require('../strategies/followUpStrategy');
const PatternFeedback = require('../helpers/patternFeedback');
const GamificationService = require('../services/gamification-service');
const { recordUserResponse, recordTrainingCompletion, recordTrainingDropout, recordIllusionDetected } = require('../utils/metrics');
const addressForms = require('../utils/addressForms');

const surveyStates = new Map();
const validator = new MomentValidator();
const momentValidator = new MomentValidator();
const followUpStrategy = new FollowUpStrategy();
const patternFeedback = new PatternFeedback();

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
const TRAINING_DAYS = config.training.DAYS;

// –û–±—É—á–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ –•–µ—Ä–ª–±–µ—Ä—Ç–∞
const trainingMessages = [
  {
    day: 1,
    message: `üéì –î–µ–Ω—å 1: –£—á–∏–º—Å—è –ª–æ–≤–∏—Ç—å –º–æ–º–µ–Ω—Ç

–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —Å–∏–≥–Ω–∞–ª - —ç—Ç–æ —Ñ–æ—Ç–æ–≤—Å–ø—ã—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–≤–µ—â–∞–µ—Ç –≤–∞—à–µ —Å–æ–∑–Ω–∞–Ω–∏–µ –Ω–∞ –¥–æ–ª—é —Å–µ–∫—É–Ω–¥—ã.

–ß—Ç–æ –≤—ã —É–≤–∏–¥–µ–ª–∏ –≤ —ç—Ç–æ–π –≤—Å–ø—ã—à–∫–µ? –ù–µ —á—Ç–æ –±—ã–ª–æ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ, –∞ —á—Ç–æ –ü–†–Ø–ú–û –í –¢–û–¢ –ú–û–ú–ï–ù–¢.

‚ùå –ù–µ–≤–µ—Ä–Ω–æ: "–Ø —Ä–∞–±–æ—Ç–∞–ª –∏ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª —É—Å—Ç–∞–ª–æ—Å—Ç—å"
‚úÖ –í–µ—Ä–Ω–æ: "–°–º–æ—Ç—Ä–µ–ª –Ω–∞ —Å–ª–æ–≤–æ 'deadline' –≤ –ø–∏—Å—å–º–µ –∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª —Å–∂–∞—Ç–∏–µ –≤ –≥—Ä—É–¥–∏"`
  },
  {
    day: 2,
    message: `üéì –î–µ–Ω—å 2: –†–∞–∑–ª–∏—á–∞–µ–º –æ–ø—ã—Ç –∏ —Ç–µ–æ—Ä–∏–∏ –æ –Ω—ë–º

–í—á–µ—Ä–∞ –º–Ω–æ–≥–∏–µ –æ–ø–∏—Å—ã–≤–∞–ª–∏ —Ç–æ, —á—Ç–æ –î–£–ú–ê–Æ–¢ –æ —Å–≤–æ—ë–º –æ–ø—ã—Ç–µ. –°–µ–≥–æ–¥–Ω—è –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–π–º–∞—Ç—å –°–ê–ú –æ–ø—ã—Ç.

–ü—Ä–∏–º–µ—Ä –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π —á—Ç–µ–Ω–∏—è:
‚ùå "–Ø —á–∏—Ç–∞–ª, –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞—è —Å–ª–æ–≤–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –≥–æ–ª–æ—Å–æ–º"
‚úÖ "–í–∏–¥–µ–ª –æ–±—Ä–∞–∑ –∫—Ä–∞—Å–Ω–æ–≥–æ —è–±–ª–æ–∫–∞, –∫–æ–≥–¥–∞ –≥–ª–∞–∑–∞ –±—ã–ª–∏ –Ω–∞ —Å–ª–æ–≤–µ '—è–±–ª–æ–∫–æ'"

–ü–æ–º–Ω–∏—Ç–µ: 97% –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ù–ï–¢ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≥–æ–ª–æ—Å–∞!`
  },
  {
    day: 3,
    message: `üéì –î–µ–Ω—å 3: –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è

–í—ã —É–∂–µ –ª—É—á—à–µ —Ä–∞–∑–ª–∏—á–∞–µ—Ç–µ –º–æ–º–µ–Ω—Ç –æ—Ç –æ–±–æ–±—â–µ–Ω–∏–π. –°–µ–≥–æ–¥–Ω—è –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:

üéØ –û–ø—ã—Ç —á–∞—Å—Ç–æ –ø—Ä–æ—â–µ, —á–µ–º –º—ã –¥—É–º–∞–µ–º
üéØ –ú–æ–∂–µ—Ç –±—ã—Ç—å "–Ω–∏—á–µ–≥–æ" - –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
üéØ –î–æ–≤–µ—Ä—è–π—Ç–µ –ø–µ—Ä–≤–æ–º—É –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—é, –Ω–µ –¥–æ–¥—É–º—ã–≤–∞–π—Ç–µ

–ü–æ—Å–ª–µ —Å–µ–≥–æ–¥–Ω—è –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—É—Ç –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Ü–µ–Ω–Ω—ã–º–∏!`
  }
];

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –•–µ—Ä–ª–±–µ—Ä—Ç–∞
const questions = [
  {
    id: 'moment_capture',
    text: 'üéØ –°–¢–û–ü! –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –≤ —Ç–≤–æ—ë–º —Å–æ–∑–Ω–∞–Ω–∏–∏ –ò–ú–ï–ù–ù–û –≤ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–∞?\n\n' +
          '–û–ø–∏—à–∏ –Ω–µ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–Ω—è, –∞ —á—Ç–æ –±—ã–ª–æ –ü–†–Ø–ú–û –í –¢–û–¢ –ú–û–ú–ï–ù–¢.',
    type: 'text',
    validation: 'pristine',
    priority: true
  },
  {
    id: 'challenge',
    text: 'üìà –í –¢–û–¢ –ú–û–ú–ï–ù–¢ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞:',
    type: 'scale',
    scale: { min: 0, max: 9, minLabel: '–û—á–µ–Ω—å –ª–µ–≥–∫–æ–π', maxLabel: '–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ–π' }
  },
  {
    id: 'skill',
    text: 'üõ† –í –¢–û–¢ –ú–û–ú–ï–ù–¢ —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –±—ã–ª–∏:',
    type: 'scale',
    scale: { min: 0, max: 9, minLabel: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏', maxLabel: '–ë–æ–ª–µ–µ —á–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏' }
  },
  {
    id: 'concentration',
    text: 'üéØ –ù–∞—Å–∫–æ–ª—å–∫–æ —Ç—ã –±—ã–ª —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω –í –¢–û–¢ –ú–û–ú–ï–ù–¢?',
    type: 'scale',
    scale: { min: 0, max: 9, minLabel: '–°–æ–≤—Å–µ–º –Ω–µ —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω', maxLabel: '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω' }
  },
  {
    id: 'mood',
    text: 'üåà –ö–∞–∫–æ–µ –±—ã–ª–æ —Ç–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –í –ú–û–ú–ï–ù–¢ —Å–∏–≥–Ω–∞–ª–∞?',
    type: 'scale',
    scale: { min: 1, max: 7, minLabel: '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ', maxLabel: '–û—Ç–ª–∏—á–Ω–æ–µ' }
  },
  {
    id: 'energy',
    text: '‚ö° –£—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –í –¢–û–¢ –ú–û–ú–ï–ù–¢:',
    type: 'scale',
    scale: { min: 1, max: 7, minLabel: '–ò—Å—Ç–æ—â—ë–Ω', maxLabel: '–ü–æ–ª–æ–Ω —Å–∏–ª' }
  },
  {
    id: 'stress',
    text: 'üò∞ –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –í –¢–û–¢ –ú–û–ú–ï–ù–¢:',
    type: 'scale',
    scale: { min: 1, max: 7, minLabel: '–†–∞—Å—Å–ª–∞–±–ª–µ–Ω', maxLabel: '–û—á–µ–Ω—å –Ω–∞–ø—Ä—è–∂—ë–Ω' }
  },
  {
    id: 'currentActivity',
    text: 'üìù –ß—Ç–æ –ö–û–ù–ö–†–ï–¢–ù–û —Ç—ã –¥–µ–ª–∞–ª? (–Ω–µ "—Ä–∞–±–æ—Ç–∞–ª", –∞ "–ø–µ—á–∞—Ç–∞–ª email –ò–≤–∞–Ω—É –æ –ø—Ä–æ–µ–∫—Ç–µ X")',
    type: 'text',
    validation: 'specific'
  },
  {
    id: 'currentCompanion',
    text: 'üë• –° –∫–µ–º —Ç—ã –±—ã–ª –í –¢–û–¢ –ú–û–ú–ï–ù–¢? (–∏–ª–∏ "–æ–¥–∏–Ω")',
    type: 'text'
  }
];

// Follow-up –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ FollowUpStrategy

// –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
function validateResponse(response, type, context = {}) {
  return validator.validate(response, type, context);
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–Ω—è –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserTrainingDay(user) {
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π, –∫–æ–≥–¥–∞ –±—ã–ª–∏ –æ—Ç–≤–µ—Ç—ã
  const responses = await Response.find({ userId: user._id })
    .sort({ timestamp: 1 })
    .select('timestamp');

  if (responses.length === 0) return 1;

  const uniqueDays = new Set();
  responses.forEach(r => {
    const date = new Date(r.timestamp);
    uniqueDays.add(`${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`);
  });

  return Math.min(uniqueDays.size + 1, 4); // –ú–∞–∫—Å–∏–º—É–º 4 (–ø–æ—Å–ª–µ 3 –¥–Ω–µ–π –æ–±—É—á–µ–Ω–∏—è)
}

// –†–∞—Å—á—ë—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
function calculateDataQuality(responses) {
  return validator.calculateOverallQuality(responses);
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞
async function startSurvey(bot, chatId, telegramId, notificationId = null) {
  try {
    let user = await User.findOne({ telegramId });
    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è
    const trainingDay = await getUserTrainingDay(user);
    const isTraining = trainingDay <= TRAINING_DAYS;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—É—á–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (isTraining && trainingMessages[trainingDay - 1]) {
      await bot.sendMessage(chatId, trainingMessages[trainingDay - 1].message);
      await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ—á—Ç–µ–Ω–∏—è
    }

    const response = new Response({
      userId: user._id,
      telegramId: telegramId,
      notificationSentAt: notificationId ? new Date() : null,
      responseStartedAt: new Date(),
      responses: {},
      metadata: {
        trainingDay: trainingDay,
        isTraining: isTraining
      }
    });

    const surveyState = {
      responseId: response._id,
      currentQuestion: 0,
      responses: {},
      startTime: Date.now(),
      validationAttempts: {},
      followUpPending: false,
      trainingDay: trainingDay,
      qualityScore: 0
    };

    surveyStates.set(telegramId, surveyState);
    await response.save();

    // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ - –º–æ–º–µ–Ω—Ç
    await askQuestion(bot, chatId, telegramId, 0);
  } catch (error) {
    console.error('Error starting survey:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ follow-up –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
async function getFollowUpQuestion(context) {
  return await followUpStrategy.getNextQuestion(context);
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
async function askQuestion(bot, chatId, telegramId, questionIndex) {
  const state = surveyStates.get(telegramId);
  if (!state) return;

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  const user = await User.findOne({ telegramId });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω—É–∂–µ–Ω –ª–∏ follow-up –≤–æ–ø—Ä–æ—Å
  if (!state.followUpPending && Object.keys(state.responses).length > 0) {
    const context = {
      responses: state.responses,
      currentQuestion: questionIndex,
      userId: telegramId,
      trainingDay: state.trainingDay
    };
    
    const followUpQuestion = await getFollowUpQuestion(context);
    if (followUpQuestion && !state.askedFollowUps?.includes(followUpQuestion.clarifies)) {
      state.followUpPending = true;
      state.currentFollowUp = followUpQuestion;
      if (!state.askedFollowUps) state.askedFollowUps = [];
      state.askedFollowUps.push(followUpQuestion.clarifies);
      
      await bot.sendMessage(chatId, followUpQuestion.text, {
        reply_markup: {
          inline_keyboard: [[{ text: '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'survey_skip_followup' }]]
        }
      });
      return;
    }
  }

  if (questionIndex >= questions.length) {
    await completeSurvey(bot, chatId, telegramId);
    return;
  }

  const question = questions[questionIndex];
  state.currentQuestion = questionIndex;

  if (question.type === 'scale') {
    const text = addressForms.formatForUser(
      `${question.text}\n\n${question.scale.minLabel} ‚Üê ‚Üí ${question.scale.maxLabel}`,
      user
    );
    const keyboardOptions = createScaleKeyboard(question.scale.min, question.scale.max);
    await bot.sendMessage(chatId, text, keyboardOptions);
  } else {
    const questionText = addressForms.formatForUser(question.text, user);
    await bot.sendMessage(chatId, questionText, {
      reply_markup: {
        inline_keyboard: [[{ text: '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'survey_skip' }]]
      }
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π (–∑–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
async function handleTextResponseWithGoldenStandard(bot, msg, state) {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;
  const question = questions[state.currentQuestion];
  
  if (question && question.type === 'text') {
    const responseStartTime = Date.now();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const user = await User.findOne({ telegramId });
    const context = {
      trainingDay: user.currentTrainingDay || 1,
      previousResponses: Object.values(state.responses).map(r => r.text || r.value),
      currentActivity: state.responses.currentActivity?.text,
      questionType: question.validation
    };
    
    // 1. –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ momentValidator
    const baseValidation = momentValidator.validate(
      msg.text, 
      question.validation || 'general',
      context
    );
    
    // 2. –£–ª—É—á—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç
    const enhancedValidation = goldenStandard.enhance(
      baseValidation,
      msg.text,
      context
    );
    
    // 3. –ì–ª—É–±–æ–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ò–ò (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –∏ –Ω—É–∂–Ω–æ)
    let aiValidation = null;
    if (config.ai && config.ai.enableSmartValidation && 
        enhancedValidation.score > 30 && 
        enhancedValidation.score < 80) {
      
      aiValidation = await aiValidator.validate(msg.text, {
        ...context,
        detectedContext: enhancedValidation.goldenStandard?.detectedContext
      });
    }
    
    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const finalValidation = combineValidations(
      enhancedValidation, 
      aiValidation
    );
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const isAccepted = await processValidationResult(
      bot, 
      chatId, 
      msg.text,
      finalValidation, 
      state,
      context
    );
    
    if (isAccepted) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
      state.responses[question.id] = {
        text: msg.text,
        timestamp: new Date(),
        responseTime: Date.now() - responseStartTime,
        quality: finalValidation.quality,
        score: finalValidation.score,
        validation: {
          base: baseValidation.score,
          golden: enhancedValidation.goldenStandard?.score,
          ai: aiValidation?.score,
          final: finalValidation.score
        },
        phenomena: finalValidation.phenomena,
        goldenStandard: enhancedValidation.goldenStandard
      };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ follow-up –≤–æ–ø—Ä–æ—Å
      const followUp = await checkForFollowUp(bot, chatId, state, context);
      
      if (followUp) {
        state.pendingFollowUp = followUp;
        state.expectingFollowUp = true;
        await bot.sendMessage(chatId, followUp.text);
        return true;
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ follow-up –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      state.followUpCount = 0;
      await askQuestion(bot, chatId, telegramId, state.currentQuestion + 1);
    }
    
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—Ç –ª–∏ —ç—Ç–æ –Ω–∞ follow-up
  if (state.expectingFollowUp && state.pendingFollowUp) {
    await handleFollowUpResponse(bot, msg, state);
    return true;
  }
  
  return false;
}

// –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
async function handleTextResponse(bot, msg, state) {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;

  // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∑–æ–ª–æ—Ç–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
  if (config.validation && config.validation.useGoldenStandard) {
    return await handleTextResponseWithGoldenStandard(bot, msg, state);
  }

  // –ï—Å–ª–∏ —ç—Ç–æ follow-up –æ—Ç–≤–µ—Ç
  if (state.followUpPending) {
    state.responses[`followup_${Date.now()}`] = msg.text;
    state.followUpPending = false;
    await bot.sendMessage(chatId, '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ!');
    await askQuestion(bot, chatId, telegramId, state.currentQuestion + 1);
    return true;
  }

  const question = questions[state.currentQuestion];

  if (question && question.type === 'text') {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
    if (question.validation) {
      const context = {
        trainingDay: state.trainingDay,
        previousResponses: Object.values(state.responses).filter(r => typeof r === 'string')
      };
      const validation = validateResponse(msg.text, question.validation, context);

      if (!validation.valid) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        const attemptKey = `q_${state.currentQuestion}`;
        state.validationAttempts[attemptKey] = (state.validationAttempts[attemptKey] || 0) + 1;

        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç
        if (state.validationAttempts[attemptKey] >= 2) {
          state.responses[question.id] = msg.text;
          state.qualityScore -= 10; // –°–Ω–∏–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
          await bot.sendMessage(chatId,
            '‚úÖ –û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ —Ç–æ—á–Ω–æ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–∏!'
          );
          await askQuestion(bot, chatId, telegramId, state.currentQuestion + 1);
        } else {
          // –ü—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å
          await bot.sendMessage(chatId, validation.feedback);
        }
        return true;
      }
    }

    // –û—Ç–≤–µ—Ç –ø—Ä–æ—à—ë–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    state.responses[question.id] = msg.text;
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    recordUserResponse(telegramId);

    // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∑–∞ —Ö–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç
    if (question.validation && msg.text.length > 30) {
      const encouragements = [
        '‚ú® –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ!',
        'üëç –•–æ—Ä–æ—à–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞!',
        'üéØ –¢–æ—á–Ω–æ —Å—Ö–≤–∞—á–µ–Ω –º–æ–º–µ–Ω—Ç!',
        'üíé –¶–µ–Ω–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ!'
      ];
      await bot.sendMessage(chatId, encouragements[Math.floor(Math.random() * encouragements.length)]);
    } else {
      await bot.sendMessage(chatId, '‚úÖ –û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω');
    }

    await askQuestion(bot, chatId, telegramId, state.currentQuestion + 1);
    return true;
  }
  return false;
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–∞—á–µ—Å—Ç–≤–∞
async function completeSurvey(bot, chatId, telegramId) {
  try {
    const state = surveyStates.get(telegramId);
    if (!state) return;

    const response = await Response.findById(state.responseId);
    if (!response) return;

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    const qualityScore = calculateDataQuality(state.responses);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º Flow —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    let flowState = null;
    if (state.responses.challenge !== undefined && state.responses.skill !== undefined) {
      flowState = validator.detectFlowState(state.responses.challenge, state.responses.skill);
    }
    
    // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —Ñ–µ–Ω–æ–º–µ–Ω—ã –•–µ—Ä–ª–±–µ—Ä—Ç–∞
    const phenomenaDetected = [];
    if (state.responses.moment_capture) {
      // Handle both string and object formats
      const momentCapture = state.responses.moment_capture;
      const text = typeof momentCapture === 'string' ? momentCapture : momentCapture.text;
      phenomenaDetected.push(...validator.detectHurlburtPhenomena(text));
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å —Ç–µ–∫—É—â–µ–π —Å—Ö–µ–º–æ–π
    response.responses = {
      mood: state.responses.mood,
      energy: state.responses.energy,
      stress: state.responses.stress,
      focus: state.responses.concentration, // –ú–∞–ø–∏–º concentration –Ω–∞ focus
      currentThoughts: typeof state.responses.moment_capture === 'string' ? state.responses.moment_capture : state.responses.moment_capture?.text,
      currentActivity: typeof state.responses.currentActivity === 'string' ? state.responses.currentActivity : state.responses.currentActivity?.text || '',
      currentEmotions: typeof state.responses.currentCompanion === 'string' ? state.responses.currentCompanion : state.responses.currentCompanion?.text || ''
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ metadata
    response.metadata = {
      ...response.metadata,
      // Flow –¥–∞–Ω–Ω—ã–µ
      challenge: state.responses.challenge,
      skill: state.responses.skill,
      flowState: flowState,
      concentration: state.responses.concentration,
      
      // –ö–∞—á–µ—Å—Ç–≤–æ –∏ –æ–±—É—á–µ–Ω–∏–µ
      dataQualityScore: qualityScore,
      trainingDay: state.trainingDay,
      isTraining: state.trainingDay <= TRAINING_DAYS,
      
      // –§–µ–Ω–æ–º–µ–Ω—ã –•–µ—Ä–ª–±–µ—Ä—Ç–∞
      phenomenaDetected: phenomenaDetected,
      
      // Follow-up –¥–∞–Ω–Ω—ã–µ
      followUpAnswers: Object.entries(state.responses)
        .filter(([key]) => key.startsWith('followup_'))
        .map(([key, value]) => ({ timestamp: key.split('_')[1], answer: value })),
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      currentCompanion: typeof state.responses.currentCompanion === 'string' ? state.responses.currentCompanion : state.responses.currentCompanion?.text || '',
      responseTime: Math.round((Date.now() - state.startTime) / 1000),
      validationAttempts: state.validationAttempts,
      
      // Required schema fields with defaults
      dataReliability: {
        reliabilityScore: qualityScore,
        junkDataFlags: [],
        excludeFromAnalysis: false
      },
      learningProgress: {
        conceptsUnderstood: [],
        illusionsBroken: [],
        skillsAcquired: [],
        breakthroughMoments: []
      }
    };

    response.responseCompletedAt = new Date();
    await response.save();

    // –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await User.findOne({ telegramId });
    if (user) {
      const gamificationResult = await GamificationService.processResponse(user, response);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const motivationalMessages = GamificationService.generateMotivationalMessage(user, gamificationResult);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
      if (motivationalMessages.length > 0) {
        setTimeout(() => {
          const gamificationMessage = motivationalMessages.join('\n');
          bot.sendMessage(chatId, gamificationMessage);
        }, 2000);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –∏–Ω—Å–∞–π—Ç –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–∞ (–¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
      if (user.totalResponses >= 10 && state.trainingDay > TRAINING_DAYS) {
        setTimeout(async () => {
          try {
            const AIInsightsService = require('../services/ai-insights-service');
            const quickInsight = await AIInsightsService.generateQuickInsight(user._id);
            
            if (quickInsight && quickInsight.message) {
              await bot.sendMessage(chatId, 
                `üí° <b>–ë—ã—Å—Ç—Ä—ã–π –∏–Ω—Å–∞–π—Ç:</b>\n${quickInsight.emoji} ${quickInsight.message}\n\n` +
                `–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /insights`, 
                { parse_mode: 'HTML' }
              );
            }
          } catch (error) {
            console.error('Error generating quick insight:', error);
          }
        }, 4000);
      }
    }

    surveyStates.delete(telegramId);

    // Reset escalation since user completed the survey
    if (global.notificationScheduler) {
      await global.notificationScheduler.resetEscalation(telegramId);
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–Ω–µ follow-up)
    const mainResponses = Object.keys(state.responses).filter(key => 
      !key.startsWith('followup_')
    );
    const responseCount = mainResponses.length;
    const responseTime = Math.round((Date.now() - state.startTime) / 1000);
    
    // –°—á–∏—Ç–∞–µ–º follow-up –æ—Ç–¥–µ–ª—å–Ω–æ
    const followUpCount = Object.keys(state.responses).filter(key => 
      key.startsWith('followup_')
    ).length;

    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    let feedbackMessage = '';
    if (state.trainingDay <= TRAINING_DAYS) {
      feedbackMessage = `\n\nüìö –î–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è ${state.trainingDay} –∏–∑ ${TRAINING_DAYS}`;
      if (qualityScore > 60) {
        feedbackMessage += '\nüëç –í—ã –¥–µ–ª–∞–µ—Ç–µ –æ—Ç–ª–∏—á–Ω—ã–µ —É—Å–ø–µ—Ö–∏!';
      } else {
        feedbackMessage += '\nüí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–∏ –º–æ–º–µ–Ω—Ç–∞';
      }
    } else {
      feedbackMessage = '\n\nüéì –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã.';
    }

    if (qualityScore >= 80) {
      feedbackMessage += '\nüåü –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π!';
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Flow —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if (flowState) {
      const flowMessages = {
        flow: 'üåä –í—ã –±—ã–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ—Ç–æ–∫–∞!',
        anxiety: 'üò∞ –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —Å–ª–æ–∂–Ω–æ–≤–∞—Ç–∞',
        boredom: 'üò¥ –ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º –ª—ë–≥–∫–æ–π',
        control: 'üòé –í—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞–ª–∏ —Å–∏—Ç—É–∞—Ü–∏—é',
        arousal: 'üî• –ë—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏ –≤—ã–∑—ã–≤–∞—é—â–µ',
        worry: 'üòü –ù–µ–º–Ω–æ–≥–æ –±–µ—Å–ø–æ–∫–æ–π–Ω–æ',
        apathy: 'üòê –ù–∏–∑–∫–∞—è –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç—å',
        relaxation: 'üå¥ –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'
      };
      if (flowMessages[flowState]) {
        feedbackMessage += `\n${flowMessages[flowState]}`;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö
    let patternInsights = '';
    if (state.trainingDay > TRAINING_DAYS) {
      try {
        const user = await User.findOne({ telegramId });
        if (user) {
          patternInsights = await patternFeedback.generateIterativeFeedback(user._id, response) || '';
        }
      } catch (error) {
        console.error('Error generating pattern feedback:', error);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    let scientificFact = '';
    if (qualityScore >= 70 && state.trainingDay > TRAINING_DAYS) {
      const facts = config.scientificFacts;
      const randomFact = facts[Math.floor(Math.random() * facts.length)];
      scientificFact = `\n\nüî¨ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: ${randomFact.fact}`;
    }

    await bot.sendMessage(
      chatId,
      `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\n` +
      `üìä –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: ${responseCount} –∏–∑ ${questions.length}\n` +
      (followUpCount > 0 ? `üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è: ${followUpCount}\n` : '') +
      `‚è± –í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ${responseTime} —Å–µ–∫—É–Ω–¥\n` +
      `üìà –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: ${qualityScore}%` +
      feedbackMessage +
      patternInsights +
      scientificFact +
      `\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.` +
      (state.trainingDay > TRAINING_DAYS && !user?.settings?.pushover?.enabled ? 
        `\n\nüí° –°–æ–≤–µ—Ç: –ù–∞—Å—Ç—Ä–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—ã (/pushover) –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏!` : ''),
      {
        reply_markup: {
          keyboard: [
            ['üìö –ü–æ–º–æ—â—å', 'üìä –ü–∞–º—è—Ç–∫–∞'],
            ['üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'üìä –†–µ–π—Ç–∏–Ω–≥–∏'],
            ['üß† –ò–Ω—Å–∞–π—Ç—ã', 'üì∞ –ù–æ–≤–æ—Å—Ç–∏'],
            ['üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
          ],
          resize_keyboard: true
        }
      }
    );

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    if (state.trainingDay === 3) {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
      recordTrainingCompletion(qualityScore);
      
      setTimeout(() => {
        bot.sendMessage(chatId,
          `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ó–∞–≤—Ç—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö.\n\n` +
          `–í—ã –Ω–∞—É—á–∏–ª–∏—Å—å —Ä–∞–∑–ª–∏—á–∞—Ç—å:\n` +
          `‚úì –ú–æ–º–µ–Ω—Ç –æ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π\n` +
          `‚úì –û–ø—ã—Ç –æ—Ç —Ç–µ–æ—Ä–∏–π –æ –Ω—ë–º\n` +
          `‚úì –ö–æ–Ω–∫—Ä–µ—Ç–∏–∫—É –æ—Ç –æ–±–æ–±—â–µ–Ω–∏–π\n\n` +
          `–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω–Ω—ã–º–∏! üíé`
        );
      }, 3000);
    }
  } catch (error) {
    console.error('Error completing survey:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.');
  }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
function createScaleKeyboard(min, max) {
  const keyboard = [];
  const buttonsPerRow = max - min + 1 > 7 ? 5 : 7;
  let row = [];

  for (let i = min; i <= max; i++) {
    row.push({ text: i.toString(), callback_data: `survey_scale_${i}` });

    if (row.length === buttonsPerRow || i === max) {
      keyboard.push([...row]);
      row = [];
    }
  }

  keyboard.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'survey_cancel' }]);

  return {
    reply_markup: {
      inline_keyboard: keyboard
    }
  };
}

module.exports = {
  command: 'survey',
  description: 'Start ESM survey',
  questions,
  surveyStates,
  askQuestion,

  execute: async (bot, msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;

    await startSurvey(bot, chatId, telegramId);
  },

  handleCallback: async (bot, query) => {
    const chatId = query.message.chat.id;
    const telegramId = query.from.id;
    const data = query.data;

    const state = surveyStates.get(telegramId);
    if (!state) {
      await bot.answerCallbackQuery(query.id, { text: '–û–ø—Ä–æ—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' });
      return;
    }

    if (data === 'survey_cancel') {
      surveyStates.delete(telegramId);
      await bot.answerCallbackQuery(query.id);
      await bot.editMessageText(
        '‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω',
        { chat_id: chatId, message_id: query.message.message_id }
      );
      return;
    }

    if (data === 'survey_skip' || data === 'survey_skip_followup') {
      await bot.answerCallbackQuery(query.id);

      if (data === 'survey_skip_followup') {
        state.followUpPending = false;
      }

      await bot.editMessageText(
        '‚è≠ –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω',
        { chat_id: chatId, message_id: query.message.message_id }
      );
      await askQuestion(bot, chatId, telegramId, state.currentQuestion + 1);
      return;
    }

    if (data.startsWith('survey_scale_')) {
      const value = parseInt(data.replace('survey_scale_', ''));
      const question = questions[state.currentQuestion];

      state.responses[question.id] = value;

      await bot.answerCallbackQuery(query.id);
      await bot.editMessageText(
        `${question.text}\n\n‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç: ${value}`,
        { chat_id: chatId, message_id: query.message.message_id }
      );

      await askQuestion(bot, chatId, telegramId, state.currentQuestion + 1);
    }
  },

  handleTextResponse,
  handleTextResponseWithGoldenStandard,
  
  // –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–æ–ª–æ—Ç–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
  combineValidations,
  processValidationResult,
  sendPositiveFeedback,
  sendEducationalFeedback,
  checkForFollowUp,
  handleFollowUpResponse,
  extractPhenomena,
  calculateValidationStats,
  updateUserStats,
  sendCompletionMessage,
  getQualityEmoji,
  checkAndCelebrateProgress
};

/**
 * –§—É–Ω–∫—Ü–∏–∏ –∑–æ–ª–æ—Ç–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞
 */

/**
 * –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
function combineValidations(enhanced, ai) {
  if (!ai) return enhanced;
  
  // –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ò–ò
  const aiWeight = ai.confidence || 0.5;
  const baseWeight = 1 - aiWeight;
  
  const combinedScore = Math.round(
    enhanced.score * baseWeight + 
    ai.score * aiWeight
  );
  
  return {
    ...enhanced,
    score: combinedScore,
    quality: goldenStandard.getQualityLevel ? goldenStandard.getQualityLevel(combinedScore) : 'unknown',
    phenomena: [...new Set([
      ...enhanced.phenomena || [],
      ...(ai.phenomena || [])
    ])],
    aiInsights: ai.suggestions,
    aiConfidence: ai.confidence
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
async function processValidationResult(bot, chatId, text, validation, state, context) {
  const attemptKey = `q_${state.currentQuestion}`;
  state.validationAttempts[attemptKey] = (state.validationAttempts[attemptKey] || 0) + 1;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –æ–±—É—á–µ–Ω–∏—è
  const acceptanceThreshold = context.trainingDay <= 2 ? 30 : 40;
  const maxAttempts = context.trainingDay <= 2 ? 3 : 2;
  
  // –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ - –ø—Ä–∏–Ω–∏–º–∞–µ–º
  if (validation.score >= acceptanceThreshold) {
    await sendPositiveFeedback(bot, chatId, validation, context);
    return true;
  }
  
  // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ - –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å –æ–≥–æ–≤–æ—Ä–∫–æ–π
  if (state.validationAttempts[attemptKey] >= maxAttempts) {
    await bot.sendMessage(
      chatId,
      'üìù –ó–∞–ø–∏—Å–∞–Ω–æ. ' + (validation.feedback || '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!')
    );
    return true;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—É—á–∞—é—â—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
  await sendEducationalFeedback(bot, chatId, validation, context);
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–∏–º–µ—Ä—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
  if (validation.goldenStandard?.similarExamples?.length > 0 && 
      context.trainingDay <= 2) {
    
    const example = validation.goldenStandard.similarExamples[0];
    if (example.quality === 'excellent' || example.quality === 'good') {
      await bot.sendMessage(
        chatId,
        `üí° –ü—Ä–∏–º–µ—Ä ${example.quality === 'excellent' ? '–æ—Ç–ª–∏—á–Ω–æ–≥–æ' : '—Ö–æ—Ä–æ—à–µ–≥–æ'} –æ—Ç–≤–µ—Ç–∞:\n` +
        `"${example.text}"\n\n` +
        `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —Å –±–æ–ª—å—à–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–æ–π.`
      );
    }
  }
  
  return false;
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 */
async function sendPositiveFeedback(bot, chatId, validation, context) {
  let message = '';
  
  if (validation.quality === 'pristine' || validation.quality === 'excellent') {
    message = 'üåü –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! ';
    
    // –û–±—ä—è—Å–Ω—è–µ–º –ø–æ—á–µ–º—É —ç—Ç–æ —Ö–æ—Ä–æ—à–æ –≤ –¥–Ω–∏ –æ–±—É—á–µ–Ω–∏—è
    if (context.trainingDay <= 3) {
      const patterns = validation.goldenStandard?.matchedPatterns?.positive || [];
      if (patterns.length > 0) {
        const patternNames = patterns.slice(0, 3).map(p => p.name).join(', ');
        message += `\n\n–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–º: ${patternNames}`;
      }
    }
  } else if (validation.quality === 'good') {
    message = '‚úÖ –•–æ—Ä–æ—à–µ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ!';
  } else {
    message = 'üëç –ó–∞–ø–∏—Å–∞–Ω–æ.';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ñ–∞–∫—Ç
  if (Math.random() < 0.3 && validation.score > 70 && config.scientificFacts) {
    const fact = config.scientificFacts[
      Math.floor(Math.random() * config.scientificFacts.length)
    ];
    if (fact && fact.fact) {
      message += `\n\nüí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç: ${fact.fact}`;
    }
  }
  
  await bot.sendMessage(chatId, message);
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—É—á–∞—é—â–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 */
async function sendEducationalFeedback(bot, chatId, validation, context) {
  let message = validation.feedback || 
    'üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ. –ß—Ç–æ –ò–ú–ï–ù–ù–û –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ?';
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
  if (validation.goldenStandard?.matchedPatterns?.negative?.length > 0) {
    const mainIssue = validation.goldenStandard.matchedPatterns.negative[0];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–±–ª–µ–º—ã
    switch (mainIssue.category) {
      case 'garbage':
        message += '\n\n‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ: –æ–±–æ–±—â–µ–Ω–∏–π –∏ –æ—Ü–µ–Ω–æ–∫';
        message += '\n‚úÖ –û–ø–∏—à–∏—Ç–µ: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–æ–º–µ–Ω—Ç';
        break;
      case 'illusion':
        if (mainIssue.name === 'reading_voice_illusion') {
          message += '\n\nüìä –§–∞–∫—Ç: –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ 97% —á—Ç–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ë–ï–ó –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≥–æ–ª–æ—Å–∞!';
        }
        break;
    }
  }
  
  await bot.sendMessage(chatId, message);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ follow-up –≤–æ–ø—Ä–æ—Å–∞
 */
async function checkForFollowUp(bot, chatId, state, context) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é follow-up
  const followUp = await followUpStrategy.getNextQuestion({
    responses: state.responses,
    currentQuestion: state.currentQuestion,
    userId: state.userId,
    trainingDay: context.trainingDay
  });
  
  // –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ –¥–∞–ª–∞ –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ–±—É–µ–º –ò–ò
  if (!followUp && config.ai && config.ai.enableSmartValidation && aiValidator.generateFollowUp) {
    const lastResponse = Object.values(state.responses).pop();
    if (lastResponse?.text) {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ follow-up –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!state.followUpCount) state.followUpCount = 0;
      
      const aiFollowUp = await aiValidator.generateFollowUp(
        lastResponse.text,
        {
          detectedContext: lastResponse.goldenStandard?.detectedContext,
          quality: lastResponse.quality,
          followUpCount: state.followUpCount
        }
      );
      
      if (aiFollowUp) {
        state.followUpCount++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        return {
          text: aiFollowUp,
          source: 'ai',
          clarifies: 'ai_generated'
        };
      }
    }
  }
  
  return followUp;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ follow-up –≤–æ–ø—Ä–æ—Å
 */
async function handleFollowUpResponse(bot, msg, state) {
  const chatId = msg.chat.id;
  const followUp = state.pendingFollowUp;
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
  const analysis = followUpStrategy.analyzeFollowUpResponse(
    msg.text,
    followUp,
    { responses: state.responses }
  );
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º follow-up –æ—Ç–≤–µ—Ç
  const lastQuestionId = Object.keys(state.responses).pop();
  if (state.responses[lastQuestionId]) {
    state.responses[lastQuestionId].followUp = {
      question: followUp.text,
      answer: msg.text,
      analysis: analysis
    };
  }
  
  // –î–∞—ë–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
  if (analysis.illusionBroken) {
    await bot.sendMessage(
      chatId,
      'üí° –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–º–µ—Ç–∏–ª–∏ —Ä–∞–∑–Ω–∏—Ü—É. ' + 
      (analysis.recommendations?.[0] || '')
    );
  } else if (analysis.insightGained) {
    await bot.sendMessage(chatId, '‚úÖ –•–æ—Ä–æ—à–µ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ!');
  } else {
    await bot.sendMessage(chatId, 'üëç –ü–æ–Ω—è—Ç–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ.');
  }
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  state.expectingFollowUp = false;
  state.pendingFollowUp = null;
  state.followUpCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  const telegramId = msg.from.id;
  await askQuestion(bot, chatId, telegramId, state.currentQuestion + 1);
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */

function extractPhenomena(responses) {
  const phenomena = [];
  
  Object.values(responses).forEach(r => {
    if (r.phenomena) {
      phenomena.push(...r.phenomena);
    }
  });
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã
  const counts = {};
  phenomena.forEach(p => {
    counts[p] = (counts[p] || 0) + 1;
  });
  
  return counts;
}

function calculateValidationStats(responses) {
  const stats = {
    averageScore: 0,
    averageResponseTime: 0,
    validationAttempts: 0,
    followUpsCompleted: 0
  };
  
  let scoreSum = 0;
  let timeSum = 0;
  let count = 0;
  
  Object.values(responses).forEach(r => {
    if (r.score !== undefined) {
      scoreSum += r.score;
      count++;
    }
    if (r.responseTime) {
      timeSum += r.responseTime;
    }
    if (r.followUp) {
      stats.followUpsCompleted++;
    }
  });
  
  stats.averageScore = count > 0 ? Math.round(scoreSum / count) : 0;
  stats.averageResponseTime = count > 0 ? Math.round(timeSum / count) : 0;
  
  return stats;
}

async function updateUserStats(user, response) {
  if (!user || !response) return;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
  const newQualityEntry = {
    date: new Date(),
    score: response.dataQualityScore || 0,
    responsesCount: Object.keys(response.responses || {}).length
  };
  
  if (!user.qualityHistory) user.qualityHistory = [];
  user.qualityHistory.push(newQualityEntry);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
  const recentScores = user.qualityHistory
    .slice(-10)
    .map(h => h.score);
  
  if (recentScores.length > 0) {
    user.averageDataQuality = recentScores.reduce((a, b) => a + b, 0) / recentScores.length;
  }
  
  user.totalResponses = (user.totalResponses || 0) + 1;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å –ò–ò –∞–Ω–∞–ª–∏–∑
  if (config.ai && config.ai.enablePatternDetection && user.totalResponses >= 10 && aiValidator.analyzeUserPatterns) {
    try {
      const patterns = await aiValidator.analyzeUserPatterns(
        user._id,
        user.qualityHistory.slice(-20)
      );
      
      if (patterns) {
        user.commonPatterns = patterns;
      }
    } catch (error) {
      console.error('Error analyzing user patterns:', error);
    }
  }
  
  await user.save();
}

async function sendCompletionMessage(bot, chatId, state, quality, recommendations) {
  const responseCount = Object.keys(state.responses).length;
  const responseTime = Math.round((Date.now() - state.startTime) / 1000);
  
  let message = `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\n`;
  message += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
  message += `‚îú –û—Ç–≤–µ—Ç–æ–≤: ${responseCount} –∏–∑ ${questions.length}\n`;
  message += `‚îú –í—Ä–µ–º—è: ${responseTime} —Å–µ–∫\n`;
  message += `‚îî –ö–∞—á–µ—Å—Ç–≤–æ: ${getQualityEmoji(quality)} ${Math.round(quality)}%\n\n`;
  
  // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
  if (quality >= 80) {
    message += `üåü –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π!\n`;
  } else if (quality >= 60) {
    message += `üëç –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è.\n`;
  } else {
    message += `üìö –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏. –ü—Ä–∞–∫—Ç–∏–∫–∞ - –∫–ª—é—á –∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤—É!\n`;
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (recommendations && recommendations.length > 0) {
    message += `\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n`;
    recommendations.slice(0, 2).forEach(rec => {
      message += `‚Ä¢ ${rec.suggestion || rec}\n`;
    });
  }
  
  message += `\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.`;
  
  await bot.sendMessage(chatId, message, {
    reply_markup: {
      keyboard: [
        ['üìö –ü–æ–º–æ—â—å', 'üìä –ü–∞–º—è—Ç–∫–∞'],
        ['üîä –≠—Ö–æ', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
      ],
      resize_keyboard: true
    }
  });
}

function getQualityEmoji(score) {
  if (score >= 80) return 'üåü';
  if (score >= 60) return '‚úÖ';
  if (score >= 40) return 'üü°';
  return 'üî¥';
}

async function checkAndCelebrateProgress(bot, chatId, user) {
  // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –¥–Ω—è–º–∏
  if (!user.qualityHistory || user.qualityHistory.length < 2) return;
  
  const today = user.qualityHistory.slice(-1)[0];
  const yesterday = user.qualityHistory.slice(-2, -1)[0];
  
  const improvement = today.score - yesterday.score;
  
  if (improvement > 20) {
    setTimeout(() => {
      bot.sendMessage(
        chatId,
        `üéâ –í–∞—É! –ö–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö –Ω–∞–±–ª—é–¥–µ–Ω–∏–π —É–ª—É—á—à–∏–ª–æ—Å—å –Ω–∞ ${Math.round(improvement)}%!\n\n` +
        `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–∞–∑–ª–∏—á–∞—Ç—å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç –æ—Ç –º—ã—Å–ª–µ–π –æ –Ω—ë–º. ` +
        `–≠—Ç–æ —Ä–µ–¥–∫–∏–π –Ω–∞–≤—ã–∫! üåü`
      );
    }, 2000);
  }
}