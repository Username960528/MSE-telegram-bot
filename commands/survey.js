const User = require('../models/User');
const Response = require('../models/Response');

const surveyStates = new Map();

const questions = [
  {
    id: 'mood',
    text: 'üåà –ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?',
    type: 'scale',
    scale: { min: 1, max: 7, minLabel: '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ', maxLabel: '–û—Ç–ª–∏—á–Ω–æ' }
  },
  {
    id: 'energy',
    text: '‚ö° –ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —ç–Ω–µ—Ä–≥–∏—á–Ω—ã?',
    type: 'scale',
    scale: { min: 1, max: 7, minLabel: '–ò—Å—Ç–æ—â—ë–Ω', maxLabel: '–ü–æ–ª–æ–Ω —Å–∏–ª' }
  },
  {
    id: 'stress',
    text: 'üò∞ –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞?',
    type: 'scale',
    scale: { min: 1, max: 7, minLabel: '–†–∞—Å—Å–ª–∞–±–ª–µ–Ω', maxLabel: '–û—á–µ–Ω—å –Ω–∞–ø—Ä—è–∂—ë–Ω' }
  },
  {
    id: 'focus',
    text: 'üéØ –ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω—ã?',
    type: 'scale',
    scale: { min: 1, max: 7, minLabel: '–†–∞—Å—Å–µ—è–Ω', maxLabel: '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω' }
  },
  {
    id: 'currentThoughts',
    text: 'üí≠ –û–ø–∏—à–∏—Ç–µ –≤ 2-3 —Å–ª–æ–≤–∞—Ö, –æ —á—ë–º –¥—É–º–∞–µ—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:',
    type: 'text'
  },
  {
    id: 'currentActivity',
    text: 'üìù –ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?',
    type: 'text'
  },
  {
    id: 'currentEmotions',
    text: 'üòä –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ?',
    type: 'text'
  }
];

function createScaleKeyboard(min, max) {
  const keyboard = [];
  const row = [];
  
  for (let i = min; i <= max; i++) {
    row.push({ text: i.toString(), callback_data: `survey_scale_${i}` });
  }
  
  keyboard.push(row);
  keyboard.push([{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'survey_cancel' }]);
  
  return {
    reply_markup: {
      inline_keyboard: keyboard
    }
  };
}

async function startSurvey(bot, chatId, telegramId, notificationId = null) {
  try {
    let user = await User.findOne({ telegramId });
    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
      return;
    }

    const response = new Response({
      userId: user._id,
      telegramId: telegramId,
      notificationSentAt: notificationId ? new Date() : null,
      responseStartedAt: new Date(),
      responses: {}
    });

    const surveyState = {
      responseId: response._id,
      currentQuestion: 0,
      responses: {},
      startTime: Date.now()
    };

    surveyStates.set(telegramId, surveyState);
    await response.save();

    await askQuestion(bot, chatId, telegramId, 0);
  } catch (error) {
    console.error('Error starting survey:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function askQuestion(bot, chatId, telegramId, questionIndex) {
  const state = surveyStates.get(telegramId);
  if (!state) return;

  if (questionIndex >= questions.length) {
    await completeSurvey(bot, chatId, telegramId);
    return;
  }

  const question = questions[questionIndex];
  state.currentQuestion = questionIndex;

  if (question.type === 'scale') {
    const text = `${question.text}\n\n${question.scale.minLabel} ‚Üê ‚Üí ${question.scale.maxLabel}`;
    await bot.sendMessage(chatId, text, createScaleKeyboard(question.scale.min, question.scale.max));
  } else {
    await bot.sendMessage(chatId, question.text, {
      reply_markup: {
        inline_keyboard: [[{ text: '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'survey_skip' }]]
      }
    });
  }
}

async function completeSurvey(bot, chatId, telegramId) {
  try {
    const state = surveyStates.get(telegramId);
    if (!state) return;

    const response = await Response.findById(state.responseId);
    if (!response) return;

    response.responses = state.responses;
    response.responseCompletedAt = new Date();
    await response.save();

    surveyStates.delete(telegramId);

    const responseCount = Object.keys(state.responses).length;
    const responseTime = Math.round((Date.now() - state.startTime) / 1000);

    await bot.sendMessage(
      chatId,
      `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\n` +
      `üìä –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ ${responseCount} –∏–∑ ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤\n` +
      `‚è± –í—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: ${responseTime} —Å–µ–∫—É–Ω–¥\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.`,
      {
        reply_markup: {
          keyboard: [
            ['üìö Help', 'üìä Info'],
            ['üîä Echo', 'üìà Stats']
          ],
          resize_keyboard: true
        }
      }
    );
  } catch (error) {
    console.error('Error completing survey:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.');
  }
}

module.exports = {
  command: 'survey',
  description: 'Start ESM survey',
  questions,
  surveyStates,
  askQuestion,
  
  execute: async (bot, msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    
    await startSurvey(bot, chatId, telegramId);
  },
  
  handleCallback: async (bot, query) => {
    const chatId = query.message.chat.id;
    const telegramId = query.from.id;
    const data = query.data;
    
    const state = surveyStates.get(telegramId);
    if (!state) {
      await bot.answerCallbackQuery(query.id, { text: '–û–ø—Ä–æ—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' });
      return;
    }
    
    if (data === 'survey_cancel') {
      surveyStates.delete(telegramId);
      await bot.answerCallbackQuery(query.id);
      await bot.editMessageText(
        '‚ùå –û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω',
        { chat_id: chatId, message_id: query.message.message_id }
      );
      return;
    }
    
    if (data === 'survey_skip') {
      await bot.answerCallbackQuery(query.id);
      await bot.editMessageText(
        '‚è≠ –í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω',
        { chat_id: chatId, message_id: query.message.message_id }
      );
      await askQuestion(bot, chatId, telegramId, state.currentQuestion + 1);
      return;
    }
    
    if (data.startsWith('survey_scale_')) {
      const value = parseInt(data.replace('survey_scale_', ''));
      const question = questions[state.currentQuestion];
      
      state.responses[question.id] = value;
      
      await bot.answerCallbackQuery(query.id);
      await bot.editMessageText(
        `${question.text}\n\n‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç: ${value}`,
        { chat_id: chatId, message_id: query.message.message_id }
      );
      
      await askQuestion(bot, chatId, telegramId, state.currentQuestion + 1);
    }
  },
  
  handleTextResponse: async (bot, msg, state) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    const question = questions[state.currentQuestion];
    
    if (question && question.type === 'text') {
      state.responses[question.id] = msg.text;
      await bot.sendMessage(chatId, '‚úÖ –û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω');
      await askQuestion(bot, chatId, telegramId, state.currentQuestion + 1);
      return true;
    }
    return false;
  }
};