const User = require('../models/User');

const settingsStates = new Map();

module.exports = {
  command: 'settings',
  execute: async (bot, msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    try {
      let user = await User.findOne({ telegramId: userId });
      
      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }

      const keyboard = {
        inline_keyboard: [
          [{ text: `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.settings.notificationsEnabled ? '–í–∫–ª' : '–í—ã–∫–ª'}`, callback_data: 'settings_toggle_notifications' }],
          [{ text: `üìÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –¥–µ–Ω—å: ${user.settings.notificationsPerDay}`, callback_data: 'settings_notifications_count' }],
          [{ text: `‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${user.settings.notificationStartTime}`, callback_data: 'settings_start_time' }],
          [{ text: `‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${user.settings.notificationEndTime}`, callback_data: 'settings_end_time' }],
          [{ text: `üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.settings.timezone}`, callback_data: 'settings_timezone' }],
          [{ text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'settings_close' }]
        ]
      };

      const message = `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n` +
        `–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n` +
        `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${user.settings.notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n` +
        `‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –¥–µ–Ω—å: ${user.settings.notificationsPerDay}\n` +
        `‚Ä¢ –í—Ä–µ–º—è: ${user.settings.notificationStartTime} - ${user.settings.notificationEndTime}\n` +
        `‚Ä¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${user.settings.timezone}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:`;

      bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('Settings error:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.');
    }
  },

  handleCallback: async (bot, query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const data = query.data;

    try {
      let user = await User.findOne({ telegramId: userId });
      if (!user) return;

      if (data === 'settings_toggle_notifications') {
        user.settings.notificationsEnabled = !user.settings.notificationsEnabled;
        await user.save();
        
        await bot.answerCallbackQuery(query.id, {
          text: `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${user.settings.notificationsEnabled ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã'}`
        });
        
        // Refresh settings menu
        module.exports.execute(bot, query.message);
        
      } else if (data === 'settings_notifications_count') {
        const keyboard = {
          inline_keyboard: []
        };
        
        for (let i = 1; i <= 10; i++) {
          if (i % 5 === 1) keyboard.inline_keyboard.push([]);
          keyboard.inline_keyboard[keyboard.inline_keyboard.length - 1].push({
            text: i.toString(),
            callback_data: `settings_set_count_${i}`
          });
        }
        keyboard.inline_keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'settings_back' }]);
        
        await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å:', {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: keyboard
        });
        
      } else if (data.startsWith('settings_set_count_')) {
        const count = parseInt(data.replace('settings_set_count_', ''));
        user.settings.notificationsPerDay = count;
        await user.save();
        
        await bot.answerCallbackQuery(query.id, {
          text: `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å`
        });
        
        // Refresh settings menu
        module.exports.execute(bot, query.message);
        
      } else if (data === 'settings_start_time') {
        settingsStates.set(userId, { type: 'start_time' });
        
        await bot.editMessageText(
          '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):', 
          {
            chat_id: chatId,
            message_id: query.message.message_id
          }
        );
        
      } else if (data === 'settings_end_time') {
        settingsStates.set(userId, { type: 'end_time' });
        
        await bot.editMessageText(
          '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21:00):', 
          {
            chat_id: chatId,
            message_id: query.message.message_id
          }
        );
        
      } else if (data === 'settings_timezone') {
        const keyboard = {
          inline_keyboard: [
            [{ text: 'UTC', callback_data: 'settings_tz_UTC' }],
            [{ text: 'Europe/Moscow', callback_data: 'settings_tz_Europe/Moscow' }],
            [{ text: 'Europe/London', callback_data: 'settings_tz_Europe/London' }],
            [{ text: 'Europe/Berlin', callback_data: 'settings_tz_Europe/Berlin' }],
            [{ text: 'America/New_York', callback_data: 'settings_tz_America/New_York' }],
            [{ text: 'America/Los_Angeles', callback_data: 'settings_tz_America/Los_Angeles' }],
            [{ text: 'Asia/Tokyo', callback_data: 'settings_tz_Asia/Tokyo' }],
            [{ text: 'Asia/Shanghai', callback_data: 'settings_tz_Asia/Shanghai' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'settings_back' }]
          ]
        };
        
        await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:', {
          chat_id: chatId,
          message_id: query.message.message_id,
          reply_markup: keyboard
        });
        
      } else if (data.startsWith('settings_tz_')) {
        const timezone = data.replace('settings_tz_', '');
        user.settings.timezone = timezone;
        await user.save();
        
        await bot.answerCallbackQuery(query.id, {
          text: `–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${timezone}`
        });
        
        // Refresh settings menu
        module.exports.execute(bot, query.message);
        
      } else if (data === 'settings_back') {
        // Refresh settings menu
        module.exports.execute(bot, query.message);
        
      } else if (data === 'settings_close') {
        await bot.deleteMessage(chatId, query.message.message_id);
        await bot.answerCallbackQuery(query.id);
      }
      
    } catch (error) {
      console.error('Settings callback error:', error);
      await bot.answerCallbackQuery(query.id, {
        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
      });
    }
  },

  handleTextResponse: async (bot, msg) => {
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    const text = msg.text;

    if (!settingsStates.has(userId)) return false;

    const state = settingsStates.get(userId);
    const timeRegex = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$/;

    if (!timeRegex.test(text)) {
      bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)');
      return true;
    }

    try {
      const user = await User.findOne({ telegramId: userId });
      if (!user) return false;

      if (state.type === 'start_time') {
        user.settings.notificationStartTime = text;
      } else if (state.type === 'end_time') {
        user.settings.notificationEndTime = text;
      }

      await user.save();
      settingsStates.delete(userId);

      bot.sendMessage(chatId, `‚úÖ –í—Ä–µ–º—è ${state.type === 'start_time' ? '–Ω–∞—á–∞–ª–∞' : '–æ–∫–æ–Ω—á–∞–Ω–∏—è'} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${text}`);
      
      // Show settings menu again
      setTimeout(() => {
        module.exports.execute(bot, msg);
      }, 1000);

      return true;
    } catch (error) {
      console.error('Settings text response error:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.');
      return true;
    }
  },

  settingsStates
};