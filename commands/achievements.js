const GamificationService = require('../services/gamification-service');
const User = require('../models/User');

module.exports = {
  command: 'achievements',
  description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å',
  execute: async (bot, msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    
    try {
      const user = await User.findOne({ telegramId });
      if (!user) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }
      
      const progress = user.getProgressToNextLevel();
      const progressBar = '‚ñà'.repeat(Math.floor(progress.percentage / 10)) + 
                         '‚ñë'.repeat(10 - Math.floor(progress.percentage / 10));
      
      let message = `üèÜ <b>–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</b>\n\n`;
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ
      message += `üë§ <b>–£—Ä–æ–≤–µ–Ω—å:</b> ${user.level.current} - ${user.level.title}\n`;
      message += `‚ú® <b>–û–ø—ã—Ç:</b> ${progress.current}/${progress.needed} (${progress.percentage}%)\n`;
      message += `üìä [${progressBar}]\n\n`;
      
      // –¢–µ–∫—É—â–∏–µ —Å—Ç—Ä–∏–∫–∏
      message += `üî• <b>–¢–µ–∫—É—â–∏–µ —Å—Ç—Ä–∏–∫–∏:</b>\n`;
      message += `üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π: ${user.streaks.current.daily.count} –¥–Ω–µ–π\n`;
      message += `üéØ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ: ${user.streaks.current.quality.count} –æ—Ç–≤–µ—Ç–æ–≤\n`;
      message += `üåä Flow —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${user.streaks.current.flow.count} —Ä–∞–∑\n\n`;
      
      // –†–µ–∫–æ—Ä–¥—ã
      message += `üèÖ <b>–õ–∏—á–Ω—ã–µ —Ä–µ–∫–æ—Ä–¥—ã:</b>\n`;
      message += `üìÖ –ú–∞–∫—Å. –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π: ${user.streaks.longest.daily.count} –¥–Ω–µ–π\n`;
      message += `üéØ –ú–∞–∫—Å. –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: ${user.streaks.longest.quality.count} –æ—Ç–≤–µ—Ç–æ–≤\n`;
      message += `üåä –ú–∞–∫—Å. Flow: ${user.streaks.longest.flow.count} —Ä–∞–∑\n\n`;
      
      // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
      const achievementsByRarity = {
        legendary: [],
        epic: [],
        rare: [],
        common: []
      };
      
      user.achievements.forEach(achievement => {
        achievementsByRarity[achievement.rarity].push(achievement);
      });
      
      message += `üèÜ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (${user.achievements.length}):</b>\n\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
      const rarityEmoji = {
        legendary: 'üëë',
        epic: 'ü•á',
        rare: 'ü•à',
        common: 'ü•â'
      };
      
      const rarityNames = {
        legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ',
        epic: '–≠–ø–∏—á–µ—Å–∫–∏–µ', 
        rare: '–†–µ–¥–∫–∏–µ',
        common: '–û–±—ã—á–Ω—ã–µ'
      };
      
      Object.entries(achievementsByRarity).forEach(([rarity, achievements]) => {
        if (achievements.length > 0) {
          message += `${rarityEmoji[rarity]} <b>${rarityNames[rarity]}:</b>\n`;
          achievements.forEach(achievement => {
            const date = achievement.unlockedAt.toLocaleDateString('ru-RU');
            message += `‚Ä¢ ${achievement.description} <i>(${date})</i>\n`;
          });
          message += `\n`;
        }
      });
      
      if (user.achievements.length === 0) {
        message += `–ü–æ–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–æ—Å–∞—Ö!\n\n`;
      }
      
      // –°–ª–µ–¥—É—é—â–∏–µ —Ü–µ–ª–∏
      message += `üéØ <b>–ë–ª–∏–∂–∞–π—à–∏–µ —Ü–µ–ª–∏:</b>\n`;
      
      const dailyStreak = user.streaks.current.daily.count;
      if (dailyStreak < 7) {
        message += `‚Ä¢ –î–æ "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤–æ–∏–Ω–∞": ${7 - dailyStreak} –¥–Ω–µ–π\n`;
      } else if (dailyStreak < 30) {
        message += `‚Ä¢ –î–æ "–ß–µ–º–ø–∏–æ–Ω–∞ –Ω–µ–¥–µ–ª—å": ${30 - dailyStreak} –¥–Ω–µ–π\n`;
      }
      
      if (user.totalResponses < 100) {
        message += `‚Ä¢ –î–æ "–ö–ª—É–±–∞ —Å–æ—Ç–Ω–∏": ${100 - user.totalResponses} –æ—Ç–≤–µ—Ç–æ–≤\n`;
      }
      
      const qualityStreak = user.streaks.current.quality.count;
      if (qualityStreak < 10) {
        message += `‚Ä¢ –î–æ "–ú–∞—Å—Ç–µ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞": ${10 - qualityStreak} –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n`;
      }
      
      // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      message += `\nüí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>\n`;
      message += `‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–∫–∞\n`;
      message += `‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–≤—ã—à–∞—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ\n`;
      message += `‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ—Å—Ç–∏—á—å Flow —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤—ã—Å–æ–∫–∏–π –Ω–∞–≤—ã–∫ + –≤—ã–∑–æ–≤)\n`;
      message += `‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ —Ä–∞–Ω–æ —É—Ç—Ä–æ–º –∏–ª–∏ –ø–æ–∑–¥–Ω–æ –≤–µ—á–µ—Ä–æ–º –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`;
      
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìä –†–µ–π—Ç–∏–Ω–≥–∏', callback_data: 'leaderboards' },
            { text: 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }
          ],
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_achievements' }
          ]
        ]
      };
      
      bot.sendMessage(chatId, message, { 
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
      
    } catch (error) {
      console.error('Error in achievements command:', error);
      bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.');
    }
  }
};