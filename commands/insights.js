const User = require('../models/User');
const AIInsightsService = require('../services/ai-insights-service');
const PredictiveAnalyticsService = require('../services/predictive-analytics-service');
const PatternAnalysisService = require('../services/pattern-analysis-service');
const addressForms = require('../utils/addressForms');

module.exports = {
  command: 'insights',
  description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
  execute: async (bot, msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    
    try {
      const user = await User.findOne({ telegramId });
      if (!user) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      await bot.sendMessage(chatId, 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      const [aiInsights, predictions, quickInsight] = await Promise.all([
        AIInsightsService.generatePersonalInsights(user._id).catch(err => {
          console.error('AI Insights error:', err);
          return { insights: [], error: 'AI temporarily unavailable' };
        }),
        PredictiveAnalyticsService.generatePredictions(user._id, {
          currentTime: new Date()
        }).catch(err => {
          console.error('Predictions error:', err);
          return { predictions: {}, error: 'Predictions temporarily unavailable' };
        }),
        AIInsightsService.generateQuickInsight(user._id).catch(err => {
          console.error('Quick insight error:', err);
          return { message: '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤', emoji: 'üìä' };
        })
      ]);
      
      let message = addressForms.formatForUser(`üß† <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã</b>\n\n`, user);
      
      // –ë—ã—Å—Ç—Ä—ã–π –∏–Ω—Å–∞–π—Ç –≤ –Ω–∞—á–∞–ª–µ
      if (quickInsight && quickInsight.message) {
        message += `${quickInsight.emoji} <i>${quickInsight.message}</i>\n\n`;
      }
      
      // AI –∏–Ω—Å–∞–π—Ç—ã
      if (aiInsights.insights && aiInsights.insights.length > 0) {
        message += `ü§ñ <b>AI-–∞–Ω–∞–ª–∏–∑:</b>\n`;
        
        aiInsights.insights.slice(0, 3).forEach((insight, index) => {
          message += `${insight.emoji || 'üí°'} <b>${insight.title}</b>\n`;
          message += `${insight.description}\n`;
          if (insight.recommendation) {
            message += `üí° <i>${insight.recommendation}</i>\n`;
          }
          message += `\n`;
        });
      } else if (aiInsights.error) {
        message += `ü§ñ <b>AI-–∞–Ω–∞–ª–∏–∑:</b> ${aiInsights.error}\n\n`;
      }
      
      // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
      if (predictions.predictions && Object.keys(predictions.predictions).length > 0) {
        message += `üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑—ã:</b>\n`;
        
        // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
        if (predictions.predictions.timeBased && predictions.predictions.timeBased.currentHour) {
          const current = predictions.predictions.timeBased.currentHour;
          const now = new Date().getHours();
          
          message += `‚è∞ <b>–°–µ–π—á–∞—Å (${now}:00):</b>\n`;
          if (current.mood) {
            const moodEmoji = current.mood.predicted > 5 ? 'üòä' : current.mood.predicted > 3 ? 'üòê' : 'üòî';
            message += `${moodEmoji} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${current.mood.predicted.toFixed(1)}/7\n`;
          }
          if (current.energy) {
            const energyEmoji = current.energy.predicted > 5 ? '‚ö°' : current.energy.predicted > 3 ? 'üîã' : 'ü™´';
            message += `${energyEmoji} –≠–Ω–µ—Ä–≥–∏—è: ${current.energy.predicted.toFixed(1)}/7\n`;
          }
          if (current.stress) {
            const stressEmoji = current.stress.predicted > 5 ? 'üò∞' : current.stress.predicted > 3 ? 'üò§' : 'üòå';
            message += `${stressEmoji} –°—Ç—Ä–µ—Å—Å: ${current.stress.predicted.toFixed(1)}/7\n`;
          }
          message += `\n`;
        }
        
        // –°–ª–µ–¥—É—é—â–∏–π —á–∞—Å
        if (predictions.predictions.timeBased && predictions.predictions.timeBased.nextHour) {
          const next = predictions.predictions.timeBased.nextHour;
          const nextHour = (new Date().getHours() + 1) % 24;
          
          message += `‚è≠ <b>–°–ª–µ–¥—É—é—â–∏–π —á–∞—Å (${nextHour}:00):</b>\n`;
          if (next.mood) {
            const change = next.mood.predicted > (predictions.predictions.timeBased.currentHour?.mood?.predicted || 0) ? 'üìà' : 'üìâ';
            message += `${change} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${next.mood.predicted.toFixed(1)}/7\n`;
          }
          message += `\n`;
        }
        
        // Flow –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if (predictions.predictions.flowPrediction && predictions.predictions.flowPrediction.flowProbability > 0.3) {
          const flowProb = predictions.predictions.flowPrediction.flowProbability;
          const flowEmoji = flowProb > 0.7 ? 'üåä' : flowProb > 0.5 ? '„Ä∞Ô∏è' : 'üíß';
          message += `${flowEmoji} <b>Flow —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b> ${Math.round(flowProb * 100)}% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å\n`;
          if (predictions.predictions.flowPrediction.recommendation) {
            message += `üí° ${predictions.predictions.flowPrediction.recommendation}\n`;
          }
          message += `\n`;
        }
      }
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (predictions.predictions && predictions.predictions.recommendations && predictions.predictions.recommendations.length > 0) {
        message += `üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n`;
        predictions.predictions.recommendations.slice(0, 2).forEach(rec => {
          const emoji = rec.priority === 'high' ? 'üö®' : rec.priority === 'medium' ? '‚ö†Ô∏è' : 'üí°';
          message += `${emoji} ${rec.message}\n`;
          message += `   ‚û°Ô∏è ${rec.action}\n\n`;
        });
      }
      
      // –ê–ª–µ—Ä—Ç—ã
      if (predictions.predictions && predictions.predictions.alerts && predictions.predictions.alerts.length > 0) {
        const importantAlerts = predictions.predictions.alerts.filter(alert => 
          alert.severity === 'high' || alert.type === 'anomaly'
        );
        
        if (importantAlerts.length > 0) {
          message += `‚ö†Ô∏è <b>–í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n`;
          importantAlerts.slice(0, 2).forEach(alert => {
            message += `‚Ä¢ ${alert.message}\n`;
            if (alert.recommendation) {
              message += `  üí° ${alert.recommendation}\n`;
            }
          });
          message += `\n`;
        }
      }
      
      // –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è—Ö
      if (predictions.confidence && predictions.confidence > 0) {
        const confidenceEmoji = predictions.confidence > 0.7 ? 'üéØ' : predictions.confidence > 0.4 ? 'üîç' : 'üå±';
        message += `${confidenceEmoji} <i>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ: ${Math.round(predictions.confidence * 100)}%</i>\n`;
      }
      
      // –ï—Å–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
      if (message.length < 200) {
        message = addressForms.formatForUser(`üß† <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã</b>\n\n`, user);
        message += `üå± –ú—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ–º –∏–∑—É—á–∞—Ç—å —Ç–≤–æ–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã!\n\n`;
        message += `üìä –î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω–æ:\n`;
        message += `‚Ä¢ –ú–∏–Ω–∏–º—É–º 15 –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏\n`;
        message += `‚Ä¢ –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤—Ä–µ–º–µ–Ω –¥–Ω—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π\n`;
        message += `‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (—Ö–æ—Ç—è –±—ã —á–µ—Ä–µ–∑ –¥–µ–Ω—å)\n\n`;
        message += `üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–ø—Ä–æ—Å—ã, –∏ —Å–∫–æ—Ä–æ —É–≤–∏–¥–∏—à—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏!`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      message += `\n\n<i>–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${new Date().toLocaleString('ru-RU')}</i>`;
      
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã', callback_data: 'insights_detailed_patterns' },
            { text: 'üîÆ –ü–æ–ª–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã', callback_data: 'insights_full_predictions' }
          ],
          [
            { text: 'üìà –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã', callback_data: 'insights_time_patterns' },
            { text: 'üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', callback_data: 'insights_activity_patterns' }
          ],
          [
            { text: 'üåä Flow –∞–Ω–∞–ª–∏–∑', callback_data: 'insights_flow_analysis' },
            { text: 'üë• –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã', callback_data: 'insights_social_patterns' }
          ],
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑', callback_data: 'insights_refresh' },
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'insights_settings' }
          ]
        ]
      };
      
      await bot.sendMessage(chatId, message, { 
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
      
    } catch (error) {
      console.error('Error in insights command:', error);
      bot.sendMessage(chatId, 
        addressForms.formatForUser(
          '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.',
          await User.findOne({ telegramId })
        )
      );
    }
  },
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
  handleCallback: async (bot, query) => {
    const chatId = query.message.chat.id;
    const telegramId = query.from.id;
    const action = query.data;
    
    try {
      const user = await User.findOne({ telegramId });
      if (!user) {
        await bot.answerCallbackQuery(query.id, { text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        return;
      }
      
      await bot.answerCallbackQuery(query.id, { text: '–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...' });
      
      let message = '';
      
      switch (action) {
        case 'insights_time_patterns':
          message = await this.generateTimePatternReport(user._id);
          break;
          
        case 'insights_activity_patterns':
          message = await this.generateActivityPatternReport(user._id);
          break;
          
        case 'insights_social_patterns':
          message = await this.generateSocialPatternReport(user._id);
          break;
          
        case 'insights_flow_analysis':
          message = await this.generateFlowAnalysisReport(user._id);
          break;
          
        case 'insights_full_predictions':
          message = await this.generateFullPredictionsReport(user._id);
          break;
          
        case 'insights_detailed_patterns':
          message = await this.generateDetailedPatternsReport(user._id);
          break;
          
        case 'insights_refresh':
          // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É
          await this.execute(bot, query.message);
          return;
          
        case 'insights_settings':
          message = this.generateInsightsSettings();
          break;
          
        default:
          message = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞';
      }
      
      const backKeyboard = {
        inline_keyboard: [
          [{ text: '‚Üê –ù–∞–∑–∞–¥ –∫ –∏–Ω—Å–∞–π—Ç–∞–º', callback_data: 'insights_back' }]
        ]
      };
      
      await bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: backKeyboard
      });
      
    } catch (error) {
      console.error('Error in insights callback:', error);
      await bot.answerCallbackQuery(query.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö' });
    }
  },
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
  async generateTimePatternReport(userId) {
    const patterns = await PatternAnalysisService.analyzeTimePatterns(userId, 30);
    
    if (patterns.insufficient_data) {
      return 'üìä <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</b>\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–ø—Ä–æ—Å—ã!';
    }
    
    let message = 'üìä <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</b>\n\n';
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º
    message += '‚è∞ <b>–ü–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è:</b>\n';
    const hourlyData = Object.entries(patterns.hourly)
      .filter(([_, data]) => data.count >= 2)
      .sort((a, b) => b[1].mood.avg - a[1].mood.avg);
    
    if (hourlyData.length > 0) {
      message += `üåü –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: ${hourlyData[0][0]}:00 (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ${hourlyData[0][1].mood.avg.toFixed(1)})\n`;
      if (hourlyData.length > 1) {
        const worst = hourlyData[hourlyData.length - 1];
        message += `üòî –°–ª–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è: ${worst[0]}:00 (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ${worst[1].mood.avg.toFixed(1)})\n`;
      }
    }
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    message += '\nüìÖ <b>–ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:</b>\n';
    const weekdays = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    const weekdayData = Object.entries(patterns.weekday)
      .filter(([_, data]) => data.count >= 2)
      .sort((a, b) => parseInt(a[0]) - parseInt(b[0]));
    
    weekdayData.forEach(([day, data]) => {
      const dayName = weekdays[parseInt(day)];
      const moodEmoji = data.mood.avg > 5 ? 'üòä' : data.mood.avg > 3 ? 'üòê' : 'üòî';
      message += `${moodEmoji} ${dayName}: ${data.mood.avg.toFixed(1)}/7\n`;
    });
    
    return message;
  },
  
  async generateActivityPatternReport(userId) {
    const patterns = await PatternAnalysisService.analyzeActivityPatterns(userId, 30);
    
    if (Object.keys(patterns).length === 0) {
      return 'üéØ <b>–ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö. –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–ø—Ä–æ—Å–∞—Ö!';
    }
    
    let message = 'üéØ <b>–ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n';
    
    const sortedActivities = Object.entries(patterns)
      .sort((a, b) => b[1].mood.avg - a[1].mood.avg);
    
    message += 'üìà <b>–í–ª–∏—è–Ω–∏–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</b>\n';
    sortedActivities.slice(0, 5).forEach(([activity, data]) => {
      const moodEmoji = data.mood.avg > 5 ? 'üòä' : data.mood.avg > 3 ? 'üòê' : 'üòî';
      message += `${moodEmoji} "${activity}": ${data.mood.avg.toFixed(1)}/7 (${data.count} —Ä–∞–∑)\n`;
    });
    
    // Flow –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const flowActivities = sortedActivities
      .filter(([_, data]) => data.flowPercentage > 20)
      .sort((a, b) => b[1].flowPercentage - a[1].flowPercentage);
    
    if (flowActivities.length > 0) {
      message += '\nüåä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è Flow:</b>\n';
      flowActivities.slice(0, 3).forEach(([activity, data]) => {
        message += `‚Ä¢ "${activity}": ${Math.round(data.flowPercentage)}% –≤—Ä–µ–º–µ–Ω–∏ –≤ Flow\n`;
      });
    }
    
    return message;
  },
  
  async generateSocialPatternReport(userId) {
    const patterns = await PatternAnalysisService.analyzeSocialPatterns(userId, 30);
    
    if (Object.keys(patterns).length === 0) {
      return 'üë• <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</b>\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ.';
    }
    
    let message = 'üë• <b>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã</b>\n\n';
    
    const sortedSocial = Object.entries(patterns)
      .sort((a, b) => b[1].mood.avg - a[1].mood.avg);
    
    message += 'üòä <b>–í–ª–∏—è–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</b>\n';
    sortedSocial.forEach(([companion, data]) => {
      const moodEmoji = data.mood.avg > 5 ? 'üòä' : data.mood.avg > 3 ? 'üòê' : 'üòî';
      const socialEmoji = companion === '–æ–¥–∏–Ω' ? 'üßò' : 'üë•';
      message += `${socialEmoji}${moodEmoji} ${companion}: ${data.mood.avg.toFixed(1)}/7\n`;
    });
    
    return message;
  },
  
  async generateFlowAnalysisReport(userId) {
    const correlations = await PatternAnalysisService.findCorrelations(userId, 30);
    
    if (correlations.insufficient_data || !correlations.flowTriggers) {
      return 'üåä <b>–ê–Ω–∞–ª–∏–∑ Flow —Å–æ—Å—Ç–æ—è–Ω–∏–π</b>\n\n–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Flow. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞–≤—ã–∫–∞—Ö –∏ –≤—ã–∑–æ–≤–∞—Ö!';
    }
    
    let message = 'üåä <b>–ê–Ω–∞–ª–∏–∑ Flow —Å–æ—Å—Ç–æ—è–Ω–∏–π</b>\n\n';
    
    const flowTriggers = correlations.flowTriggers;
    if (flowTriggers.flowAvg) {
      message += 'üéØ <b>–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è Flow:</b>\n';
      message += `‚Ä¢ –í—ã–∑–æ–≤: ${flowTriggers.optimalZone.challengeRange[0]}-${flowTriggers.optimalZone.challengeRange[1]}/9\n`;
      message += `‚Ä¢ –ù–∞–≤—ã–∫: ${flowTriggers.optimalZone.skillRange[0]}-${flowTriggers.optimalZone.skillRange[1]}/9\n`;
      message += `‚Ä¢ –ë–∞–ª–∞–Ω—Å: ¬±${flowTriggers.optimalZone.balance.toFixed(1)}\n\n`;
      
      message += 'üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ –±–∞–ª–∞–Ω—Å—É –º–µ–∂–¥—É —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–¥–∞—á–∏ –∏ –≤–∞—à–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.';
    }
    
    return message;
  },
  
  async generateFullPredictionsReport(userId) {
    const predictions = await PredictiveAnalyticsService.generatePredictions(userId);
    
    let message = 'üîÆ <b>–ü–æ–ª–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑</b>\n\n';
    
    if (predictions.predictions && Object.keys(predictions.predictions).length > 0) {
      // –¢—Ä–µ–Ω–¥—ã
      if (predictions.predictions.trendBased && !predictions.predictions.trendBased.insufficient_data) {
        message += 'üìà <b>–¢—Ä–µ–Ω–¥—ã (2 –Ω–µ–¥–µ–ª–∏):</b>\n';
        Object.entries(predictions.predictions.trendBased).forEach(([metric, trend]) => {
          const trendEmoji = trend.direction === 'increasing' ? 'üìà' : 
                           trend.direction === 'decreasing' ? 'üìâ' : '‚û°Ô∏è';
          message += `${trendEmoji} ${metric}: ${trend.direction}\n`;
        });
        message += '\n';
      }
      
      // –í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (predictions.predictions.recommendations) {
        message += 'üí° <b>–í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n';
        predictions.predictions.recommendations.forEach(rec => {
          const emoji = rec.priority === 'high' ? 'üö®' : rec.priority === 'medium' ? '‚ö†Ô∏è' : 'üí°';
          message += `${emoji} ${rec.message}\n   ‚û°Ô∏è ${rec.action}\n\n`;
        });
      }
      
      // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
      message += `üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ:</b> ${Math.round(predictions.confidence * 100)}%`;
    } else {
      message += '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–ø—Ä–æ—Å—ã!';
    }
    
    return message;
  },
  
  async generateDetailedPatternsReport(userId) {
    const profile = await PatternAnalysisService.createUserProfile(userId);
    
    let message = 'üîç <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤</b>\n\n';
    
    // –ê–Ω–æ–º–∞–ª–∏–∏
    if (profile.anomalies && Array.isArray(profile.anomalies) && profile.anomalies.length > 0) {
      message += '‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n';
      profile.anomalies.slice(0, 3).forEach(anomaly => {
        const emoji = anomaly.type === 'increase' ? 'üìà' : 'üìâ';
        message += `${emoji} ${anomaly.metric}: ${anomaly.type === 'increase' ? '–ø–æ–≤—ã—à–µ–Ω–∏–µ' : '—Å–Ω–∏–∂–µ–Ω–∏–µ'} `;
        message += `(—Å–∏–ª–∞: ${anomaly.magnitude.toFixed(1)})\n`;
      });
      message += '\n';
    }
    
    // –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    if (profile.insights && profile.insights.length > 0) {
      message += 'üí° <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏:</b>\n';
      profile.insights.forEach(insight => {
        message += `‚Ä¢ ${insight.message}\n`;
      });
    } else {
      message += 'üìä –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π.';
    }
    
    return message;
  },
  
  generateInsightsSettings() {
    return `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Å–∞–π—Ç–æ–≤</b>\n\n` +
           `ü§ñ AI-–∞–Ω–∞–ª–∏–∑: –í–∫–ª—é—á–µ–Ω\n` +
           `üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n` +
           `üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: –í–∫–ª—é—á–µ–Ω\n` +
           `‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö: –í–∫–ª—é—á–µ–Ω—ã\n\n` +
           `üí° –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:\n` +
           `‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ (3-5 —Ä–∞–∑ –≤ –¥–µ–Ω—å)\n` +
           `‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n` +
           `‚Ä¢ –û—Ç–º–µ—á–∞–π—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç\n` +
           `‚Ä¢ –ß–µ—Å—Ç–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ –∏ –≤—ã–∑–æ–≤—ã`;
  }
};