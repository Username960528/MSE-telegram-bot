const GamificationService = require('../services/gamification-service');
const User = require('../models/User');

module.exports = {
  command: 'leaderboard',
  description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∞–Ω–æ–Ω–∏–º–Ω–æ)',
  execute: async (bot, msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    
    try {
      const user = await User.findOne({ telegramId });
      if (!user) {
        bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        return;
      }
      
      const leaderboards = await GamificationService.getLeaderboards();
      
      let message = `üèÜ <b>–†–µ–π—Ç–∏–Ω–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n`;
      message += `<i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏</i>\n\n`;
      
      // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
      message += `üìä <b>–¢–æ–ø –Ω–µ–¥–µ–ª–∏ (–ø–æ –æ—á–∫–∞–º):</b>\n`;
      if (leaderboards.weekly.length > 0) {
        leaderboards.weekly.slice(0, 5).forEach(entry => {
          const medal = entry.position === 1 ? 'ü•á' : entry.position === 2 ? 'ü•à' : entry.position === 3 ? 'ü•â' : `${entry.position}.`;
          message += `${medal} ${entry.anonymousId} - ${entry.score} –æ—á–∫–æ–≤ (—É—Ä.${entry.level})\n`;
        });
      } else {
        message += `–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n`;
      }
      message += `\n`;
      
      // –†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
      message += `üéØ <b>–ú–∞—Å—Ç–µ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞:</b>\n`;
      if (leaderboards.quality.length > 0) {
        leaderboards.quality.slice(0, 5).forEach(entry => {
          const medal = entry.position === 1 ? 'ü•á' : entry.position === 2 ? 'ü•à' : entry.position === 3 ? 'ü•â' : `${entry.position}.`;
          message += `${medal} ${entry.anonymousId} - ${entry.score}% –∫–∞—á–µ—Å—Ç–≤–∞\n`;
        });
      } else {
        message += `–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n`;
      }
      message += `\n`;
      
      // –†–µ–π—Ç–∏–Ω–≥ –ø–æ Flow
      message += `üåä <b>–ú–∞—Å—Ç–µ—Ä–∞ Flow:</b>\n`;
      if (leaderboards.flow.length > 0) {
        leaderboards.flow.slice(0, 5).forEach(entry => {
          const medal = entry.position === 1 ? 'ü•á' : entry.position === 2 ? 'ü•à' : entry.position === 3 ? 'ü•â' : `${entry.position}.`;
          message += `${medal} ${entry.anonymousId} - ${entry.score}% –≤—Ä–µ–º–µ–Ω–∏ –≤ Flow\n`;
        });
      } else {
        message += `–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n`;
      }
      message += `\n`;
      
      // –†–µ–π—Ç–∏–Ω–≥ –ø–æ —Å—Ç—Ä–∏–∫–∞–º
      message += `üî• <b>–ß–µ–º–ø–∏–æ–Ω—ã –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞:</b>\n`;
      if (leaderboards.streaks.length > 0) {
        leaderboards.streaks.slice(0, 5).forEach(entry => {
          const medal = entry.position === 1 ? 'ü•á' : entry.position === 2 ? 'ü•à' : entry.position === 3 ? 'ü•â' : `${entry.position}.`;
          message += `${medal} ${entry.anonymousId} - ${entry.score} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥\n`;
        });
      } else {
        message += `–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n`;
      }
      message += `\n`;
      
      // –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userWeeklyPos = await GamificationService.getUserRanking(user._id, 'weekly');
      const userQualityPos = await GamificationService.getUserRanking(user._id, 'quality');
      const userFlowPos = await GamificationService.getUserRanking(user._id, 'flow');
      const userStreakPos = await GamificationService.getUserRanking(user._id, 'streak');
      
      message += `üìç <b>–í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏:</b>\n`;
      message += `üìä –ù–µ–¥–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: #${userWeeklyPos}\n`;
      message += `üéØ –ü–æ –∫–∞—á–µ—Å—Ç–≤—É: #${userQualityPos}\n`;
      message += `üåä –ü–æ Flow: #${userFlowPos}\n`;
      message += `üî• –ü–æ —Å—Ç—Ä–∏–∫–∞–º: #${userStreakPos}\n\n`;
      
      message += `<i>üîÑ –†–µ–π—Ç–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞</i>`;
      
      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìä –ü–æ–ª–Ω—ã–π —Ç–æ–ø –Ω–µ–¥–µ–ª–∏', callback_data: 'full_weekly_leaderboard' },
            { text: 'üéØ –¢–æ–ø –∫–∞—á–µ—Å—Ç–≤–∞', callback_data: 'full_quality_leaderboard' }
          ],
          [
            { text: 'üåä –¢–æ–ø Flow', callback_data: 'full_flow_leaderboard' },
            { text: 'üî• –¢–æ–ø —Å—Ç—Ä–∏–∫–æ–≤', callback_data: 'full_streak_leaderboard' }
          ],
          [
            { text: 'üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'my_achievements' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_leaderboard' }
          ]
        ]
      };
      
      bot.sendMessage(chatId, message, { 
        parse_mode: 'HTML',
        reply_markup: keyboard
      });
      
    } catch (error) {
      console.error('Error in leaderboard command:', error);
      bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤.');
    }
  }
};