const User = require('../models/User');
const addressForms = require('../utils/addressForms');

module.exports = {
  command: 'news',
  description: '–ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞',
  execute: async (bot, msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    
    try {
      const user = await User.findOne({ telegramId });
      
      const newsMessage = addressForms.formatForUser(`
üî• <b>–ù–û–í–ò–ù–ö–ê: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—ã!</b> ‚åö

–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –æ–ø—Ä–æ—Å—ã –ø—Ä—è–º–æ –Ω–∞ —á–∞—Å—ã Garmin, Apple Watch –∏ Wear OS!

‚åö <b>–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /pushover:</b>
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä—è–º–æ –Ω–∞ –∑–∞–ø—è—Å—Ç—å–µ
‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –ø—Ä–æ–±–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ DND —Ä–µ–∂–∏–º
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –∑–≤—É–∫–∏ –∏ –≤–∏–±—Ä–∞—Ü–∏—è  
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ

üöÄ <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å:</b>
1. –£—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Pushover
2. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /pushover –≤ –±–æ—Ç–µ
3. –í–≤–µ–¥–∏ —Å–≤–æ–π User Key –∏–∑ Pushover
4. –ù–∞—Å—Ç—Ä–æ–π —á–∞—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Pushover —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üí™ <b>–ù–∏–∫–æ–≥–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—à—å –æ–ø—Ä–æ—Å—ã!</b>

---

üéâ <b>–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ: AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞!</b>

üß† <b>–ö–æ–º–∞–Ω–¥–∞ /insights:</b>
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
‚Ä¢ AI-–∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
‚Ä¢ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —ç–Ω–µ—Ä–≥–∏–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è

üéÆ <b>–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è:</b>
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —Å—Ç—Ä–∏–∫–æ–≤ üèÜ
‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üìä
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π üîÆ

üí° <b>–ü–æ–ø—Ä–æ–±—É–π –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>
–ü—Ä–æ–¥–æ–ª–∂–∞–π –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–ø—Ä–æ—Å—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ, –∏ –±–æ—Ç —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ—É—á–µ–º –ø–æ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—é.

üöÄ <b>–≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ!</b> 
–°–∫–æ—Ä–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –±–æ–ª—å—à–µ —É–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–µ–±—è.

<i>–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ ESM –±–æ—Ç–∞</i> üíô`, user);

      const keyboard = {
        inline_keyboard: [
          [
            { text: '‚åö –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—ã', callback_data: 'try_pushover' }
          ],
          [
            { text: 'üß† –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã', callback_data: 'try_insights' },
            { text: 'üèÜ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', callback_data: 'try_achievements' }
          ],
          [
            { text: 'üìä –†–µ–π—Ç–∏–Ω–≥–∏', callback_data: 'try_leaderboard' },
            { text: 'üîî –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å', callback_data: 'try_survey' }
          ],
          [
            { text: 'üìö –ü–æ–º–æ—â—å', callback_data: 'show_help' },
            { text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'close_news' }
          ]
        ]
      };

      await bot.sendMessage(chatId, newsMessage, {
        parse_mode: 'HTML',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('Error in news command:', error);
      const fallbackMessage = `
üéâ <b>–ö—Ä—É–ø–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ESM –±–æ—Ç–∞!</b>

–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å –ò–ò! ü§ñ

üß† –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /insights - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
‚Ä¢ /achievements - —Ç–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è  
‚Ä¢ /leaderboard - —Ä–µ–π—Ç–∏–Ω–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

üí° –ü–æ–ø—Ä–æ–±—É–π /insights –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–ø—Ä–æ—Å–æ–≤!`;

      bot.sendMessage(chatId, fallbackMessage, { parse_mode: 'HTML' });
    }
  },

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
  handleCallback: async (bot, query) => {
    const chatId = query.message.chat.id;
    const action = query.data;

    try {
      await bot.answerCallbackQuery(query.id);

      switch (action) {
        case 'try_pushover':
          const pushoverCommand = require('./pushover');
          await pushoverCommand.execute(bot, query.message);
          break;

        case 'try_insights':
          const insightsCommand = require('./insights');
          await insightsCommand.execute(bot, query.message);
          break;

        case 'try_achievements':
          const achievementsCommand = require('./achievements');
          await achievementsCommand.execute(bot, query.message);
          break;

        case 'try_leaderboard':
          const leaderboardCommand = require('./leaderboard');
          await leaderboardCommand.execute(bot, query.message);
          break;

        case 'try_survey':
          const surveyCommand = require('./survey');
          await surveyCommand.execute(bot, query.message);
          break;

        case 'show_help':
          const helpCommand = require('./help');
          await helpCommand.execute(bot, query.message);
          break;

        case 'close_news':
          await bot.editMessageText(
            '‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π /news —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–Ω–æ–≤–∞!',
            {
              chat_id: chatId,
              message_id: query.message.message_id
            }
          );
          break;

        default:
          await bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      }
    } catch (error) {
      console.error('Error in news callback:', error);
      await bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
  }
};