const User = require('../models/User');
const DataExporter = require('../services/dataExporter');
const fs = require('fs');

module.exports = {
  command: 'export',
  description: 'Export your data for research',
  
  execute: async (bot, msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne({ telegramId });
      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìä JSON (–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)', callback_data: 'export_json' },
              { text: 'üìà CSV (—Ç–∞–±–ª–∏—Ü–∞)', callback_data: 'export_csv' }
            ],
            [
              { text: 'üî¨ SPSS (–¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π)', callback_data: 'export_spss' }
            ],
            [
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'export_cancel' }
            ]
          ]
        }
      };
      
      await bot.sendMessage(
        chatId,
        'üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\\n\\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\\n\\n' +
        '‚Ä¢ **JSON** - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\\n' +
        '‚Ä¢ **CSV** - —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è Excel/Google Sheets\\n' +
        '‚Ä¢ **SPSS** - —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\\n\\n' +
        '_–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã_',
        { 
          parse_mode: 'Markdown',
          ...keyboard 
        }
      );
      
    } catch (error) {
      console.error('Export command error:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  },
  
  handleCallback: async (bot, query) => {
    const chatId = query.message.chat.id;
    const telegramId = query.from.id;
    const data = query.data;
    
    if (!data.startsWith('export_')) return;
    
    await bot.answerCallbackQuery(query.id);
    
    if (data === 'export_cancel') {
      await bot.editMessageText(
        '‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω',
        { chat_id: chatId, message_id: query.message.message_id }
      );
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
    const format = data.replace('export_', '');
    
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findOne({ telegramId });
      if (!user) {
        await bot.editMessageText(
          '–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
          { chat_id: chatId, message_id: query.message.message_id }
        );
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.editMessageText(
        `‚è≥ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${format.toUpperCase()}...`,
        { chat_id: chatId, message_id: query.message.message_id }
      );
      
      // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const exporter = new DataExporter();
      const result = await exporter.exportUserData(user._id, format, {
        includeTraining: false,
        anonymize: true
      });
      
      if (!result.success) {
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${result.error}`);
        return;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª(—ã)
      if (format === 'spss') {
        // SPSS –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∞ —Ñ–∞–π–ª–∞
        await bot.sendDocument(chatId, result.filePath.dataFile, {
          caption: 'üìä –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SPSS'
        });
        await bot.sendDocument(chatId, result.filePath.syntaxFile, {
          caption: 'üìù –°–∏–Ω—Ç–∞–∫—Å–∏—Å SPSS –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞'
        });
      } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await bot.sendDocument(chatId, result.filePath, {
          caption: this.getExportCaption(format, result.statistics)
        });
      }
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      setTimeout(() => {
        if (format === 'spss') {
          fs.unlinkSync(result.filePath.dataFile);
          fs.unlinkSync(result.filePath.syntaxFile);
        } else {
          fs.unlinkSync(result.filePath);
        }
      }, 60000); // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
      
    } catch (error) {
      console.error('Export error:', error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö.');
    }
  },
  
  getExportCaption(format, stats) {
    let caption = `‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\\n\\n`;
    caption += `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\\n`;
    caption += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats.totalResponses}\\n`;
    caption += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${stats.averageQuality}%\\n`;
    caption += `‚Ä¢ Flow —Å–æ—Å—Ç–æ—è–Ω–∏—è: ${stats.flowPercentage}%\\n`;
    
    if (stats.dateRange.from && stats.dateRange.to) {
      const from = new Date(stats.dateRange.from).toLocaleDateString('ru-RU');
      const to = new Date(stats.dateRange.to).toLocaleDateString('ru-RU');
      caption += `‚Ä¢ –ü–µ—Ä–∏–æ–¥: ${from} - ${to}\\n`;
    }
    
    caption += `\\n_–î–∞–Ω–Ω—ã–µ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π_`;
    
    return caption;
  }
};